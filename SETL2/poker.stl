program main;
    var Suits  := { "c", "h", "d", "s" };
    var Values := { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }; 
    var Deck   := { [ v, s ] : v in Values, s in Suits };

    for outs in [1 .. 15] loop
        o  := 1.0 * outs;
        -- probablility to hit at turn
        p1 := o / 47;
        -- probablility to hit at river
        p2 := p1 + (1 - p1) * o / 46;
        odds1 := (1-p1) / p1;
        odds2 := (1-p2) / p2;
        print("outs: ", outs, ", p turn: ", p1, ", odds = ", odds1, ", p river: ", p2, ", odds: ", odds2); 
    end loop;
    print();

    -- probability someone hits a flop containing unpaired cards 
    Flop    := { [ 10, "c" ], [ 9, "d" ], [ 2, "c" ] };
    Rest    := Deck - Flop;
    Holes   := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    Hits    := { h in Holes | hit(Flop, h) };
    print("number of Holes:    ", #Holes);
    print("number of top hits: ", #Hits);
    p      := 1.0 * #Hits / #Holes;
    print("probability, to hit a card of the flop: ", p);
    print("Odds: ", (1-p)/p);

    -- probability someone hits a flop containing a paired card 
    Flop    := { [ 10, "c" ], [ 10, "d" ], [ 2, "c" ] };
    Rest    := Deck - Flop;
    Holes   := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    Hits    := { h in Holes | hit(Flop, h) };
    print("number of Holes:    ", #Holes);
    print("number of top hits: ", #Hits);
    p      := 1.0 * #Hits / #Holes;
    print("probability, to hit a card of the flop when the flop is paired: ", p);
    print("Odds: ", (1-p)/p);
    p4 := 1 - (1 - p) ** 4;
    print("probability, that one of 4 players hits the paired card: ", p4);
    print();

    -- probability someone hits a flop containing trips 
    Flop    := { [ 10, "c" ], [ 10, "d" ], [ 10, "h" ] };
    Rest    := Deck - Flop;
    Holes   := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    Hits    := { h in Holes | hit(Flop, h) };
    print("number of Holes:    ", #Holes);
    print("number of top hits: ", #Hits);
    p      := 1.0 * #Hits / #Holes;
    print("probability, to hit a card of the flop when the flop has trips: ", p);
    print("Odds: ", (1-p)/p);
    p4 := 1 - (1 - p) ** 4;
    print("probability, that one of 4 players hits the paired card: ", p4);
    print();

    -- probability someone hits the board at least once
    Board    := { [ 12, "d" ], [ 11, "s" ], [ 10, "c" ], [ 5, "d" ], [ 2, "c" ] };
    Rest     := Deck - Board;
    Holes    := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    Hits     := { h in Holes | hit(Board, h) };
    print("number of Holes:    ", #Holes);
    print("number of top hits: ", #Hits);
    p      := 1.0 * #Hits / #Holes;
    print("probability, to hit the board on the river: ", p);
    print();

    -- probability someone hits the board at least once when the board contains a pair
    Board    := { [ 11, "d" ], [ 11, "s" ], [ 10, "c" ], [ 5, "d" ], [ 2, "c" ] };
    Rest     := Deck - Board;
    Holes    := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    Hits     := { h in Holes | hit(Board, h) };
    print("number of Holes:    ", #Holes);
    print("number of top hits: ", #Hits);
    p      := 1.0 * #Hits / #Holes;
    print("probability, to hit the board on the river when the board has a pair: ", p);
    print();

    -- probability someone hits the board at least once when the board contains two pairs
    Board    := { [ 11, "d" ], [ 11, "s" ], [ 10, "c" ], [ 2, "d" ], [ 2, "c" ] };
    Rest     := Deck - Board;
    Holes    := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    Hits     := { h in Holes | hit(Board, h) };
    print("number of Holes:    ", #Holes);
    print("number of top hits: ", #Hits);
    p      := 1.0 * #Hits / #Holes;
    print("probability, to hit the board on the river when the board has two pair: ", p);
    print();

    -- probability someone hits the board at least once when the board contains a set
    Board    := { [ 11, "d" ], [ 11, "s" ], [ 11, "c" ], [ 3, "d" ], [ 2, "c" ] };
    Rest     := Deck - Board;
    Holes    := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    Hits     := { h in Holes | hit(Board, h) };
    print("number of Holes:    ", #Holes);
    print("number of top hits: ", #Hits);
    p      := 1.0 * #Hits / #Holes;
    print("probability, to hit the board on the river if the board contains trips: ", p);
    print();

    -- probability someone hits the board at least once when the board contains a full house
    Board    := { [ 2, "d" ], [ 2, "s" ], [ 2, "c" ], [ 3, "d" ], [ 3, "c" ] };
    Rest     := Deck - Board;
    Holes    := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    Hits     := { h in Holes | hit(Board, h) };
    print("number of Holes:    ", #Holes);
    print("number of top hits: ", #Hits);
    p      := 1.0 * #Hits / #Holes;
    print("probability, to hit the board on the river when the board has a full house: ", p);
    print();

    -- probability someone hit the board twice
    Board    := { [ 12, "d" ], [ 11, "s" ], [ 10, "c" ], [ 5, "d" ], [ 2, "c" ] };
    Rest     := Deck - Board;
    Holes    := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    PairHits := { h in Holes | pairHit(Board, h) };
    print("number of Holes:    ", #Holes);
    print("number of top hits: ", #PairHits);
    p      := 1.0 * #PairHits / #Holes;
    print("probability, to hit the board twice on the river: ", p);
    print("Odds: ", (1-p)/p);

    -- probability someone hits a flush if the flop is suited
    Flop      := { [ 10, "c" ], [ 5, "c" ], [ 2, "c" ] };
    Rest      := Deck - Flop;
    Holes     := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    FlushHits := { h in Holes | isFlush(Flop + h) };
    print("number of Holes:      ", #Holes);
    print("number of flush hits: ", #FlushHits);
    p      := 1.0 * #FlushHits / #Holes;
    print("probability, to hit the flush when the flop is suited: ", p);
    print("Odds: ", (1-p)/p);
    p4 := 1 - (1 - p) ** 4;
    print("probability, that one of 4 players hits the flush: ", p4);
    print();

    -- probability someone has a flush draw if the flop has two cards
    -- of the same suit
    Flop       := { [ 10, "c" ], [ 5, "c" ], [ 2, "d" ] };
    Rest       := Deck - Flop;
    Holes      := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    FlushDraws := { h in Holes | isFlushDraw(Flop + h) };
    print("number of Holes:      ", #Holes);
    print("number of flush hits: ", #FlushDraws);
    p      := 1.0 * #FlushDraws / #Holes;
    print("probability, to hit a flush draw: ", p);
    print("Odds: ", (1-p)/p);
    p4 := 1 - (1 - p) ** 4;
    print("probability, that one of 4 players hits the flush draw: ", p4);
    print();

    -- probability someone has a flush draw if the flop is suited
    Flop       := { [ 10, "c" ], [ 5, "c" ], [ 2, "c" ] };
    Rest       := Deck - Flop;
    Holes      := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    FlushDraws := { h in Holes | isFlushDraw(Flop + h) };
    print("number of Holes:      ", #Holes);
    print("number of flush hits: ", #FlushDraws);
    p      := 1.0 * #FlushDraws / #Holes;
    print("probability, to hit a flush draw: ", p);
    print("Odds: ", (1-p)/p);
    p4 := 1 - (1 - p) ** 4;
    print("probability, that one of 4 players hits the flush draw: ", p4);
    print();

    -- probability someone hits the top card of the flop
    Flop    := { [ 10, "c" ], [ 5, "d" ], [ 2, "c" ] };
    Rest    := Deck - Flop;
    Holes   := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    TopHits := { h in Holes | topHit(Flop, h) };
    print("number of Holes:    ", #Holes);
    print("number of top hits: ", #TopHits);
    p      := 1.0 * #TopHits / #Holes;
    print("probability, to hit the top of the flop: ", p);
    print("Odds: ", (1-p)/p);
    p4 := 1 - (1 - p) ** 4;
    print("probability, that one of 4 players hits the top of the flop: ", p4);
    print();
    PairHits := { h in Holes | pairHit(Flop, h) };
    print("number of pair hits: ", #PairHits);
    p      := 1.0 * #PairHits / #Holes;
    print("probability, to hit a pair on the flop: ", p);
    print("Odds: ", (1-p)/p);
    print();
    p4 := 1 - (1 - p) ** 4;
    print("probability, that one of 4 players hits a pair on the flop: ", p4);
    print();

    -- probability someone hits a paired card of the flop
    Flop    := { [ 10, "c" ], [ 10, "d" ], [ 2, "c" ] };
    Rest    := Deck - Flop;
    Holes   := { { k1, k2 } : k1 in Rest, k2 in Rest | #{ k1, k2 } = 2 };
    TopHits := { h in Holes | topHit(Flop, h) };
    print("number of Holes:    ", #Holes);
    print("number of top hits: ", #TopHits);
    p      := 1.0 * #TopHits / #Holes;
    print("probability, to hit a paired card of the flop: ", p);
    print("Odds: ", (1-p)/p);
    p4 := 1 - (1 - p) ** 4;
    print("probability, that one of 4 players hits the paired card: ", p4);
    print();

    -- probability of a suited preflop
    PreFlops := { { k1, k2, k3 } : k1 in Deck, k2 in Deck | #{ k1, k2 } = 2 };
    Suited   := { h in PreFlops | isSuited(h) };
    print("number of preflops:        ", #PreFlops);
    print("number of suited preflops: ", #Suited);
    p      := 1.0 * #Suited / #PreFlops;
    print("probability of a suited preflop: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping a flush with suited cards
    Hole    := { [ 5, "c" ], [ 9, "c" ] };
    Rest    := Deck - Hole;
    Flops   := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Flushes := { f in Flops | isFlush(f + Hole) };
    print("number of flops: ", #Flops);
    print("number of flushes: ", #Flushes);
    p      := 1.0 * #Flushes / #Flops;
    print("probability, to flop a flush with suited cards: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping an flush draw with suited cards
    Hole  := { [ 5, "c" ], [ 6, "c" ] };
    Rest  := Deck - Hole;
    Flops := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Draws := { f in Flops | isFlushDraw(f + Hole) };
    print("number of flops: ", #Flops);
    print("number of draws: ", #Draws);
    p      := 1.0 * #Draws / #Flops;
    print("probability, to flop a flush draw with suited cards: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping either an open straight draw or a flush draw with suited connectors
    Hole  := { [ 5, "s" ], [ 6, "s" ] };
    Rest  := Deck - Hole;
    Flops := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Draws := { f in Flops | isStraightDraw(f + Hole) } + { f in Flops | isFlushDraw(f + Hole) };
    print("number of flops: ", #Flops);
    print("number of draws: ", #Draws);
    p      := 1.0 * #Draws / #Flops;
    print("probability, to flop a straight draw or a flush draw with 56s: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping either an open straight draw and a flush draw with suited connectors
    Hole  := { [ 5, "s" ], [ 6, "s" ] };
    Rest  := Deck - Hole;
    Flops := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Draws := { f in Flops | isStraightDraw(f + Hole) } * { f in Flops | isFlushDraw(f + Hole) };
    print("number of flops: ", #Flops);
    print("number of draws: ", #Draws);
    p      := 1.0 * #Draws / #Flops;
    print("probability, to flop a straight draw and a flush draw with 56s: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping an open straight draw with connected cards
    Hole  := { [ 5, "c" ], [ 6, "c" ] };
    Rest  := Deck - Hole;
    Flops := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Draws := { f in Flops | isStraightDraw(f + Hole) };
    print("number of flops: ", #Flops);
    print("number of draws: ", #Draws);
    p      := 1.0 * #Draws / #Flops;
    print("probability, to flop a straight draw with 5, 6: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping an open straight draw with 5, 7
    Hole  := { [ 5, "c" ], [ 7, "s" ] };
    Rest  := Deck - Hole;
    Flops := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Draws := { f in Flops | isStraightDraw(f + Hole) };
    print("number of flops: ", #Flops);
    print("number of draws: ", #Draws);
    p      := 1.0 * #Draws / #Flops;
    print("probability, to flop a straight draw with 5, 7: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping an open straight draw with 5, 8
    Hole  := { [ 5, "c" ], [ 8, "s" ] };
    Rest  := Deck - Hole;
    Flops := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Draws := { f in Flops | isStraightDraw(f + Hole) };
    print("number of flops: ", #Flops);
    print("number of draws: ", #Draws);
    p      := 1.0 * #Draws / #Flops;
    print("probability, to flop a straight draw with 5, 8: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping a straight with connected cards
    Hole      := { [ 5, "c" ], [ 6, "s" ] };
    Rest      := Deck - Hole;
    Flops     := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Straights := { f in Flops | isStraight(f + Hole) };
    print("number of flops:     ", #Flops);
    print("number of straights: ", #Straights);
    p      := 1.0 * #Straights / #Flops;
    print("probability, to flop a straight with 5, 6: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping a straight with cards with one hole
    Hole      := { [ 5, "c" ], [ 7, "s" ] };
    Rest      := Deck - Hole;
    Flops     := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Straights := { f in Flops | isStraight(f + Hole) };
    print("number of flops:     ", #Flops);
    print("number of straights: ", #Straights);
    p      := 1.0 * #Straights / #Flops;
    print("probability, to flop a straight with 5, 7: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping a straight with cards with two holes
    Hole      := { [ 5, "c" ], [ 8, "s" ] };
    Rest      := Deck - Hole;
    Flops     := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Straights := { f in Flops | isStraight(f + Hole) };
    print("number of flops:     ", #Flops);
    print("number of straights: ", #Straights);
    p      := 1.0 * #Straights / #Flops;
    print("probability, to flop a straight with 5, 8: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping a straight with cards with three holes
    Hole      := { [ 5, "c" ], [ 9, "s" ] };
    Rest      := Deck - Hole;
    Flops     := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Straights := { f in Flops | isStraight(f + Hole) };
    print("number of flops:     ", #Flops);
    print("number of straights: ", #Straights);
    p      := 1.0 * #Straights / #Flops;
    print("probability, to flop a straight with 5, 9: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping a set
    Hole   := { [ 3, "c" ], [ 3, "s" ] };
    Rest   := Deck - Hole;
    Flops  := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Trips  := { f in Flops | [ 3, "d" ] in f or [ 3, "h" ] in f };
    print("number of flops: ", #Flops);
    print("number of trips: ", #Trips);
    p      := 1.0 * #Trips / #Flops;
    print("probability to flop a set: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- probability of flopping trip Jacks against aces
    HoleMe       := { [ 11, "h" ], [ 11, "d" ] };
    HoleOpponent := { [ 14, "h" ], [ 14, "d" ] };
    Rest         := Deck - HoleMe - HoleOpponent;
    Flops        := { { k1, k2, k3 } : k1 in Rest, k2 in Rest, k3 in Rest | #{ k1, k2, k3 } = 3 };
    Win          := { f in Flops | JackNoAce(f) };
    print("number of flops: ", #Flops);
    print("number of trip jacks: ", #Win);
    p      := 1.0 * #Win / #Flops;
    print("probability, to win with Jacks against Aces on the flop: ", p);
    print("Odds: ", (1-p)/p);
    print();

    -- true, if hole is suited
    procedure isSuited(Hole);
        return #{ c(2) : c in Hole } = 1;
    end isSuited;


    -- true, if cards make a flush
    procedure isFlush(Cards);
        return #{ c : [ n, c ] in Cards } = 1;        
    end isFlush;

    procedure isFlushDraw(Cards);
        return 4 in { #{ [ n, c ] in Cards | c = s } : s in Suits };
    end isFlushDraw;

    -- true, if cards make a straight
    procedure isStraight(Cards);
        Numbers := { n : [ n, c ] in Cards };
        return #Numbers = 5 and max/ Numbers = 4 + min/ Numbers;
    end isStraight;

    procedure isStraightDraw(Cards);
        Numbers := { n : [ n, c ] in Cards };
        if isFourStraight(Numbers) then
            return true;
        end if;
        High := Numbers - { min/ Numbers };
        if isFourStraight(High) then
            return true;
        end if;
        Low := Numbers - { max/ Numbers };
        if isFourStraight(Low) then
            return true;
        end if;
        return false;
    end isStraightDraw;

    -- true, if cards make a 4-straight
    procedure isFourStraight(Numbers);
        return #Numbers = 4 and max/ Numbers = 3 + min/ Numbers;
    end isFourStraight;

    -- probability that a preflop hits the top card
    procedure topHit(Flop, Hole);
        top := max/ { n : [ n, c ] in Flop };
        return top in { n : [ n, c ] in Hole };
    end topHit;

    -- probability that a preflop hits the top card
    procedure hit(Flop, Hole);
        return #({ n : [ n, c ] in Flop } * { n : [ n, c ] in Hole }) > 0;
    end hit;

    -- probability that a preflop hits a pair of the flop
    procedure pairHit(Flop, Hole);
        return { n : [ n, c ] in Hole } <= { n : [ n, c ] in Flop };
    end pairHit;

    -- true, if flop contains a Jack but no ace
    procedure JackNoAce(Flop);
        return #{ [ n, c ] in Flop | n = 11 } = 1 and  
               #{ [ n, c ] in Flop | n = 14 } = 0;
    end JackNoAce;

end main;