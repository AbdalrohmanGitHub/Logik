program main;
    
    -- ACHTUNG:
    -- D gives the distance between two points
    D := { [ [1,2], 2 ], 
           [ [2,3], 1], 
           [ [1,3], 4 ], 
           [ [2,4], 7], 
           [ [4,5], 1 ],
           [ [4,1], 1 ] 
         };

    print( "D = ", D );
    PR := closure(D);
    print("PR = ", PR);
    PR := minimize(PR);
    print("PR = ", PR);

    for [ [x, y], p, l ] in PR loop
        print("A Shortest path from ", x, " to ", y, " is: ", p);
        print("Length: ", l);
    end loop;

    -- The procedure call closure(D) computes the transitive closure
    -- of the distance function D.
    procedure closure(D);
        PR  := createPathRelation(D);
        loop
            OldPR := PR;
            PR    := PR + eliminateCycles( compose(D, PR) );
            if PR = OldPR then
                return PR;
            end if;
        end loop;
    end closure;

    -- The procedure call compose(D, PR) computes the composition of
    -- a distance functions D with a path relation PR.  A path relation
    -- is a set of tupels of the form [ [x,y], p, l ] where x and y are 
    -- points, p is a path connecting x and y and l is the length of 
    -- this path.
    procedure compose(D, PR);
        R := domain(D);
        return { [ [x,z], [x] + p, D([x,y1]) + l ] : 
                 [x,y1] in R, [ [y2,z], p, l ] in PR | y1 = y2 };
    end compose;

    -- This procedure takes a path relation PR as input.  It eliminates 
    -- all tuples of the form [ [x,y], p, l ] from PR for which the 
    -- path p contains a cycle.
    procedure eliminateCycles(PR);
        return { [ xy, p, l ] in PR | not cycle(p) };
    end eliminateCycles;

    -- A path contains a cycle if an element occurs more than once.
    -- Then the set of all elements in p contains fewer elements than p.
    procedure cycle(p);
        return #{ x : x in p } < #p;
    end cycle;

    -- Given a distance function D, this procedure creates a path 
    -- relation.
    procedure createPathRelation(D);
        return { [ xy, xy, d ] : [ xy, d] in D }; 
    end createPathRelation;

    -- Return the length of the shortest path connecting x with y,
    -- where u = [x,y].
    procedure distance(PR, u);
        return min/ { l : [ v, p, l ] in PR | u = v };
    end distance;

    -- Keep only those path in PR that are minimal.
    procedure minimize(PR);
        return { [u, p, l ] in PR | l = distance(PR, u) };
    end minimize;

end main;
