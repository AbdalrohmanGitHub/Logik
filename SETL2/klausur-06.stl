program main;

    Farben := { "rot", "grün", "blau" };

    P := { [ f1, f2, f3 ] : f1 in Farben, f2 in Farben, f3 in Farben | 
           gueltig(Farben, [ f1, f2, f3 ]) };

    R := { [ t1, t2 ] : t1 in P, t2 in P | benachbart(t1, t2) };

    print( double([1,3,4,3,2,2,1,1,7]) );
    
    print(P);
    print(R);

    print( symDiff( {1,2}, {2,3} ) );
    
    print( pathValid( [1,2,3], {[1,2], [2,3]} ) );

    procedure symDiff(M, N);
        return (M - N) + (N - M);
    end symDiff;

    procedure pathValid(p, R);
        Indices := { 1 .. #p-1 };
        return { i in Indices | [p(i), p(i+1)] in R } = Indices;
    end pathValid;

    procedure gueltig(Farben, t);
        return Farben = { t(i) : i in {1,2,3} };
    end gueltig;

    procedure benachbart(t1, t2);
        return #{ i in {1,2,3} | t1(i) = t2(i) } = 1;
    end benachbart;

    procedure double(l);
        if #l <= 1 then
            return {};
        elseif l(1) in l(2..#l) then
            return { l(1) } + double( l(2..#l) );
        else
            return double( l(2..#l) );
        end if;
    end double;
end main;