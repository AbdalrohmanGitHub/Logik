--     uses operation loop to apply infix operator to composite
class oploop;
    -- this class has no methods
end oploop;

class body oploop;        --     uses operation loop to apply infix operator to composite
    var val1;             -- initial value
    var doTheLoop;        -- binary function, to be instantiated in inherited classes

    procedure self + tup;            
        op := lambda(x,y); 
            return x + y; 
        end lambda; 
        return doTheLoop(op,tup);
    end;

    procedure self * tup;            
         op := lambda(x,y); 
            return x * y; 
        end lambda; 
        return doTheLoop(op,tup);
    end;

    procedure self - tup;            
        op := lambda(x,y); 
            return x - y; 
        end lambda; 
        return doTheLoop(op,tup);
    end;

    procedure self / tup;            
        op := lambda(x,y); 
            return x / y; 
        end lambda; 
        return doTheLoop(op,tup);
    end;

    procedure self ** tup;            
        op := lambda(x,y); 
            return x ** y; 
        end lambda; 
        return doTheLoop(op,tup);
    end;

    procedure self max tup;            
        op := lambda(x,y); 
            return x max y; 
        end lambda; 
        return doTheLoop(op,tup);
    end;

    procedure self min tup;            
        op := lambda(x,y); 
            return x min y; 
        end lambda; 
        return doTheLoop(op,tup);
    end;

end oploop;

-- functional transformation: compound operator
class all; 
    inherit oploop;
    procedure create(init_val);           
end all;

class body all;
    
    procedure create(init_val);
         -- save initial value
        val1      := init_val; 
        doTheLoop := doit;           
    end create;

    -- operation loop
    procedure doit(op, tupset);
        x := val1; 
        for y in tupset loop 
            x := op(x,y); 
        end loop; 
        return x;
    end doit;

end all;

 -- functional transformation: compound operator
class each;           
    inherit oploop;
    procedure create(init_val); 
end each;

class body each;

    procedure create(init_val);
        -- save initial value
        val1 := if not is_tuple(init_val) then [init_val] else init_val end if; 
        doTheLoop := doit;    
    end create;

    procedure doit(op, tup);            -- operation loop
        last := val1(#val1); 
        return [op(val1(j)?last,x): x = tup(j)];
    end doit;

end each;

-- The preceding class is exercised by the test program

program main;            -- test of 'all' and 'each'
    use all, each;
    print("all(0) + [1..3] = ", all(0) + [1..3]);
    print("each(3) + [1..3] = ", each(3) + [1..3]);
    print("each([1..2]) + [1..3] = ", each([1..2]) + [1..3]);

    print("all(1) * [1..4] = ", all(1) * [1..4]);
    print("each(3) * [1..3] = ", each(3) * [1..3]);
    print("each([1..2]) * [1..10] = ", each([1..2]) * [1..10]);

end main;
