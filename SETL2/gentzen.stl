program main;

    s := "(p + q) * (p + -q) * (-p + q) * (-p + -q)";
    l := scanFormula(s);
    f := parse_formula(l);
    print(f);
    M := normalize(f);
    print( pretty_print_knf(M) );
--  for k1 in M, k2 in M loop
--      print("Folgerungen aus ", pretty_print_disjunction(k1), " und ", pretty_print_disjunction(k2),":");
--      K := concludeAll(k1, k2);
--      for f in K loop
--          print( pretty_print_disjunction(f) );
--      end loop;
--  end loop;

    A := gentzen(M);
    print("All = ", A);

    procedure gentzen(M);
        All := M;
        New := M;
        while New /= {} loop
            Fresh := {} +/ { concludeAll(k1, k2) : k1 in All, k2 in New };
            [ All, New ] := [ All + New, Fresh - All ];
            for k in Fresh loop
              pretty_print_disjunction(k);
            end loop;
        end loop;
        return All;
    end gentzen;

    -- Die Prozedur concludeAll(k1, K2) berechnet die Menge aller Klauseln, 
    -- die sich mit einer Anwendung der Schnitt-Regel aus den Klauseln k1 
    -- und k2 herleiten lassen.  Die Klauseln k1 und k2 liegen als Mengen 
    -- von Literalen vor.  
    procedure concludeAll(k1, k2);
       return { (k1 - {l}) + (k2 - {komplement(l)}) : l in k1 | komplement(l) in k2 };
    end concludeAll;

    -- Die Prozedur komplement(l) berechnet das Komplement des Literals l.
    procedure komplement(l);
        case 
            when l  = "0" => return "1";
            when l  = "1" => return "0";
            when #l = 1   => return [ "-", l ];
            when #l = 2   => return l(2);
            otherwise     =>
                print("l = ", l);
                abort("Fehler in komplement.");
        end case;
    end komplement;

    -- Diese Prozedur überführt die Formel f in konjunktive Normalform.
    procedure normalize(f);
        n1 := eliminate_gdw(f);
        n2 := eliminate_folgt(n1);
        n3 := nnf(n2);
        n4 := knf(n3);
        return n4;
    end normalize;

    -- Eliminiert den Operator "gdw" aus der eingegebenen Formel f.
    procedure eliminate_gdw(f);
        case
            when f = "1"                   =>  return "1";
            when f = "0"                   =>  return "0";
            when #f = 1                    =>  return f;
            when #f = 2 and f(1) = "-" =>  
                return [ "-", eliminate_gdw( f(2) ) ];
            when #f = 3 and f(1) = "*"   =>  
                return [ "*", eliminate_gdw( f(2) ), eliminate_gdw( f(3) ) ];
            when #f = 3 and f(1) = "+"  =>  
                return [ "+", eliminate_gdw( f(2) ), eliminate_gdw( f(3) ) ];
            when #f = 3 and f(1) = "->" =>  
                return [ "->", eliminate_gdw( f(2) ), eliminate_gdw( f(3) ) ];
            when #f = 3 and f(1) = "<->"   =>  
                f2 := eliminate_gdw( f(2) );
                f3 := eliminate_gdw( f(3) );
                return [ "*", [ "->", f2, f3 ], [ "->", f3, f2 ] ];
            otherwise  => print("Fehler in eliminate_gdw( ", f, ")" );
        end case;
    end eliminate_gdw;

    -- Eliminiert den Operator "->" aus der eingegebenen Formel f.
    -- Es wird vorausgesetzt, dass der Operator "<->" bereits vorher 
    -- eliminiert wurde.
    procedure eliminate_folgt(f);
        case
            when f = "1"                   =>  return "1";
            when f = "0"                   =>  return "0";
            when #f = 1                    =>  return f;
            when #f = 2 and f(1) = "-"     =>  
                return [ "-", eliminate_folgt( f(2) ) ];
            when #f = 3 and f(1) = "*"     =>  
                return [ "*", eliminate_folgt(f(2)), eliminate_folgt(f(3)) ];
            when #f = 3 and f(1) = "+"     =>  
                return [ "+", eliminate_folgt(f(2)), eliminate_folgt(f(3)) ];
            when #f = 3 and f(1) = "->"    =>  
                f2 := eliminate_folgt( f(2) );
                f3 := eliminate_folgt( f(3) );
                return [ "+", [ "-", f2 ], f3 ];
            otherwise  => print("Fehler in eliminate_folgt( ", f, ")" );
        end case;
    end eliminate_folgt;

    -- Berechnet die Negations-Normalform der Formel f.
    procedure nnf(f);
        case
            when f = "1"               =>  return "1";
            when f = "0"               =>  return "0";
            when #f = 1                =>  return f;
            when #f = 2 and f(1) = "-" =>  return negiere( f(2) );
            when #f = 3 and f(1) = "*" =>  return [ "*", nnf( f(2) ), nnf( f(3) ) ];
            when #f = 3 and f(1) = "+" =>  return [ "+", nnf( f(2) ), nnf( f(3) ) ];
            otherwise  => print("Fehler in nnf( ", f, ")" );
        end case;
    end nnf;

    -- Diese Funktion berechnet die Negations--Normalform von (nicht f) und schiebt dabei
    -- das Negationszeichen soweit wie möglich nach innen.
    procedure negiere(f);
        case
            when f = "1"               => return "0";
            when f = "0"               => return "1";
            when #f = 1                => return [ "-", f ];
            when #f = 2 and f(1) = "-" => return nnf( f(2) );
            when #f = 3 and f(1) = "*" => 
                return [ "+", negiere( f(2) ), negiere( f(3) ) ];
            when #f = 3 and f(1) = "+" => 
                return [ "*", negiere( f(2) ), negiere( f(3) ) ];
            otherwise  => print("Fehler in negiere( ", f, ")" );
        end case;
    end negiere;

    -- Diese Funktion berechnet die KNF von f durch Ausmultiplizieren.
    -- Die KNF wird als Menge von Mengen dargestellt.  Es wird vorausgesetzt,
    -- dass die Funktion f bereits in Negations--Normalform ist.
    procedure knf(f);
        case
            when f = "1"               =>  return { };
            when f = "0"               =>  return { {} };
            when #f = 1                =>  return { { f } };
            when #f = 2 and f(1) = "-" =>  return { { f } };
            when #f = 3 and f(1) = "*" =>  return knf( f(2) ) + knf( f(3) );
            when #f = 3 and f(1) = "+" =>  
                return { k1 + k2 : k1 in knf(f(2)), k2 in knf(f(3)) };
            otherwise  => print("Fehler in knf( ", f, ")" );
        end case;
    end knf;

    -- Wandelt die Formel f in einen String um.  Es wird angenommen, dass
    -- f in konjunktiver Normalform vorliegt.
    procedure pretty_print_knf(f);
        if f = {} then
            return "1";
        end if;
        if #f = 1 then
            return "(" + pretty_print_disjunction(arb f) + ")";
        end if;
        k from f;
        s1 := pretty_print_disjunction(k);
        s2 := pretty_print_knf(f);
        return "(" + s1 + ") * " + s2;
    end pretty_print_knf;

    -- Wandelt die Formel d in einen String um.  Es wird angenommen, dass
    -- d eine Disjunktion darstellt.
    procedure pretty_print_disjunction(d);
        if d = {} then
            return "0";
        end if;
        if #d = 1 then
            return prettyPrint(arb d);
        end if;
        l from d;
        s1 := prettyPrint(l);
        s2 := pretty_print_disjunction(d);
        return s1 + " + " + s2;
    end pretty_print_disjunction;

    -- Wandelt die Formel f in einen String um.
    procedure prettyPrint(f);
        case
            when f = "1"                  =>  return "1";
            when f = "0"                  =>  return "0";
            when #f = 1                   =>  return f(1);
            when #f = 2 and f(1) = "-"    =>  return "-" + prettyPrint( f(2) );
            when #f = 3 and f(1) = "*"    =>  
                return "(" + prettyPrint( f(2) ) + " * "   + prettyPrint( f(3) ) + ")";
            when #f = 3 and f(1) = "+"    =>  
                return "(" + prettyPrint( f(2) ) + " + "   + prettyPrint( f(3) ) + ")";
            when #f = 3 and f(1) = "->"   =>  
                return "(" + prettyPrint( f(2) ) + " -> "  + prettyPrint( f(3) ) + ")";
            when #f = 3 and f(1) = "<->"  =>  
                return "(" + prettyPrint( f(2) ) + " <-> " + prettyPrint( f(3) ) + ")";
            otherwise => abort("Error in prettyPrint: " + str(f));
        end case;
    end prettyPrint;

    -- Liest einen String und scannt den String.  Es wird eine Liste von Token
    -- zurück gegeben.
    procedure scanFormula(s);
        letters := {};
        -- collect all letters and digits
        for x in { 48 .. 57 } + { 65 .. 90 } + { 97 .. 122 } loop
            letters := letters + { char(x) };
        end loop;
        case 
            when s = ""                      => return [];
            when s(1) = "("                  => return [ "(" ] + scanFormula( s(2..) );
            when s(1) = ")"                  => return [ ")" ] + scanFormula( s(2..) );
            when s(1) = "+"                  => return [ "+" ] + scanFormula( s(2..) );
            when s(1) = "*"                  => return [ "*" ] + scanFormula( s(2..) );
            when #s >= 2 and s(1..2) = "->"  => return [ "->" ] + scanFormula( s(3..) );
            when #s >= 3 and s(1..3) = "<->" => return [ "<->" ] + scanFormula( s(4..) );
            when s(1) = "-"                  => return [ "-" ] + scanFormula( s(2..) );
            when s(1) = " " or s(1) = "    " => return scanFormula( s(2..) );
        end case;
        index := 1;
        word  := "";
        if s(index) notin letters then
            abort("Error in scanFormula(" + s + ")");
        end if;
        while s(index) in letters and index < #s loop
            index := index + 1;
        end loop;
        if not s(index) in letters then
            return [ s(1 .. index - 1) ] + scanFormula( s(index ..) );
        end if;
        if index = #s then
            return [ s ];
        end if;
        print( "Error in scanFormula: s = ", s );
    end scanFormula;

    -- Interpretiert eine Liste L von Tokens als Formel und gibt die gefundene 
    -- Formel zurück.  Es wird ein Backtracking-Algorithmus verwendet.
    procedure parse_formula(L);
        f := parse_parentheses(L);
        if f /= om then
            return f;
        end if;
        -- Nun wird nach einem binären Operator gesucht.  Die Reihenfolge, in der
        -- gesucht wird, richtet sich nach der Bindungsstärke der Operatoren 
        f := parse_equivalence(L);
        if f /= om then
            return f;
        end if;
        f := parse_implication(L);
        if f /= om then
            return f;
        end if;
        f := parse_conjunction(L);
        if f /= om then
            return f;
        end if;
        f := parse_disjunction(L);
        if f /= om then
            return f;
        end if;
        f := parse_negation(L);
        if f /= om then
            return f;
        end if;
        f := parse_atom(L);
        if f /= om then
            return f;
        end if;
    end parse_formula;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine geklammerte Formel
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_parentheses(L);
        if L(1) = "(" and L(#L) = ")" then
            return parse_formula( l(2 .. #L - 1) );
        end if;
    end parse_parentheses;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       f1 <-> f2
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_equivalence(L);
        for i in [ 2 .. #L - 1 ] loop
            if L(i) = "<->" then
                f1 := parse_formula( L(1 .. i - 1) );
                if f1 /= om then
                    f2 := parse_formula( L(i + 1 .. #L) );
                    if f2 /= om then
                        return [ "<->", f1, f2 ];
                    end if;
                end if;
            end if;
        end loop;
    end parse_equivalence;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       f1 -> f2
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_implication(L);
        for i in [ 2 .. #L - 1 ] loop
            if L(i) = "->" then
                f1 := parse_formula( L(1 .. i - 1) );
                if f1 /= om then
                    f2 := parse_formula( L(i + 1 .. #L) );
                    if f2 /= om then
                        return [ "->", f1, f2 ];
                    end if;
                end if;
            end if;
        end loop;
    end parse_implication;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       f1 * f2
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_conjunction(L);
        for i in [ 2 .. #L - 1 ] loop
            if L(i) = "*" then
                f1 := parse_formula( L(1 .. i - 1) );
                if f1 /= om then
                    f2 := parse_formula( L(i + 1 .. #L) );
                    if f2 /= om then
                        return [ "*", f1, f2 ];
                    end if;
                end if;
            end if;
        end loop;
    end parse_conjunction;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       f1 + f2
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_disjunction(L);
        for i in [ 2 .. #L - 1 ] loop
            if L(i) = "+" then
                f1 := parse_formula( L(1 .. i - 1) );
                if f1 /= om then
                    f2 := parse_formula( L(i + 1 .. #L) );
                    if f2 /= om then
                        return [ "+", f1, f2 ];
                    end if;
                end if;
            end if;
        end loop;
    end parse_disjunction;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       - f1
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_negation(L);
        if L(1) = "-" then
            f := parse_formula( L(2 .. #L) );
            if f /= om then
                return [ "-", f ];
            end if;
        end if;
    end parse_negation;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine atomare Formel 
    --       p
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_atom(L);
        if #L = 1  and L(1) in { "0", "false" } then
            return "0";
        end if;
        if #L = 1  and L(1) in { "1", "true" } then
            return "1";
        end if;
        if #L = 1 then
            return L;
        end if;
    end parse_atom;

end main;
