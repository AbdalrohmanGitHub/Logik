-- rational number class
class rational;
    -- creates the fraction n/m
    procedure create(n, m); 
    -- ceiling of rational
    procedure ceil();
    -- floor of rational
    procedure floor();
end rational;
        
class body rational;
    -- numerator and denominator, always in lowest terms
    var num, den := 1;
    
    -- converts the integer n to the corresponding fraction n/m
    procedure create(n, m);        
        num := n;   -- set the numerator
        den := m;
        simplify();
    end create;
    
    procedure set_num(n); 
        num := n; 
        simplify();
    end set_num;
    
    procedure set_denom(n); 
        den := n;
        simplify();
    end set_denom;

    procedure selfstr;                           -- string conversion for fractions
        return str(num) + "/" + str(den);
    end selfstr;
    
    -- addition routine for fractions, and for fraction + integer
    procedure self + r2;    
        if is_integer(r2) then 
            num2 := r2; 
            den2 := 1; 
        else 
            num2 := r2.num; 
            den2 := r2.den; 
        end if;
        n1 := num * den2 + num2 * den;
        n2 := den * den2;
        new_rational := rational(n1, n2); 
        return new_rational.simplify();
    end; 
    
    -- addition routine covering the case integer + fraction
    procedure r2 + self;    
        if is_integer(r2) then 
            num2 := r2; 
            den2 := 1; 
        else 
            num2 := r2.num; 
            den2 := r2.den; 
        end if;
        n1 := num * den2 + num2 * den;
        n2 := den * den2;
        new_rational := rational(n1, n2); 
        return new_rational.simplify();
    end; 
    
    -- subtraction routine for fractions, and for fraction - integer
    procedure self - r2;    
        if is_integer(r2) then 
            num2 := r2; 
            den2 := 1; 
        else 
            num2 := r2.num; 
            den2 := r2.den; 
        end if;
        n1 := num * den2 - num2 * den;
        n2 := den * den2;
        new_rational := rational(n1, n2); 
        return new_rational.simplify();
    end; 
    
    -- subtraction routine covering the case integer - fraction
    procedure r2 - self;    
        if is_integer(r2) then 
            num2 := r2; 
            den2 := 1; 
        else 
            num2 := r2.num; 
            den2 := r2.den; 
        end if;
        n1 := num2 * den - num * den2;
        n2 := den * den2;
        new_rational := rational(n1, n2); 
        return new_rational.simplify();
    end; 
    
    -- multiplication routine for fractions, and for fraction * integer
    procedure self * r2;  
        if is_integer(r2) then 
            num2 := r2; 
            den2 := 1; 
        else 
            num2 := r2.num; 
            den2 := r2.den; 
        end if;
        n1 := num * num2;               -- we simply multiply the numerators and the denominators separately
        n2 := den * den2;
        new_rational := rational(n1, n2); 
        return new_rational.simplify();
    end; 
    
    -- multiplication  routine covering the case integer * fraction
    procedure r2 * self;  
        if is_integer(r2) then 
            num2 := r2; 
            den2 := 1; 
        else 
            num2 := r2.num; 
            den2 := r2.den; 
        end if;
        n1 := num * num2;               -- we simply multiply the numerators and the denominators separately
        n2 := den * den2;
        new_rational := rational(n1, n2); 
        return new_rational.simplify();
    end; 
    
    -- division  routine
    procedure self / r2; 
        if is_integer(r2) then 
            num2 := r2; 
            den2 := 1; 
        else
            num2 := r2.num; 
            den2 := r2.den;
        end if;
        n1 := den2 * num;     -- we simply invert and then multiply the numerators and the denominators separately
        n2 := num2 * den;
        new_rational := rational(n1, n2); 
        return new_rational.simplify();
    end; 

    -- division  routine covering the case integer / fraction
    procedure r2 / self;        
        if is_integer(r2) then 
            num2 := r2; 
            den2 := 1; 
        else 
            num2 := r2.num; 
            den2 := r2.den; 
        end if;
        n1 := den * num2;       -- we simply invert and then multiply the numerators and the denominators separately
        n2 := num * den2;
        new_rational := rational(n1, n2); 
        return new_rational.simplify();
    end; 

    -- integer power routine
    procedure self ** n;        
        n1 := num ** n;     -- we simply take corrresponding powers of the numerator and the denominator
        n2 := den ** n;    
        new_rational := rational(n1, n2); 
        return new_rational;
    end; 
    
    procedure self < r2;       -- rational comparison
        if is_integer(r2) then 
            num2 := r2; 
            den2 := 1; 
        else 
            num2 := r2.num; 
            den2 := r2.den; 
        end if;
        return num * den2 < num2 * den;
    end; 
        
    -- rational comparison covering the case integer < fraction
    procedure r2 < self;
        if is_integer(r2) then 
            num2 := r2; 
            den2 := 1; 
        else 
            num2 := r2.num; 
            den2 := r2.den; 
        end if;
        return num2 * den < num * den2;
    end; 
         
    -- ceiling of rational
    procedure ceil();       
       quot := num / den; 
       return if num <= quot * den then 
                 quot 
              else 
                 quot + 1 
              end if;
    end ceil;
         
    -- floor of rational
    procedure floor();      
       quot := num / den; 
       return if num >= quot * den then 
                  quot 
              else 
                  quot - 1 
              end if;
    end floor;

    -- reduces a fraction to lowest terms
    procedure simplify();       
        if den = 0 then
            abort("RATIONAL ARITHMETIC ERROR: division by zero " + str(num) + "/" + str(den)); 
        end if;
        comden := gcd(num, den);     -- find common denominator
        if (den := den / comden) < 0 then 
            num := -num / comden; 
            den := -den;  
        else 
            num := num / comden; 
        end if;
        return self;
    end simplify;

    -- creates common denominator by Euclid's algorithm
    procedure gcd(n1, n2);   
        m1 := abs(n1); 
        m2 := abs(n2);
        if m1 < m2 then 
            [m1, m2] := [m2, m1]; 
        end if;
        while m2 /= 0 loop
            m1 := m1 mod m2; 
            [m1, m2] := [m2, m1];
        end loop;
        return m1;
    end gcd;
end rational;

-- test of rational class
program main;
    use rational;
        
    two_thirds := rational(2,3); 
    print(two_thirds - two_thirds = rational(0,1));    -- test object equality routine 
    
    print(y := two_thirds ** 4,"\n",two_thirds ** 1000);
    
    print("\n",y + (one_half := rational(1,1)/2)," ",(y/two_thirds - one_half) * one_half);
                    
    print("\n",fraction_set := {two_thirds ** n: n in [0,10]}," ", +/fraction_set);
                    
    print("\n",two_thirds.ceil()," ",two_thirds.floor());
    print("\n",minus_1_third := two_thirds - 1); 
    print("\n",minus_1_third.ceil()," ",minus_1_third.floor()); 
                    
    print("\n",two_thirds > (xx := rational(65,100))," ",two_thirds <= xx);

end main;

