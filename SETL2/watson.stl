program main;
    -- Austin, Brian, or Colin is guilty.
    f1 := [ [ "a", "+", "b" ], "+", "c" ];

    -- If Austin is guilty, he has exactly one accomplice.
    f2 := [ "a", "->", [ "b", "+", "c" ] ];          -- at least one accomplice
    f3 := [ "a", "->", [ "-", [ "b", "*", "c" ] ] ]; -- at most one accomplice

    -- If Brian is innocent, then Colin is innocent, too.
    f4 := [ [ "-", "b" ], "->", [ "-", "c" ] ]; 

    -- If exactly two are huilty, then Colin is one of them.
    f5 := [ "-", [ [ "a", "*", "b" ], "*", [ "-", "c" ] ] ]; 

    -- If Colin is innocent, then Austin is guilty.
    f6 := [ [ "-", "c" ], "->", "a"  ];

    FS := { f1, f2, f3, f4, f5, f6 };

    A  := { "a", "b", "c" };
    P  := pow A;
    print("P = ", P);
    -- B is the set of all propositional valuations.
    B  := { createValuation(M, A) : M in P };
    S  := { I in B | forall f in FS | eval(f, I) };
    print("\nSet of all valuations satisfying all facts:", S);
    if #S = 1 then
        I := arb S;
        Taeter := { x in A | I(x) };
        print("\nSet of culprits: ", Taeter);
    end if;

    -- This procedure turns a subset M of A into a propositional valuation I,
    -- such that I(x) is true iff x is an element of M.
    procedure createValuation(M, A);
        return { [ x, x in M ] : x in A };
    end createValuation;

    procedure eval(f, I);
        case
            when f  = 1       =>  return TRUE;
            when f  = 0       =>  return FALSE;
            when is_string(f) =>  return I(f);
            when f(1) = "-"   =>  return not eval(f(2), I);
            when f(2) = "*"   =>  return eval(f(1), I) and  eval(f(3), I);
            when f(2) = "+"   =>  return eval(f(1), I) or   eval(f(3), I);
            when f(2) = "->"  =>  return not eval(f(1), I) or eval(f(3), I);
            when f(2) = "<->" =>  return eval(f(1), I) = eval(f(3), I);
            otherwise => print("eval: syntax error: ", f);
        end case;
    end eval;
end main;
