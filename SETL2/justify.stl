program main;

    test_it("test_file");
    
    -- make concordance for specified file
    procedure test_it(file_name);    
        file_handle   := open(file_name, "TEXT-IN");    -- open file  for reading
        allLines       := [];       
        loop  
            geta(file_handle, line);               -- read line of raw input,as explained in section XXX
            if line = om then
                exit;
            end if;
            allLines := allLines + [ line ];
        end loop;
        justify( allLines, 10, 90 );
    end test_it;


procedure justify(tuple_of_lines,left_margin,right_margin);        -- line justification  procedure
    tuple_of_words := [] +/ [breakWords(line): line in tuple_of_lines];    -- all the words in the lines
    until is_last loop        -- iterate over all sections
        -- breakNextLine breaks off and returns the tuple of
        -- words to be placed on the next line.
        line_words := breakNextLine(tuple_of_words,right_margin - left_margin + 1);
        is_last := (tuple_of_words = []);
        if is_last then                         -- Output last line with no justification.
            print(((left_margin - 1) * " ") +/ [word + " ": word in line_words]);
        else                                      -- Print justified line.
            -- Calculate vector of extra spaces
            spaces := put_spaces(#line_words, right_margin - ((left_margin-1) +/ [#word + 1 : word in line_words]));
            print((left_margin-1) * " " + line_words(1) +/ 
                        [(nspace + 1) * " " + line_words(i + 1): nspace = spaces(i)]);
        end if;
    end loop;
end justify;

procedure breakWords(line);            -- Breaks line at blanks and returns a tuple of words.
    tup := [];                        -- Initialize tuple of words to be collected
    while line /= "" loop            -- now collect
        word := span(line," \t");        -- remove whitespace        
        if word = "" then 
            word := break(line," \t"); 
        end if;  
        if word(1) notin " \t" then 
            tup := tup + [ word ]; 
        end if; 
    end loop;
    return tup;        -- return the list of words collected
end breakWords;

-- This procedure breaks off and returns the longest sequence of words that will fit
-- into nchars character positions; this sequence is broken off from tuple_of_words.
procedure breakNextLine(rw tuple_of_words, nchars);
    sum := 0;
    for word = tuple_of_words(i) loop
        if (sum +:= #word + 1) > nchars then        -- Too far, back up one word.
            save := tuple_of_words(1 .. i - 1);
            tuple_of_words := tuple_of_words(i..);
            return save;
        end if;
    end loop;
    -- Else this is last line; blank tuple_of_words and return all words
    save := tuple_of_words; tuple_of_words := [];
    return save;
end breakNextLine;

-- This procedure finds the positions where n blanks are to be placed between
-- k words. The blanks are placed evenly.
procedure put_spaces(between_kwords, nblanks);
    space_count := (size := (between_kwords - 1)) * [ 0 ];
    for j in [1 .. nblanks] loop
        space_count((j mod size) + 1) +:= 1;      -- Place a blank.
    end loop;
    return space_count;
end put_spaces;

end main;