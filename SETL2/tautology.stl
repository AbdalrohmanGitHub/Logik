program main;
    print("Enter formula: ");
    get(s);
    l := scanFormula(s);
    f := parse_formula(l);
    print(f);
    check := tautology(f);
    if check = true then
        print("The formula \"" + prettyPrint(f) + "\" is a tautology.");
    else
        print("The formula \"" + prettyPrint(f) + "\" isn't a tautology.");
        print("Counter example: ", check );
    end if;

    -- Test, ob Formel f eine Tautologie ist.  Falls f keine Tautologie
    -- ist, dann wird eine Belegung I zurück gegeben, so dass eval(f, I)
    -- den Wert false ergibt.
    procedure tautology(f);
        P := collectVars(f);
        -- A is the set of all propositional valuations.
        A := { { [x, x in M] : x in P } : M in pow P };
        if forall I in A | eval(f, I) then
            return true;
        else
            return arb { I in A | not eval(f, I) };
        end if;
    end tautology;

    -- This function collects all propositional variables occurring in 
    -- the propositional formula f.
    procedure collectVars(f);
        case
            when f = 1        =>  return {};
            when f = 0        =>  return {};
            when is_string(f) =>  return { f };
            when f(1) = "-"   =>  return collectVars( f(2) );
            when f(2) in { "*", "+", "->", "<->" } 
                 => return collectVars( f(1) ) + collectVars( f(3) );
            otherwise => print("malformed formula: ", f);
        end case;
    end collectVars;

    -- Die Prozedur eval(f, I) wertet die aussagen-logische Formel f unter
    -- der aussagen-logischen Interpretation I aus.
    procedure eval(f, I);
        case
            when f  = 1       =>  return TRUE;
            when f  = 0       =>  return FALSE;
            when is_string(f) =>  return I(f);
            when f(1) = "-"   =>  return not eval(f(2), I);
            when f(2) = "*"   =>  return eval(f(1), I) and  eval(f(3), I);
            when f(2) = "+"   =>  return eval(f(1), I) or   eval(f(3), I);
            when f(2) = "->"  =>  return not eval(f(1), I) or eval(f(3), I);
            when f(2) = "<->" =>  return eval(f(1), I) = eval(f(3), I);
            otherwise => print("eval: Syntax-Fehler: ", f);
        end case;
    end eval;

    -- Druckt die Formel f am Bildschirm aus.
    procedure prettyPrint(f);
        case
            when f = 1        =>  return "1";
            when f = 0        =>  return "0";
            when is_string(f) =>  return f;
            when f(1) = "-"   =>  return "-" + prettyPrint( f(2) );
            when f(2) = "*"   =>  return "(" + prettyPrint( f(1) ) + " * "   + prettyPrint( f(3) ) + ")";
            when f(2) = "+"   =>  return "(" + prettyPrint( f(1) ) + " + "   + prettyPrint( f(3) ) + ")";
            when f(2) = "->"  =>  return "(" + prettyPrint( f(1) ) + " -> "  + prettyPrint( f(3) ) + ")";
            when f(2) = "<->" =>  return "(" + prettyPrint( f(1) ) + " <-> " + prettyPrint( f(3) ) + ")";
            otherwise => abort("Error in prettyPrint: " + str(f));
        end case;
    end prettyPrint;

    -- Liest einen String und scannt den String.  Es wird eine Liste von Token
    -- zurück gegeben.
    procedure scanFormula(s);
        letters := {};
        -- collect all letters and digits
        for x in { 48 .. 57 } + { 65 .. 90 } + { 97 .. 122 } loop
            letters := letters + { char(x) };
        end loop;
        case 
            when s = ""                      => return [];
            when s(1) = "("                  => return [ "(" ] + scanFormula( s(2..) );
            when s(1) = ")"                  => return [ ")" ] + scanFormula( s(2..) );
            when s(1) = "+"                  => return [ "+" ] + scanFormula( s(2..) );
            when s(1) = "*"                  => return [ "*" ] + scanFormula( s(2..) );
            when #s >= 2 and s(1..2) = "->"  => return [ "->" ] + scanFormula( s(3..) );
            when #s >= 3 and s(1..3) = "<->" => return [ "<->" ] + scanFormula( s(4..) );
            when s(1) = "-"                  => return [ "-" ] + scanFormula( s(2..) );
            when s(1) = " " or s(1) = "    " => return scanFormula( s(2..) );
        end case;
        index := 1;
        word  := "";
        if s(index) notin letters then
            abort("Error in scanFormula(" + s + ")");
        end if;
        while s(index) in letters and index < #s loop
            index := index + 1;
        end loop;
        if not s(index) in letters then
            return [ s(1 .. index - 1) ] + scanFormula( s(index ..) );
        end if;
        if index = #s then
            return [ s ];
        end if;
        print( "Error in scanFormula: s = ", s );
    end scanFormula;

    -- Interpretiert eine Liste L von Tokens als Formel und gibt die gefundene 
    -- Formel zurück.  Es wird ein Backtracking-Algorithmus verwendet.
    procedure parse_formula(L);
        f := parse_parentheses(L);
        if f /= om then
            return f;
        end if;
        -- Nun wird nach einem binären Operator gesucht.  Die Reihenfolge, in der
        -- gesucht wird, richtet sich nach der Bindungsstärke der Operatoren 
        f := parse_equivalence(L);
        if f /= om then
            return f;
        end if;
        f := parse_implication(L);
        if f /= om then
            return f;
        end if;
        f := parse_disjunction(L);
        if f /= om then
            return f;
        end if;
        f := parse_conjunction(L);
        if f /= om then
            return f;
        end if;
        f := parse_negation(L);
        if f /= om then
            return f;
        end if;
        f := parse_atom(L);
        if f /= om then
            return f;
        end if;
    end parse_formula;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine geklammerte Formel
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_parentheses(L);
        if L(1) = "(" and L(#L) = ")" then
            return parse_formula( l(2 .. #L - 1) );
        end if;
    end parse_parentheses;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       f1 <-> f2
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_equivalence(L);
        for i in [ 2 .. #L - 1 ] loop
            if L(i) = "<->" then
                f1 := parse_formula( L(1 .. i - 1) );
                if f1 /= om then
                    f2 := parse_formula( L(i + 1 .. #L) );
                    if f2 /= om then
                        return [ f1, "<->", f2 ];
                    end if;
                end if;
            end if;
        end loop;
    end parse_equivalence;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       f1 -> f2
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_implication(L);
        for i in [ 2 .. #L - 1 ] loop
            if L(i) = "->" then
                f1 := parse_formula( L(1 .. i - 1) );
                if f1 /= om then
                    f2 := parse_formula( L(i + 1 .. #L) );
                    if f2 /= om then
                        return [ f1, "->", f2 ];
                    end if;
                end if;
            end if;
        end loop;
    end parse_implication;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       f1 + f2
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_disjunction(L);
        for i in [ 2 .. #L - 1 ] loop
            if L(i) = "+" then
                f1 := parse_formula( L(1 .. i - 1) );
                if f1 /= om then
                    f2 := parse_formula( L(i + 1 .. #L) );
                    if f2 /= om then
                        return [ f1, "+", f2 ];
                    end if;
                end if;
            end if;
        end loop;
    end parse_disjunction;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       f1 * f2
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_conjunction(L);
        for i in [ 2 .. #L - 1 ] loop
            if L(i) = "*" then
                f1 := parse_formula( L(1 .. i - 1) );
                if f1 /= om then
                    f2 := parse_formula( L(i + 1 .. #L) );
                    if f2 /= om then
                        return [ f1, "*", f2 ];
                    end if;
                end if;
            end if;
        end loop;
    end parse_conjunction;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       - f1
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_negation(L);
        if L(1) = "-" then
            f := parse_formula( L(2 .. #L) );
            if f /= om then
                return [ "-", f ];
            end if;
        end if;
    end parse_negation;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine atomare Formel 
    --       p
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_atom(L);
        if #L = 1 then
            if L(1) = "1" then
                return 1;
            elseif L(1) = "0" then
                return 0;
            elseif is_string(L(1)) then
                return L(1);
            end if;
        end if;
    end parse_atom;

end main;
