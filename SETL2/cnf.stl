program main;
    var mTokenList; -- list of all tokens 
    var mIndex;     -- index to the next token

    -- s := "(p + q -> r) * r * -p -> q";
    -- s := "(k * q -> g) * (k * -q -> h) -> k -> g + h";
    s := "(p -> q) * (q -> r) -> p -> r";
    -- s := "p + (p * q) <-> p + -r";
    f := parse(s);
    print(f);
    n := normalize(f);
    print(n);
    print( pretty_print_cnf(n) );

    -- This procedure transforms  f into conjunctive normal form.
    procedure normalize(f);
        n1 := elimIff(f);
        n2 := elimImp(n1);
        n3 := nnf(n2);
        n4 := cnf(n3);
        return simplify(n4);
--        return n4;
    end normalize;

    -- Eliminiert den Operator "gdw" aus der eingegebenen Formel f.
    procedure elimIff(f);
        case
            when f = 1        => return 1;
            when f = 0        => return 0;
            when is_string(f) => return f;
            when f(1) = "-"   => return [ "-", elimIff( f(2) ) ];
            when f(2) in { "*", "+", "->" } 
                              => return [ elimIff( f(1) ), f(2), elimIff( f(3) ) ];
            when f(2) = "<->" => return elimIff( [ [ f(1), "->", f(3) ], "*", [ f(3), "->", f(1) ] ] );
            otherwise         => print("error in elimIff( ", f, ")" );
        end case;
    end elimIff;

    -- Eliminiert den Operator "->" aus der eingegebenen Formel f.
    -- Es wird vorausgesetzt, dass der Operator "<->" bereits vorher 
    -- eliminiert wurde.
    procedure elimImp(f);
        case
            when f = 1        =>  return 1;
            when f = 0        =>  return 0;
            when is_string(f) =>  return f;
            when f(1) = "-"   =>  return [ "-", elimImp(f(2)) ];
            when f(2) in { "*", "+" } 
                              =>  return [ elimImp(f(1)), f(2), elimImp(f(3)) ];
            when f(2) = "->"  =>  return elimImp( [ [ "-", f(1) ], "+", f(3) ] );
            otherwise         =>  print("error in elimImp( ", f, ")" );
        end case;
    end elimImp;

    -- Berechnet die Negations-Normalform der Formel f.
    procedure nnf(f);
        case
            when f = 1        =>  return 1;
            when f = 0        =>  return 0;
            when is_string(f) =>  return f;
            when f(1) = "-"   =>  return neg( f(2) );
            when f(2) in { "*", "+" }
                              =>  return [ nnf( f(1) ), f(2), nnf( f(3) ) ];
            otherwise         =>  print("error in nnf( ", f, ")" );
        end case;
    end nnf;

    -- Diese Funktion berechnet die Negations-Normalform von (-f) und schiebt dabei
    -- das Negationszeichen soweit wie mˆglich nach innen.
    procedure neg(f);
        case
            when f = 1        => return 0;
            when f = 0        => return 1;
            when is_string(f) => return [ "-", f ];
            when f(1) = "-"   => return nnf( f(2) );
            when f(2) = "*"   => return [ neg( f(1) ), "+", neg( f(3) ) ];
            when f(2) = "+"   => return [ neg( f(1) ), "*", neg( f(3) ) ];
            otherwise  => print("error in neg( ", f, ")" );
        end case;
    end neg;

    -- Diese Funktion berechnet die CNF von f durch Ausmultiplizieren.
    -- Die CNF wird als Menge von Mengen dargestellt.  Es wird vorausgesetzt,
    -- dass die Funktion f bereits in Negations-Normalform ist.
    procedure cnf(f);
        case
            when f = 1        =>  return { };
            when f = 0        =>  return { {} };
            when is_string(f) =>  return { { f } };
            when f(1) = "-"   =>  return { { f } };
            when f(2) = "*"   =>  return cnf( f(1) ) + cnf( f(3) );
            when f(2) = "+"   =>  return { k1 + k2 : k1 in cnf(f(1)), k2 in cnf(f(3)) };
            otherwise  => print("error in cnf( ", f, ")" );
        end case;
    end cnf;

    -- Die Prozedur simplify(K) eliminiert triviale Klauseln aus der CNF K.
    procedure simplify(K);
        return { C in K | not isTrivial(C) };
    end simplify;
    
    -- Die Prozedur isTrivial(C) testet ob die Klausel C trivial ist.
    procedure isTrivial(C);
        return { p in C | is_string(p) } * { p(2) : p in C | p(1) = "-" } /= {} or 1 in C;
    end isTrivial;

    -- Wandelt die Formel f in einen String um.  Es wird angenommen, dass
    -- f in konjunktiver Normalform vorliegt.
    procedure pretty_print_cnf(f);
        if f = {} then
            return "1";
        end if;
        if #f = 1 then
            return "(" + pretty_print_disjunction(arb f) + ")";
        end if;
        k from f;
        s1 := pretty_print_disjunction(k);
        s2 := pretty_print_cnf(f);
        return "(" + s1 + ") * " + s2;
    end pretty_print_cnf;

    -- Wandelt die Formel d in einen String um.  Es wird angenommen, dass
    -- d eine Disjunktion darstellt.
    procedure pretty_print_disjunction(d);
        if d = {} then
            return "0";
        end if;
        if #d = 1 then
            return prettyPrint(arb d);
        end if;
        l from d;
        s1 := prettyPrint(l);
        s2 := pretty_print_disjunction(d);
        return s1 + " + " + s2;
    end pretty_print_disjunction;

    -- Wandelt die Formel f in einen String um.
    procedure prettyPrint(f);
        case
            when f = 1        =>  return "1";
            when f = 0        =>  return "0";
            when is_string(f) =>  return f;
            when f(1) = "-"   =>  return "-" + prettyPrint( f(2) );
            when f(2) = "*"   =>  return "(" + prettyPrint( f(1) ) + " * " + prettyPrint( f(3) ) + ")";
            when f(2) = "+"   =>  return "(" + prettyPrint( f(1) ) + " + " + prettyPrint( f(3) ) + ")";
            when f(2) = "->"  =>  return "(" + prettyPrint( f(1) ) + " -> "  + prettyPrint( f(3) ) + ")";
            when f(2) = "<->" =>  return "(" + prettyPrint( f(1) ) + " <-> " + prettyPrint( f(3) ) + ")";
            otherwise => abort("Error in prettyPrint: " + str(f));
        end case;
    end prettyPrint;

    -- This procedure parses the given string s and transforms it into a formula.
    procedure parse(s);
        mTokenList := scanFormula(s);
        mIndex     := 1;
        result     := parseFormula();
        return result;
    end parse;

    -- Diese Prozedur parst eine aussagenlogische Formel gem‰ﬂ der folgenden
    -- Grammatik:
    --
    --        formula         : implication "<->" implication
    --                        | implication
    --                        ;
    --
    --        implication     : conjunction "->" implication
    --                        | conjunction
    --                        ;
    --
    --        conjunction     : disjunction conjunctionRest;
    --                    
    --        conjunctionRest : "*" disjunction conjunctionRest
    --                        | /* epsilon */
    --                        ;
    --
    --        disjunction     : negation disjunctionRest;
    --
    --        disjunctionRest : "+" negation disjunctionRest
    --                        | /* epsilon */
    --                        ;
    --
    --        negation        : "-" negation
    --                        | atomic
    --                        ;
    -- 
    --        atomic          : "(" formula ")"
    --                        | IDENTIFIER
    --                        ;
    procedure parseFormula();
        implicationLhs := parseImplication();
        if mIndex <= #mTokenList and mTokenList(mIndex) /= ")" then
            check("<->");
            implicationRhs := parseImplication();
            return [ implicationLhs, "<->", implicationRhs ];
        else
            return implicationLhs;    
        end if;
    end parseFormula;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --
    --        implication     : conjunction "->" implication
    --                        | conjunction
    --                        ; 
    procedure parseImplication();
        conjunction := parseConjunction();
        if mIndex <= #mTokenList and mTokenList(mIndex) notin { "<->", ")" } then
            check("->");
            implication := parseImplication();
            return [ conjunction, "->", implication ];
        else
            return conjunction;
        end if;
    end parseImplication;

    -- Diese Prozedur implementiert die folgende Grammatik-Regel:
    --
    --        conjunction     : disjunction conjunctionRest;
    --
    procedure parseConjunction();
        disjunction := parseDisjunction();
        return parseConjunctionRest(disjunction);
    end parseConjunction;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --                    
    --        conjunctionRest : "*" disjunction conjunctionRest
    --                        | /* epsilon */
    --                        ;
    procedure parseConjunctionRest(formula);
        if check("*") then
            disjunction := parseDisjunction();
            return parseConjunctionRest([ formula, "*", disjunction ]);
        end if;
        return formula;
    end parseConjunctionRest;

    -- Diese Prozedur implementiert die folgende Grammatik-Regel:
    --
    --        disjunction     : negation disjunctionRest;
    --
    procedure parseDisjunction();
        negation := parseNegation();
        return parseDisjunctionRest(negation);
    end parseDisjunction;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --
    --        disjunctionRest : "+" negation disjunctionRest
    --                        | /* epsilon */
    --                        ;
    procedure parseDisjunctionRest(formula);
        if check("+") then
            negation := parseNegation();
            return parseDisjunctionRest([ formula, "+", negation]);
        end if;
        return formula;
    end parseDisjunctionRest;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --
    --        negation        : "-" negation
    --                        | atomic
    --                        ;
    procedure parseNegation();
        if check("-") then
            negation := parseNegation();
            return [ "-", negation ];            
        end if;
        return parseAtomic();
    end parseNegation;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --
    --        atomic          : "(" formula ")"
    --                        | IDENTIFIER
    --                        ;
    procedure parseAtomic();
        if check("(") then
            formula := parseFormula();
            if not check(")") then
                abort("Parse Error, ')' expected");
            end if;
            return formula; 
        end if;
        if is_string(mTokenList(mIndex)) then
            result := mTokenList(mIndex);
            mIndex := mIndex + 1;
            return result;
        end if;
        abort("Parse Error in parseFactor,");
    end parseAtomic;

    -- ‹berpr¸fe, ob als n‰chstes token in der Eingabe steht.
    procedure check(token);
        -- no tokens left
        if mIndex > #mTokenList then
            return false;
        end if;
        if mTokenList(mIndex) = token then
            mIndex := mIndex + 1;
            return true;
        end if;
        return false;
    end check;

    -- Liest einen String und scannt den String.  Es wird eine Liste von Token
    -- zur¸ck gegeben.
    procedure scanFormula(s);
        letters := {};
        -- collect all letters and digits
        for x in { 48 .. 57 } + { 65 .. 90 } + { 97 .. 122 } loop
            letters := letters + { char(x) };
        end loop;
        case 
            when s = ""                      => return [];
            when s(1) = "("                  => return [ "(" ] + scanFormula( s(2..) );
            when s(1) = ")"                  => return [ ")" ] + scanFormula( s(2..) );
            when s(1) = "+"                  => return [ "+" ] + scanFormula( s(2..) );
            when s(1) = "*"                  => return [ "*" ] + scanFormula( s(2..) );
            when #s >= 2 and s(1..2) = "->"  => return [ "->" ] + scanFormula( s(3..) );
            when #s >= 3 and s(1..3) = "<->" => return [ "<->" ] + scanFormula( s(4..) );
            when s(1) = "-"                  => return [ "-" ] + scanFormula( s(2..) );
            when s(1) = " " or s(1) = "    " => return scanFormula( s(2..) );
        end case;
        index := 1;
        word  := "";
        if s(index) notin letters then
            abort("Error in scanFormula(" + s + ")");
        end if;
        while s(index) in letters and index < #s loop
            index := index + 1;
        end loop;
        if not s(index) in letters then
            return [ s(1 .. index - 1) ] + scanFormula( s(index ..) );
        end if;
        if index = #s then
            return [ s ];
        end if;
        print( "Error in scanFormula: s = ", s );
    end scanFormula;


end main;
