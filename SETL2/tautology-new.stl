program main;
    print("Bitte Formel eingeben");
    get(s);
    l := scanFormula(s);
    f := parse_formula(l);
    print(f);
    check := tautology(f);
    if check(1) then
        print("Die Formel \"" + prettyPrint(f) + "\" ist eine Tautologie.");
    else
        print("Die Formel \"" + prettyPrint(f) + "\" ist keine Tautologie.");
        print("Gegenbeispiel: ", check(2) );
        print( evaluate(f, check(2)) );
    end if;

    -- Auswertung der aussagen-logischen Formel f mit Hilfe der Belegung I
    procedure evaluate(f, I);
        case
            when f = "true"   =>  return TRUE;
            when f = "false"  =>  return FALSE;
            when #f = 1       =>  return I(f(1));
            when #f = 2 and f(1) = "nicht" =>  return not evaluate(f(2), I);
            when #f = 3 and f(1) = "und"   =>  return evaluate(f(2), I) and  evaluate(f(3), I);
            when #f = 3 and f(1) = "oder"  =>  return evaluate(f(2), I) or   evaluate(f(3), I);
            when #f = 3 and f(1) = "folgt" =>  return not evaluate(f(2), I) or evaluate(f(3), I);
            when #f = 3 and f(1) = "gdw"   =>
                return (not evaluate(f(2), I) or evaluate(f(3), I)) and (evaluate(f(2), I) or not evaluate(f(3), I));
            otherwise => abort("Error in evaluate: " + str(f));
        end case;
    end evaluate;

    -- Diese Funktion sammelt alle Variablen in f auf.
    procedure collectVars(f);
        case
            when f = "true"   =>  return {};
            when f = "false"  =>  return {};
            when #f = 1       =>  return { f(1) };
            when #f = 2 and f(1) = "nicht" =>  return collectVars( f(2) );
            when #f = 3 and f(1) = "und"   =>  return collectVars( f(2) ) + collectVars( f(3) );
            when #f = 3 and f(1) = "oder"  =>  return collectVars( f(2) ) + collectVars( f(3) );
            when #f = 3 and f(1) = "folgt" =>  return collectVars( f(2) ) + collectVars( f(3) );
            when #f = 3 and f(1) = "gdw"   =>  return collectVars( f(2) ) + collectVars( f(3) );
            otherwise => abort("Error in collectVars: " + str(f));
        end case;
    end collectVars;

    -- Test, ob Formel f eine Tautologie ist.
    procedure tautology(f);
        V := collectVars(f);
        A := { { [x, x in M] : x in V } : M in pow V };
        result := exists S in A | not evaluate(f, S);
        if result then
            return [ FALSE, S ];
        else
            return [ TRUE ];
        end if;
    end tautology;

    -- Berechnet alle möglichen Belegungen zur der gegebenen Menge P
    -- von aussagen-logischen Variablen. 
    procedure allValuations(P);
        if P = {} then
            return { {} };
        end if;
        x from P;
        A := allValuations(P);
        return { { [ x, true  ] } + I : I in A } + 
               { { [ x, false ] } + I : I in A };
    end allValuations;

    -- Druckt die Formel f am Bildschirm aus.
    procedure prettyPrint(f);
        case
            when f = "true"                =>  return "1";
            when f = "false"               =>  return "0";
            when #f = 1                    =>  return f(1);
            when #f = 2 and f(1) = "nicht" =>  return "-" + prettyPrint( f(2) );
            when #f = 3 and f(1) = "und"   =>  return "(" + prettyPrint( f(2) ) + " * "   + prettyPrint( f(3) ) + ")";
            when #f = 3 and f(1) = "oder"  =>  return "(" + prettyPrint( f(2) ) + " + "   + prettyPrint( f(3) ) + ")";
            when #f = 3 and f(1) = "folgt" =>  return "(" + prettyPrint( f(2) ) + " -> "  + prettyPrint( f(3) ) + ")";
            when #f = 3 and f(1) = "gdw"   =>  return "(" + prettyPrint( f(2) ) + " <-> " + prettyPrint( f(3) ) + ")";
            otherwise => abort("Error in prettyPrint: " + str(f));
        end case;
    end prettyPrint;

    -- Liest einen String und scannt den String.  Es wird eine Liste von Token
    -- zurück gegeben.
    procedure scanFormula(s);
        letters := {};
        -- collect all letters and digits
        for x in { 48 .. 57 } + { 65 .. 90 } + { 97 .. 122 } loop
            letters := letters + { char(x) };
        end loop;
        case 
            when s = ""                      => return [];
            when s(1) = "("                  => return [ "(" ] + scanFormula( s(2..) );
            when s(1) = ")"                  => return [ ")" ] + scanFormula( s(2..) );
            when s(1) = "+"                  => return [ "oder" ] + scanFormula( s(2..) );
            when s(1) = "*"                  => return [ "und" ] + scanFormula( s(2..) );
            when #s >= 2 and s(1..2) = "->"  => return [ "folgt" ] + scanFormula( s(3..) );
            when #s >= 3 and s(1..3) = "<->" => return [ "gdw" ] + scanFormula( s(4..) );
            when s(1) = "-"                  => return [ "nicht" ] + scanFormula( s(2..) );
            when s(1) = " " or s(1) = "    " => return scanFormula( s(2..) );
        end case;
        index := 1;
        word  := "";
        if s(index) notin letters then
            abort("Error in scanFormula(" + s + ")");
        end if;
        while s(index) in letters and index < #s loop
            index := index + 1;
        end loop;
        if not s(index) in letters then
            return [ s(1 .. index - 1) ] + scanFormula( s(index ..) );
        end if;
        if index = #s then
            return [ s ];
        end if;
        print( "Error in scanFormula: s = ", s );
    end scanFormula;

    -- Zerlegt eine Liste l von Tokens als Formel und gibt diese zurück.
    -- Es wird ein Backtracking-Algorithmus verwendet.
    procedure parse_formula(l);
        if l(1) = "(" and l(#l) = ")" then
            f := parse_formula( l(2 .. #l - 1) );
            if f /= om then
                return f;
            end if;
        end if;
        for i in [ 2 .. #l - 1 ] loop
            if l(i) = "gdw" then
                f1 := parse_formula( l(1 .. i - 1) );
                f2 := parse_formula( l(i + 1 .. #l) );
                if f1 /= om and f2 /= om then
                    return [ "gdw", f1, f2 ];
                end if;
            end if;
            if l(i) = "folgt" then
                f1 := parse_formula( l(1 .. i - 1) );
                f2 := parse_formula( l(i + 1 .. #l) );
                if f1 /= om and f2 /= om then
                    return [ "folgt", f1, f2 ];
                end if;
            end if;
            if l(i) = "und" then
                f1 := parse_formula( l(1 .. i - 1) );
                f2 := parse_formula( l(i + 1 .. #l) );
                if f1 /= om and f2 /= om then
                    return [ "und", f1, f2 ];
                end if;
            end if;
            if l(i) = "oder" then
                f1 := parse_formula( l(1 .. i - 1) );
                f2 := parse_formula( l(i + 1 .. #l) );
                if f1 /= om and f2 /= om then
                    return [ "oder", f1, f2 ];
                end if;
            end if;
        end loop;
        if l(1) = "nicht" then
            f := parse_formula( l(2 ..) );
            if f /= om then
                return [ "nicht", f ];
            end if;
        end if;
        if #l = 1 then
            return l;
        end if;
    end parse_formula;

end main;
