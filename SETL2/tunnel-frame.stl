-- Vier Personen, Anton, Bruno, Charly und Daniel müssen eine Tunnel durchqueren.  Der Tunnel
-- ist so eng, dass immer nur zwei Personen gleichzeitig hindurch können.  Außerdem braucht
-- man zum Durchqueren eine Taschen-Lampe.  Die vier haben aber zusammen nur eine
-- Taschen-Lampe.  Die Zeiten, die Anton, Bruno, Charly und Daniel zum Durchqueren benötigen
-- sind 1 Minute, 2 Minuten, 4 Minuten und 5 Minuten.  Berechnen Sie einen Plan zum
-- Durchqueren des Tunnels, der die benötigte Zeit minimiert.

program main;
    All := { "Anton", "Bruno", "Charly", "Daniel" };

    -- Dauer ist eine funktionale Relation, die für jede Person die Zeit
    -- angibt, die diese Person benötigt, um durch den Tunnel zu kommen.
    Dauer := { ["Anton", 1], ["Bruno", 2], ["Charly", 4], ["Daniel", 5] };

    -- P ist die Menge aller Punkte.  Wir stellen Punkte durch Paare der Form
    -- [ S, L ] dar.  Dabei ist S die Menge der Personen am Eingang des Tunnels.
    -- L ist 1, wenn die Taschen-Lampe am Eingang ist.  Falls die Taschen-Lampe
    -- sich am Ausgang befindet, ist L 0.
    P := "?";

    for a in P loop
         print(a);
    end loop;            

    -- Die Relation R besteht aus Elementen der Form [ [ x, y ], d ].  Dabei sind
    -- x und y Elemente der Menge P, so dass der Zustand y aus dem Zustand x dadurch hervorgeht,
    -- dass ein oder zwei Personen den Tunnel durchqueren.  Die Zahl d gibt dann
    -- die Zeit an, die dazu benötigt wird.
    R := "?";

    print("\n\n");
    for [[x,y], d] in R loop
            print(x, "   ", y, "  :", d);
    end loop;            

    -- Am Anfang sind alle am Tunnel-Eingang.
    start := "?";
    -- Am Ende sollen alle am Tunnel-Ausgang sein.
    goal  := "?";
    -- Berechne alle Pfade, die zum Ziel führen und aus höchstens 7 Schritten bestehen.
    AllPathes := reachable("?", "?", "?");
    -- Wähle aus der Menge aller Pfade diejenigen Pfade aus, die zum Ziel führen.
    UsefulPathes := "?";
    -- Berechne die minimale Dauer.
    minDauer := "?";
    print("\n\nMinimale Dauer: ", minDauer, "\n");
    -- Wähle einen Pfad mit der minimalen Dauer aus.
    path := "?";

    -- Gebe diesen Pfad Schritt für Schritt aus.
    printPath(path, All);

    -- Die Prozedur pruefeDauer bekommt als erstes Argument die Relation Dauer, die oben 
    -- definiert wurde und die für jede Person angibt, wie lange diese Person benötigt, um 
    -- den Tunnel zu durchqueren. Die Argumente x und y sind Elemente der oben definierten 
    -- Menge P und d ist eine Zeit.  Die Prozedur gibt als Ergebnis true zurück, wenn
    -- der Zustand y aus dem Zustand x dadurch erreicht werden kann, dass eine Gruppe
    -- von Personen den Tunnel durchquert und wenn diese Gruppe dafür die Zeit d benötigt.
    procedure pruefeDauer(Dauer, x, y, d);
    end pruefeDauer;

    -- Die Prozedur endsWith überprüft, ob der letzte Zustand in dem Pfad path
    -- der Zustand goal ist.
    procedure endsWith(path, goal);
        list := path(1);
        return list(#list) = goal;
    end endsWith;    

    -- Druckt den Pfad aus
    procedure printPath(list, All);
        for i in [1 .. #list] loop
            left  := list(i)(1);
            right := All - left;
            print(left, " " * 70, right);
            if i < #list then
                if list(i)(2) = 1 then
                    print(" " * 40, ">>> ", list(i)(1) - list(i+1)(1), " >>>");
                else
                    print(" " * 40, "<<< ", list(i+1)(1) - list(i)(1), " <<<");
                end if;
            end if;
        end loop;
    end printPath;
                
    -- Berechne alle Punkte, die von start aus in höchstens limit Schritten  
    -- erreichbar sind.  R ist eine gewichtete Relation.
    procedure reachable(start, R, limit);
        PathSet := { [ [start], 0 ] }; -- start is reachable from start with a path of length 0
        for i in { 1 .. limit } loop
            PathSet := PathSet + path_product(PathSet, R);
        end loop;
        return PathSet;
    end reachable;


    -- The procedure call path_product(P, Q) computes the path product P * Q.
    procedure path_product(P, Q);
        return { [ add(p,q), l1 + l2 ] : [ p, l1 ] in P, [ q, l2 ] in Q 
                                       | p(#p) = q(1)         and 
                                         not cyclic(add(p,q)) and 
                                         #p + #q <= 8
                                       };
    end path_product;    

    -- The procedure cyclic(p) checks whether the path p is cyclic.
    procedure cyclic(p);
        return #{ x : x in p } < #p;
    end cyclic;

    -- The product call add(p,q) computes the sum of the lists p and q.
    -- The last point of p has to be the first point of q.
    procedure add(p, q);
        return p + q(2..);
    end add;    

end main;

