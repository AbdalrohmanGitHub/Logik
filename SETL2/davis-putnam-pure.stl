program main;

--    M := { {["p"], ["q"], ["s"]}, 
--           {[ "nicht", ["p"]], ["r"], [ "nicht", t]},  
--           {["r"], ["s"]}, 
--           {[ "nicht", ["r"]], ["q"], [ "nicht", ["p"]]},
--           {[ "nicht", ["s"]], ["p"]}, 
--           {[ "nicht", ["p"]], [ "nicht", ["q"]], ["s"], [ "nicht", ["r"]]}, 
--           {["p"], [ "nicht", ["q"]], ["s"]}, 
--           {[ "nicht", ["r"]], [ "nicht", ["s"]]}, 
--           {[ "nicht", ["p"]], [ "nicht", ["s"]]} 
--         };

    M := { {["p"], ["q"]}, 
           {[ "nicht", ["p"]], ["q"]},
           {["p"], [ "nicht", ["q"] ]}, 
           {[ "nicht", ["p"]], [ "nicht", ["q"] ]} 
         };

    r := DavisPutnam(M);
    print(r);    

    -- Input:     S is a set of clauses.
    -- Semantics: Check whether the set S is satisfiable. 
    procedure DavisPutnam( S );
        if S = {} then
            -- The empty set is satisfiable.
            return true;
        end if;
        S  := saturate(S);
        if {} in S then
            -- The empty clause is not satisfiable.
            return false;
        end if;
        l     := selectLiteral( S );
        not_l := negateLiteral( l );
        S1    := resolve(     l, S );
        S2    := resolve( not_l, S );
        -- S is satisfiable if either S + { l } or S + { nl } is satisfiable.
        return DavisPutnam( S1 ) or DavisPutnam( S2 );
    end DavisPutnam;

    -- Input:  S is a set of clauses.
    -- Output: a literal occuring in a clause in S.
    -- The implementation below is trivial because it selects an arbitrary 
    -- element of S.  A more efficient implementation could employ certain
    -- heuristics, for example it could count occurrences of literals and
    -- select the literal with the most occurrences.

    procedure selectLiteral( S );
        k := arb S;
        return arb k;
    end selectLiteral;

    -- Given a set of clauses S, this procedure computes all unit resolvents
    -- of clauses in S.
    procedure saturate(S);
        -- Compute the set of unit clauses first.
        U := { k in S | #k = 1 };
        -- SeenUnits is the set of those unit clauses that have been processed.
        SeenUnits := {};
        while U /= {} loop
            unit := arb U;
            SeenUnits := SeenUnits + { unit };
            -- Compute new clauses via unit resolution.
            S := S + resolve(arb unit, S);
            -- Compute the set of those units that have not been used so far.
            U := { k in S | #k = 1 } - SeenUnits;
        end loop;
        return S;
    end saturate;

    -- Given a unit clause u and a set of clauses S, this procedure
    -- computes all resolvents of u with a clause in S.
    procedure resolve(u, S);
        not_u := negateLiteral(u);
        return { k - { not_u } : k in S | not_u in k };
    end resolve;

    -- This procedure negates the literal l.
    procedure negateLiteral(l);
        if #l = 1 then
            return [ "nicht", l ];
        end if;
        return l(2);
    end negateLiteral;

end main;
