program main;

    s := "(p -> q) * (q -> r) -> (p -> r)";
    -- s := "p + (p * q) <-> p";
    l := scanFormula(s);
    f := parse_formula(l);
    print(f);
    n := normalize(f);
    print( pretty_print_knf(n) );

    -- Diese Prozedur überführt die Formel f in konjunktive Normalform.
    procedure normalize(f);
        n1 := elimGdw(f);
        n2 := elimFolgt(n1);
        n3 := nnf(n2);
        n4 := knf(n3);
        return simplify(n4);
    end normalize;

    -- Eliminiert den Operator "gdw" aus der eingegebenen Formel f.
    procedure elimGdw(f);
        case
            when f = 1 => return 1;
            when f = 0 => return 0;
            when is_string(f) => return f;
            when f(1) = "-" => return [ "-", elimGdw(f(2)) ];
            when f(2) = "*" => return [ elimGdw(f(1)), "*", elimGdw(f(3)) ];
            when f(2) = "+" => return [ elimGdw(f(1)), "+", elimGdw(f(3)) ];
            when f(2) = "->" => return [ elimGdw(f(1)), "->", elimGdw(f(3)) ];
            when f(2) = "<->" => return [ [ elimGdw(f(1)), "->", elimGdw(f(3)) ], "*", [ elimGdw(f(3)), "->", elimGdw(f(1)) ] ];
            otherwise         =>  print("Fehler in elimGdw( ", f, ")" );
        end case;
    end elimGdw;

    -- Eliminiert den Operator "->" aus der eingegebenen Formel f.
    -- Es wird vorausgesetzt, dass der Operator "<->" bereits vorher 
    -- eliminiert wurde.
    procedure elimFolgt(f);
        case
            when f = 1        =>  return 1;
            when f = 0        =>  return 0;
            when is_string(f) =>  return f;
            when f(1) = "-"   =>  return [ "-", elimFolgt(f(2)) ];
            when f(2) = "*"   =>  return [ elimFolgt(f(1)), "*", elimFolgt(f(3)) ];
            when f(2) = "+"   =>  return [ elimFolgt(f(1)), "+", elimFolgt(f(3)) ];
            when f(2) = "->"  =>  return elimFolgt( [ [ "-", f(1) ], "+", f(3) ] );
            otherwise         =>  print("Fehler in elimFolgt( ", f, ")" );
        end case;
    end elimFolgt;

    -- Berechnet die Negations-Normalform der Formel f.
    procedure nnf(f);
        case
            when f = 1        =>  return 1;
            when f = 0        =>  return 0;
            when is_string(f) =>  return f;
            when f(1) = "-"   =>  return neg( f(2) );
            when f(2) = "*"   =>  return [ nnf(f(1)), "*", nnf(f(3)) ];
            when f(2) = "+"   =>  return [ nnf(f(1)), "+", nnf(f(3)) ];
            otherwise         =>  print("Fehler in nnf( ", f, ")" );
        end case;
    end nnf;

    -- Diese Funktion berechnet die Negations-Normalform von (-f) und schiebt dabei
    -- das Negationszeichen soweit wie möglich nach innen.
    procedure neg(f);
        case
            when f = 1        =>  return 0;
            when f = 0        =>  return 1;
            when is_string(f) =>  return [ "-", f ];
            when f(1) = "-"   =>  return nnf( f(2) );
            when f(2) = "*"   =>  return [ neg(f(1)), "+", neg(f(3)) ];
            when f(2) = "+"   =>  return [ neg(f(1)), "*", neg(f(3)) ];
            otherwise         =>  print("Fehler in neg( ", f, ")" );
        end case;
    end neg;

    -- Diese Funktion berechnet die KNF von f durch Ausmultiplizieren.
    -- Die KNF wird als Menge von Mengen dargestellt.  Es wird vorausgesetzt,
    -- dass die Funktion f bereits in Negations-Normalform ist.
    procedure knf(f);
        case
            when f = 1    => return {};
            when f = 0    => return { {} };
            when is_string(f) => return { { f } };
            when f(1) = "-"   => return { { f } };
            when f(2) = "*"   => return knf(f(1)) + knf(f(3));
            when f(2) = "+"   => return { k1 + k2 : k1 in knf(f(1)), k2 in knf(f(3)) };
            otherwise  => print("Fehler in knf( ", f, ")" );
        end case;
    end knf;

    -- Die Prozedur simplify(K) eliminiert triviale Klauseln aus der KNF K.
    procedure simplify(K);
        return { C in K | not isTrivial(C) };
    end simplify;
    
    -- Die Prozedur isTrivial(C) testet ob die Klausel C trivial ist.
    procedure isTrivial(C);
        return { p in C | is_string(p) } * { p(2) : p in C | #p = 2 } /= {};
    end isTrivial;

    -- Printing and parsing.

    -- Wandelt die Formel f in einen String um.  Es wird angenommen, dass
    -- f in konjunktiver Normalform vorliegt.
    procedure pretty_print_knf(f);
        if f = {} then
            return "1";
        end if;
        if #f = 1 then
            return "(" + pretty_print_disjunction(arb f) + ")";
        end if;
        k from f;
        s1 := pretty_print_disjunction(k);
        s2 := pretty_print_knf(f);
        return "(" + s1 + ") * " + s2;
    end pretty_print_knf;

    -- Wandelt die Formel d in einen String um.  Es wird angenommen, dass
    -- d eine Disjunktion darstellt.
    procedure pretty_print_disjunction(d);
        if d = {} then
            return "0";
        end if;
        if #d = 1 then
            return prettyPrint(arb d);
        end if;
        l from d;
        s1 := prettyPrint(l);
        s2 := pretty_print_disjunction(d);
        return s1 + " + " + s2;
    end pretty_print_disjunction;

    -- Wandelt die Formel f in einen String um.
    procedure prettyPrint(f);
        case
            when f = 1        =>  return "1";
            when f = 0        =>  return "0";
            when is_string(f) =>  return f;
            when f(1) = "-"   =>  return "-" + prettyPrint( f(2) );
            when f(2) = "*"   =>  return "(" + prettyPrint( f(1) ) + " * " + prettyPrint( f(3) ) + ")";
            when f(2) = "+"   =>  return "(" + prettyPrint( f(1) ) + " + " + prettyPrint( f(3) ) + ")";
            when f(2) = "->"  =>  return "(" + prettyPrint( f(1) ) + " -> "  + prettyPrint( f(3) ) + ")";
            when f(2) = "<->" =>  return "(" + prettyPrint( f(1) ) + " <-> " + prettyPrint( f(3) ) + ")";
            otherwise => abort("Error in prettyPrint: " + str(f));
        end case;
    end prettyPrint;

    -- Liest einen String und scannt den String.  Es wird eine Liste von Token
    -- zurück gegeben.
    procedure scanFormula(s);
        letters := {};
        -- collect all letters and digits
        for x in { 48 .. 57 } + { 65 .. 90 } + { 97 .. 122 } loop
            letters := letters + { char(x) };
        end loop;
        case 
            when s = ""                      => return [];
            when s(1) = "("                  => return [ "(" ] + scanFormula( s(2..) );
            when s(1) = ")"                  => return [ ")" ] + scanFormula( s(2..) );
            when s(1) = "+"                  => return [ "+" ] + scanFormula( s(2..) );
            when s(1) = "*"                  => return [ "*" ] + scanFormula( s(2..) );
            when #s >= 2 and s(1..2) = "->"  => return [ "->" ] + scanFormula( s(3..) );
            when #s >= 3 and s(1..3) = "<->" => return [ "<->" ] + scanFormula( s(4..) );
            when s(1) = "-"                  => return [ "-" ] + scanFormula( s(2..) );
            when s(1) = " " or s(1) = "    " => return scanFormula( s(2..) );
        end case;
        index := 1;
        word  := "";
        if s(index) notin letters then
            abort("Error in scanFormula(" + s + ")");
        end if;
        while s(index) in letters and index < #s loop
            index := index + 1;
        end loop;
        if not s(index) in letters then
            return [ s(1 .. index - 1) ] + scanFormula( s(index ..) );
        end if;
        if index = #s then
            return [ s ];
        end if;
        print( "Error in scanFormula: s = ", s );
    end scanFormula;

    -- Interpretiert eine Liste L von Tokens als Formel und gibt die gefundene 
    -- Formel zurück.  Es wird ein Backtracking-Algorithmus verwendet.
    procedure parse_formula(L);
        f := parse_parentheses(L);
        if f /= om then
            return f;
        end if;
        -- Nun wird nach einem binären Operator gesucht.  Die Reihenfolge, in der
        -- gesucht wird, richtet sich nach der Bindungsstärke der Operatoren 
        f := parse_equivalence(L);
        if f /= om then
            return f;
        end if;
        f := parse_implication(L);
        if f /= om then
            return f;
        end if;
        f := parse_disjunction(L);
        if f /= om then
            return f;
        end if;
        f := parse_conjunction(L);
        if f /= om then
            return f;
        end if;
        f := parse_negation(L);
        if f /= om then
            return f;
        end if;
        f := parse_atom(L);
        if f /= om then
            return f;
        end if;
    end parse_formula;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine geklammerte Formel
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_parentheses(L);
        if L(1) = "(" and L(#L) = ")" then
            return parse_formula( l(2 .. #L - 1) );
        end if;
    end parse_parentheses;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       f1 <-> f2
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_equivalence(L);
        for i in [ 2 .. #L - 1 ] loop
            if L(i) = "<->" then
                f1 := parse_formula( L(1 .. i - 1) );
                if f1 /= om then
                    f2 := parse_formula( L(i + 1 .. #L) );
                    if f2 /= om then
                        return [ f1, "<->", f2 ];
                    end if;
                end if;
            end if;
        end loop;
    end parse_equivalence;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       f1 -> f2
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_implication(L);
        for i in [ 2 .. #L - 1 ] loop
            if L(i) = "->" then
                f1 := parse_formula( L(1 .. i - 1) );
                if f1 /= om then
                    f2 := parse_formula( L(i + 1 .. #L) );
                    if f2 /= om then
                        return [ f1, "->", f2 ];
                    end if;
                end if;
            end if;
        end loop;
    end parse_implication;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       f1 + f2
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_disjunction(L);
        for i in [ 2 .. #L - 1 ] loop
            if L(i) = "+" then
                f1 := parse_formula( L(1 .. i - 1) );
                if f1 /= om then
                    f2 := parse_formula( L(i + 1 .. #L) );
                    if f2 /= om then
                        return [ f1, "+", f2 ];
                    end if;
                end if;
            end if;
        end loop;
    end parse_disjunction;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       f1 * f2
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_conjunction(L);
        for i in [ 2 .. #L - 1 ] loop
            if L(i) = "*" then
                f1 := parse_formula( L(1 .. i - 1) );
                if f1 /= om then
                    f2 := parse_formula( L(i + 1 .. #L) );
                    if f2 /= om then
                        return [ f1, "*", f2 ];
                    end if;
                end if;
            end if;
        end loop;
    end parse_conjunction;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine Formel der Art
    --       - f1
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_negation(L);
        if L(1) = "-" then
            f := parse_formula( L(2 .. #L) );
            if f /= om then
                return [ "-", f ];
            end if;
        end if;
    end parse_negation;

    -- L ist eine Liste von Tokens.  Wenn diese Liste eine atomare Formel 
    --       p
    -- darstellt, dann wird diese Formel zurück gegeben, sonst ist das Ergebnis
    -- undefiniert, also Omega.
    procedure parse_atom(L);
        if #L = 1 then
            if L(1) = "1" then
                return 1;
            elseif L(1) = "0" then
                return 0;
            elseif is_string(L(1)) then
                return L(1);
            end if;
        end if;
    end parse_atom;

end main;
