program main; 

    testUnify( "f(X1, g(X2, X1)) = f(g(c,X4), X3)" );
    testUnify( "f(X, g(c, Y), Z) = f(a, g(c, d), a)" );
    testUnify( "f(X, g(c, Y), Z) = f(g(Y,Z), g(c, d), a)" );
    testUnify( "f(X, g(c, Y), Z) = f(g(Y,Z), g(c, d), Y)" );
    testUnify( "Y = f(X)" );
    testUnify( "X = f(X)" );
    testUnify( "g(X) = f(X)" );
    testUnify( "f(X, g(c, Y), Z) = f(g(Y,Z), g(c, Z), X)" );

    -- Der String eq beschreibt eine syntaktische Gleichung. 
    procedure testUnify(eq);
        L := scanString(eq);
        E := parseEquation(L);
        sigma := unify(E); 
        if sigma /= om then
            print("Die Lösung der Gleichung " + prettyPrintTerm(E(1)) + " = " + prettyPrintTerm(E(2)) + " ist:");
            print( prettyPrintSubst(sigma) );
            print();
        else
            print("Die Gleichung " + prettyPrintTerm(E(1)) + " = " + prettyPrintTerm(E(2)) + " ist nicht lösbar.");
            print();
        end if;
    end testUnify;

    -- Eq hat die Form [s, t].  Dabei sind s und t Terme.  Der Aufruf unify(Eq)
    -- berechnet eine Substitution sigma, die die syntaktische Gleichung s = t
    -- löst.  Falls es keine Lösung gibt, wird Omega zurück gegeben.
    procedure unify(Eq);
        return solve( [ { Eq }, {} ] );
    end unify;

    -- Gegeben ist eine Paar der Form [ E, sigma ]. Dabei ist E eine Menge von
    -- syntaktischen Gleichungen und sigma ist eine Substitution.  Die Prozedur
    -- solve( [E, sigma] ) wendet solange Vereinfachungs-Regeln auf das Paar
    -- [ E, sigma ] an, bis entweder eine Lösung der Gleichungen gefunden wird
    -- oder aber feststeht, dass die Gleichungen nicht lösbar sind.  Im ersten
    -- Fall wird die Substitution zurück geliefert, die die Gleichungen löst,
    -- im zweiten Fall wird Omega zurück gegeben.
    procedure solve(Pair);
        [ E, sigma ] := Pair;
        if E = {} then
            return sigma;
        end if;
        [ s, t ] from E;
        case
            when is_string(s) and s = t        => return solve([E, sigma]);
            when is_string(s) and occurs(s, t) => return om;
            when is_string(s) => tau := { [s, t] };
                                 return solve( [ applySet(E, tau), compose(sigma, tau) ] );
            when is_string(t) => return solve( [ E + { [t, s] }, sigma ] );
            when s(1) = t(1)  => return solve( [ E + { [t(i), s(i)] : i in {2..#s} }, sigma ] );
            otherwise         => return om;
        end case;
    end solve;

    -- E ist eine Menge von syntaktischen Gleichungen und sigma ist eine 
    -- Substitution.  Die syntaktischen Gleichungen werden durch Paare 
    -- repräsentiert.  Die Funktion applySet(E, sigma) wendet die Substitution 
    -- sigma auf alle syntaktischen Gleichungen aus E an.
    procedure applySet(E, sigma);
        return { [apply(s, sigma), apply(t, sigma)] : [s, t] in E };
    end applySet;

    -- Die Funktion apply(t, sigma) bekommt als Argument einen T Term und eine
    -- Substitution sigma.  Es wird der Term berechnet, der entsteht, wenn die
    -- Substitution sigma auf t angewendet wird.
    -- Die Prozedur funktioniert auch, wenn t kein Term sondern eine Formel ist.
    procedure apply(t, sigma);
        case
            when is_string(t) and t    in domain(sigma) => return sigma(t);
            when is_string(t) and t notin domain(sigma) => return t;
            otherwise                                     => 
                return [ t(1) ] + [ apply(t(i), sigma) : i in [2 .. #t] ];
        end case;
    end apply;

    -- Die Funktion occurs(x, t) überprüft, ob die Variable x in dem Term t 
    -- vorkommt.
    procedure occurs(x, t);
        case
            when is_string(t) => return x = t;
            otherwise         => return exists i in [2..#t] | occurs(x, t(i));
        end case;
    end occurs;

    -- Die Funktion compose(sigma, tau) berechnet die Komposition sigma tau der 
    -- Substitutionen sigma und tau.  Es wird vorausgesetzt, dass gilt
    --        domain(sigma) * domain(tau) = {}.
    procedure compose(sigma, tau);
        return { [ x, apply(s, tau) ] : [ x, s ] in sigma } + tau;
    end compose;

    ------------------------------------------------------------------------
    -- Pretty-Printing und Parsing                                        --
    ------------------------------------------------------------------------

    -- Wandelt den gegebenen Term in einen String um.
    procedure prettyPrintTerm(t); 
        case
            when is_string(t) => return t;
            when #t = 1       => return t(1);
            otherwise         => return 
                t(1) + "(" +  
                "" +/ [ prettyPrintTerm( t(i) ) + ", " : i in [2 .. #t - 1] ] + 
                prettyPrintTerm( t(#t) ) + ")";
        end case;
    end prettyPrintTerm;

    -- Wandelt die gegebene Substitution in einen String um.
    procedure prettyPrintSubst(sigma);
        if sigma = {} then
            return "[]";
        end if;
        [ x, t ] from sigma;
        result := "[ " + x + " |-> " + prettyPrintTerm(t);
        result := result +/ 
                  [", " + x + " |-> " + prettyPrintTerm(t) : [x, t] in sigma] +
                  " ]";
        return result;
    end prettyPrintSubst;

    -- Als Eingabe wird eine Liste von Tokens erwartet, als Ergebnis wird ein 
    -- Paar von Termen zurückgegeben. 
    procedure parseEquation(L);
        t1 := parseTerm(L);
        if not L(1) = "=" then
            return om;
        end if;
        L := L(2..);
        t2 := parseTerm(L);
        if t1 /= om and t2 /= om then
            return [ t1, t2 ];
        end if;
    end parseEquation;

    -- Als Eingabe wird eine Liste von Tokens erwartet, als Ergebnis wird ein 
    -- Term zurückgegeben. Alle Tokens, die dabei verarbeitet wurden, werden aus
    -- der Liste L entfernt.
    procedure parseTerm(rw L);
        if L = [] then
            return om;
        end if;
        v := parseVariable(L);
        if v /= om then
            return v;
        end if;
        c := parseConstant(L);
        if c /= om then
            return c;
        end if;
        F := L(1);
        L := L(2..);
        args := parseTermList(L);
        if args /= om then
            return [ F ] + args;
        end if;
    end parseTerm;

    -- Versucht eine Liste von Termen zu parsen.
    procedure parseTermList(rw L);
        if L(1) = ")" then
            L := L(2..);
            return [];
        end if;
        if L(1) = "(" or L(1) = "," then
            L := L(2..);
            first := parseTerm(L);
            rest  := parseTermList(L);
            if first /= om and rest /= om then
                return [ first ] + rest;
            end if;
        end if;
    end parseTermList;

    -- Variablen beginnen mit einem großen Buchstaben.
    procedure parseVariable(rw L);
        firstToken := L(1);
        firstChar  := abs(firstToken(1));
        if 65 <= firstChar and firstChar <= 90 then
            L := L(2 ..);
            return firstToken;
        end if;
    end parseVariable;

    -- Hinter einer Konstanten steht keine öffnende Klammer.
    procedure parseConstant(rw L);
        firstToken := L(1);
        firstChar  := abs(firstToken(1));
        if firstChar in {97..122} and (#L = 1 or L(2) /= "(")  then
            L := L(2 ..);
            return [ firstToken ];
        end if;
    end parseConstant;

    -- Liest einen String und scannt den String.  Es wird eine Liste von Token
    -- zurück gegeben.
    procedure scanString(s);
        letters := {};
        -- collect all letters and digits
        for x in { 48 .. 57 } + { 65 .. 90 } + { 97 .. 122 } loop
            letters := letters + { char(x) };
        end loop;
        case 
            when s = ""                      => return [];
            when s(1) = "("                  => return [ "("   ] + scanString( s(2..) );
            when s(1) = ")"                  => return [ ")"   ] + scanString( s(2..) );
            when s(1) = ","                  => return [ ","   ] + scanString( s(2..) );
            when s(1) = "="                  => return [ "="   ] + scanString( s(2..) );
            when s(1) = "+"                  => return [ "+"   ] + scanString( s(2..) );
            when s(1) = "*"                  => return [ "*"   ] + scanString( s(2..) );
            when #s >= 2 and s(1..2) = "->"  => return [ "->"  ] + scanString( s(3..) );
            when #s >= 3 and s(1..3) = "<->" => return [ "<->" ] + scanString( s(4..) );
            when s(1) = "-"                  => return [ "-"   ] + scanString( s(2..) );
            when s(1) = " " or s(1) = "    " => return scanString( s(2..) );
        end case;
        index := 1;
        word  := "";
        if s(index) notin letters then
            abort("Error in scanString(" + s + ")");
        end if;
        while s(index) in letters and index < #s loop
            index := index + 1;
        end loop;
        if onlyDigits( s(1 .. index-1) ) then
            token := ascii2int( s(1 .. index-1) );
        else
            token := s(1 .. index-1);
        end if;
        if not s(index) in letters then
            return [ token ] + scanString( s(index ..) );
        end if;
        if index = #s then
            return [ s ];
        end if;
        print( "Error in scanString: s = ", s );
    end scanString;

    -- Der Aufruf onlyDigits(s) liefert genau dann true, wenn der String "s" 
    -- nur aus den Ziffern "0", ..., "9" besteht.
    procedure onlyDigits(s);
        return { s(i) : i in [1..#s] } <= { char(i) : i in [0..9] };
    end onlyDigits;

    -- Wandelt den gegebenen String, der nur aus Ziffern bestehen darf, in
    -- eine ganze Zahl um.
    procedure ascii2int(s);
        -- Die Funktion abs c berechnet den ASCII-Code, der dem Zeichen c
        -- zugeordnet ist.
        return +/ [ (abs(s(i)) - abs("0")) * 10 ** (#s - i) : i in [1..#s] ];
    end ascii2int;

end main;