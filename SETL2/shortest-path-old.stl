program main;

    R := { [1,2], [2,3], [1,3], [2,4], [4,5] };
    -- D gives the distance between two points
    D := { [ [1,2], 2 ], [ [2,3], 1], [ [1,3], 4 ], [ [2,4], 7], [ [4,5], 1 ] };

    print("computing shortest path map");
    T := shorted_path(R, D);
    print("T = ", T);
    print("D = ", D);

    -- The procedure call closure(R) computes the transitive closure
    -- of the binary relation R.

    procedure shorted_path(rd R, rw D);
        n   := 1;
        R_n := R;
        T   := R;
        loop
            Old_R_n := R_n;
            Old_D   := D;
            n       := n + 1;
            print("D = ", D);
            R_n     := product(R, R_n, D);
            T       := T + R_n;
            if R_n = Old_R_n and D = Old_D then
                return T;
            end if;
        end loop;
    end shorted_path;

    -- The procedure call product(R1, R2, D) computes the relational
    -- product of the binary relations R1 and R2.  The map D gives distances
    -- between elements.  This map is extended.

    procedure product(rd R1, rd R2, rw D);
        -- compute the relational product
        P := { [x,z] : [x,y] in R1, [y,z] in R2 | [x,y] in R1 and [y,z] in R2 };
        -- update the distance next
        for [x,z] in P loop
            for y in range(R1) loop
                if [x,y] in R1 and [y,z] in R2 then
                    update_map( D, [x,z], D([x,y]) + D([y,z]) );
                end if;
            end loop;
        end loop;
        return P;
    end product;

    -- If y is less than D(x), update the map D so that D(x) = y
    -- holds afterwards.

    procedure update_map(rw D, x, y);
        if not [x, y] in D then
            D(x) := y;
        else
            D(x) := D(x) min y;
        end if;
    end update_map;

end main;
