program main;    -- Eulerian path construction

    graph := {[1,2], [2,3], [3,4], [4,1], [4,2]};             -- a small graph
    print(euler_path(graph + {[y, x]: [x, y] in graph}));     -- which is undirected.

    procedure Euler_path(G);                -- constructs Eulerian path for graph G

        nodes := domain(G);                 -- all nodes in the graph.
    
        odds := {x in nodes | odd(#G{x})};
        n    := #odds;
        if n = 1 or n > 2 then
            return OM;                      -- since more than two nodes are
        end if;                             -- touched by an odd number of edges
    
        -- odds is the set of all nodes of G that 
        -- are touched by an odd number of edges
        x := arb(odds) ? arb(nodes);        -- pick a node of odds if possible
                                            -- otherwise pick any node of G
        path := [x] + build_path(x,G);    
        while exists z = path(i) | G{z} /= {} loop
            -- insert new section into path
            new_p := build_path(z, G); 
            G -:= ({[y,x]: [x,y] in new_p} + {e: e in new_p});
            path := path(i..i - 1) + new_p + path(i..);
        end loop;    
        return path;
    end Euler_path;

    procedure build_path(x, rw G);        -- builds maximal path section starting at x, 
                                          -- and deletes all edges traversed
        p := [];
        while (y := arb G{x}) /= OM loop  -- while there exists an edge leaving the last point reached
            p +:= [y];                    -- extend path to traverse the edge
            G -:= {[x, y], [y, x]};       -- delete the edge just traversed
            x := y;                       -- step to y
        end loop;
        return p;
    end build_path;

end main;
