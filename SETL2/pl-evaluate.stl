program main;
    -- The global variables below are needed to parse formulas.
    var mTokenList; -- list of all tokens 
    var mIndex;     -- index to the next token
    var mVariables := { "x", "y", "z" }; -- We use three variables, "x", "y", and z.

    a := "a";
    b := "b";  
    c := "c";  
    U := { a, b };  -- the universe
    -- pJ is the interpretation of the predicate symbol "p".
    pJ := { [ a, c ],  [ b, c ],  [ c, c ] };
    -- The structure consists of the universe and the interpretation of
    -- the function and predicate symbols.
    J := { [ "p", pJ ]};
    S := [ U, J ];
    -- I is a variable assignment.
    I := { [ "x", a ], [ "y", b ] }; 
    f := parse("forall x: ((exists y: p(x,y)) -> (exists z: p(z,x)))");
    print(f);
    print(evalFormula(f, S, I));        

    a := "a";
    b := "b";  
    U := { a, b };  -- the universe
    -- pJ is the interpretation of the predicate symbol "p".
    pJ := { [ a, a ], [ b, b ] };
    -- The structure consists of the universe and the interpretation of
    -- the function and predicate symbols.
    J := { [ "p", pJ ]};
    S := [ U, J ];
    -- I is a variable assignment.
    I := { [ "x", a ], [ "y", b ] }; 
    f := parse("(forall x: exists y: p(x,y)) -> (exists y: forall x: p(x,y))");
    print(f);
    print(evalFormula(f, S, I));        

    a := "a";
    b := "b";  
    U := { a, b };  -- the universe
    -- pJ is the interpretation of the predicate symbol "p".
    pJ := { [ a ] };
    -- qJ is the interpretation of the predicate symbol "q".
    qJ := { [ b ] };
    -- The structure consists of the universe and the interpretation of
    -- the function and predicate symbols.
    J := { [ "p", pJ ], [ "q", qJ ] };
    S := [ U, J ];
    -- I is a variable assignment.
    I := { [ "x", a ] }; 
    f1 := parse("(forall x: (p(x) + q(x))) <-> (forall x: p(x)) + (forall x: q(x))");
    f2 := parse("(forall x: p(x)) + (forall x: q(x)) -> forall x: (p(x) + q(x))");
    print(f1);
    print(evalFormula(f1, S, I));        
    print(f2);
    print(evalFormula(f2, S, I));        

    a := "a";
    b := "b";  
    U := { a, b };  -- the universe
    -- pJ is the interpretation of the predicate symbol "p".
    pJ := { [ a ] };
    -- qJ is the interpretation of the predicate symbol "q".
    qJ := { [ b ] };
    -- The structure consists of the universe and the interpretation of
    -- the function and predicate symbols.
    J := { [ "p", pJ ], [ "q", qJ ] };
    S := [ U, J ];
    -- I is a variable assignment.
    I := { [ "x", a ] }; 
    f1 := parse("(exists x: (p(x) * q(x))) <-> (exists x: p(x)) * (exists x: q(x))");
    f2 := parse("(exists x: (p(x) * q(x)))  -> (exists x: p(x)) * (exists x: q(x))");
    print(f1);
    print(evalFormula(f1, S, I));        
    print(f2);
    print(evalFormula(f2, S, I));        

    -- A simple commutative group with two elements a and b. 
    -- The following definitions of the variables a and b are just a convenience.
    a := "a";
    b := "b";  
    U := { a, b };  -- the universe
    -- multiply is the interpretation of the function symbol "*".
    multiply := { [ [ a, a ], a ],  [ [ a, b ], b ],  [ [ b, a ], b ],  [ [ b, b ], a ] };
    -- equal is the interpretation of the predicate symbol "=".
    equal := { [ x, y ] : x in U, y in U | x = y };
    -- The structure consists of the universe and the interpretation of
    -- the function and predicate symbols.
    J := { [ "1", a ], [ "*", multiply ], [ "=", equal ] };
    S := [ U, J ];
    -- I is a variable assignment.
    I := { [ "x", a ], [ "y", b ], [ "z", a ] }; 
    
    -- The following formulas are the axioms of group theory.
    g1 := parse("forall x: =(*(x, 1), x)");
    g2 := parse("forall x: exists y: =(*(x, y), 1)");
    g3 := parse("forall x: forall y: forall z: =( *(*(x, y), z), *(x, *(y, z)) )");
    g4 := parse("forall x: forall y: =(*(x, y), *(y, x))");
    print("g1 = ", g1);
    GT := { g1, g2, g3, g4 };

    print("checking group theory in the structure \n", S);
    for f in GT loop
        print( "checking ", f, ": ", evalFormula(f, S, I) );
    end loop;

    -- A non-commutative group with 6 elements a0, a1, a2, a3, a4, a5. 
    a0 := "a0";
    a1 := "a1";
    a2 := "a2";
    a3 := "a3";
    a4 := "a4";
    a5 := "a5";
    U := { a0, a1, a2, a3, a4, a5 };  -- the universe
    -- multiply is the interpretation of the function symbol "*".
    multiply := { 
     [["a0", "a0"], "a0"], [["a0", "a1"], "a1"], [["a0", "a2"], "a2"], [["a0", "a3"], "a3"], [["a0", "a4"], "a4"], [["a0", "a5"], "a5"],
     [["a1", "a0"], "a1"], [["a1", "a1"], "a2"], [["a1", "a2"], "a0"], [["a1", "a3"], "a5"], [["a1", "a4"], "a3"], [["a1", "a5"], "a4"],
     [["a2", "a0"], "a2"], [["a2", "a1"], "a0"], [["a2", "a2"], "a1"], [["a2", "a3"], "a4"], [["a2", "a4"], "a5"], [["a2", "a5"], "a3"],
     [["a3", "a0"], "a3"], [["a3", "a1"], "a4"], [["a3", "a2"], "a5"], [["a3", "a3"], "a0"], [["a3", "a4"], "a1"], [["a3", "a5"], "a2"],
     [["a4", "a0"], "a4"], [["a4", "a1"], "a5"], [["a4", "a2"], "a3"], [["a4", "a3"], "a2"], [["a4", "a4"], "a0"], [["a4", "a5"], "a1"],
     [["a5", "a0"], "a5"], [["a5", "a1"], "a3"], [["a5", "a2"], "a4"], [["a5", "a3"], "a1"], [["a5", "a4"], "a2"], [["a5", "a5"], "a0"]
    };
    -- equal is the interpretation of the predicate symbol "=".
    equal := { [ x, y ] : x in U, y in U | x = y };
    -- The structure consists of the universe and the interpretation of
    -- the function and predicate symbols.
    S := [ U, { [ "1", a0 ], [ "*", multiply ], [ "=", equal ] } ];
    -- I is a variable assignment.
    I := { [ "x", a0 ], [ "y", a1 ], [ "z", a2 ] }; 
    
    print("checking group theory in the structure \n", S);
    for f in GT loop
        print( "checking ", f, ": ", evalFormula(f, S, I) );
    end loop;

    -- This procedure evaluates the formula f in the structure S
    -- using the variable assignment I.
    procedure evalFormula(f, S, I);
        case
            when f = 1        =>  return TRUE;
            when f = 0        =>  return FALSE;
            when f(1) = "-"   =>  return not evalFormula(f(2), S, I);
            when f(2) = "*"   =>  return evalFormula(f(1), S, I) and  evalFormula(f(3), S, I);
            when f(2) = "+"   =>  return evalFormula(f(1), S, I) or   evalFormula(f(3), S, I);
            when f(2) = "->"  =>  return not evalFormula(f(1), S, I) or evalFormula(f(3), S, I);
            when f(2) = "<->" =>  return evalFormula(f(1), S, I) = evalFormula(f(3), S, I);
            when f(1) = "forall" =>
                x := f(2);
                g := f(3);
                U := S(1);                
                return forall c in U | evalFormula(g, S, modify(I, x, c));
            when f(1) = "exists" =>
                x := f(2);
                g := f(3);
                U := S(1);                
                return exists c in U | evalFormula(g, S, modify(I, x, c));
            otherwise => return evalAtomic(f, S, I);  -- atomic formula
        end case;        
    end evalFormula;

    -- This procedure evaluates the atomic formula a in the structure S
    -- using the variable assignment I.
    procedure evalAtomic(a, S, I);
        -- we do not support nullary predicates yet
        J    := S(2);
        p    := a(1); -- predicate symbol
        pJ   := J(p);
        args := a(2..);
        argsVal := evalTermList(args, S, I);
        return argsVal in pJ;
    end evalAtomic;  

    -- This procedure evaluates the term t in the structure S
    -- using the variable assignment I.
    procedure evalTerm(t, S, I);
        if is_string(t) then  -- it is a variable
            return I(t);
        end if;
        J    := S(2);
        f    := t(1); -- function symbol
        fJ   := J(f);
        args := t(2..);
        argsVal := evalTermList(args, S, I);
        if #argsVal > 0 then
            result := fJ(argsVal); 
        else
            result := fJ;   -- t is a constant
        end if;
        return result;
    end evalTerm;

    -- This procedure evaluates the term list tl, given the structure S and the variable
    -- assignment I.
    procedure evalTermList(tl, S, I);
        return [ evalTerm(t, S, I) : t in tl ];
    end evalTermList;

    -- Given a variable assignement I, a variable x, and an element c from the universe,
    -- this function computes the variable assignement I[x/c] which satisfies
    --     I[x/c](x) = c,
    --     I[x/c](y) = I(y) if x /= y.
    procedure modify(I, x, c);
        I(x) := c;
        return I;
    end modify;

    --------------------------------------------------------------------------------
    -- Die restlichen Prozeduren dienen dem Einlesen pr‰dikatenlogischer Formeln. --
    --------------------------------------------------------------------------------

    -- This procedure parses the given string s and transforms it into a formula.
    procedure parse(s);
        mTokenList := scanFormula(s);
        mIndex     := 1;
        result     := parseFormula();
        return result;
    end parse;

    -- Diese Prozedur parst eine pr‰dikatenlogische Formel gem‰ﬂ der folgenden
    -- Grammatik:
    --
    --        formula         : implication "<->" implication
    --                        | implication
    --                        ;
    --
    --        implication     : conjunction "->" implication
    --                        | conjunction
    --                        ;
    --
    --        conjunction     : disjunction conjunctionRest;
    --                    
    --        conjunctionRest : "*" disjunction conjunctionRest
    --                        | /* epsilon */
    --                        ;
    --
    --        disjunction     : negation disjunctionRest;
    --
    --        disjunctionRest : "+" negation disjunctionRest
    --                        | /* epsilon */
    --                        ;
    --
    --        negation        : "-" negation
    --                        | atomic
    --                        ;
    -- 
    --        atomic          : "(" formula ")"
    --                        | "forall" IDENTIFIER ":" formula
    --                        | "exists" IDENTIFIER ":" formula
    --                        | IDENTIFIER "(" termList ")"
    --                        ;
    --
    --        termList        : term termListRest
    --                        ;
    --
    --        termListRest    : "," term termListRest
    --                        | /* epsilon */
    --                        ;
    --
    --        term            : IDENTIFIER "(" termList ")"
    --                        | IDENTIFIER
    --                        ;
    procedure parseFormula();
        implicationLhs := parseImplication();
        if mIndex <= #mTokenList and mTokenList(mIndex) /= ")" then
            check("<->");
            implicationRhs := parseImplication();
            return [ implicationLhs, "<->", implicationRhs ];
        else
            return implicationLhs;    
        end if;
    end parseFormula;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --
    --        implication     : conjunction "->" implication
    --                        | conjunction
    --                        ; 
    procedure parseImplication();
        conjunction := parseConjunction();
        if mIndex <= #mTokenList and mTokenList(mIndex) notin { "<->", ")" } then
            check("->");
            implication := parseImplication();
            return [ conjunction, "->", implication ];
        else
            return conjunction;
        end if;
    end parseImplication;

    -- Diese Prozedur implementiert die folgende Grammatik-Regel:
    --
    --        conjunction     : disjunction conjunctionRest;
    --
    procedure parseConjunction();
        disjunction := parseDisjunction();
        return parseConjunctionRest(disjunction);
    end parseConjunction;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --                    
    --        conjunctionRest : "*" disjunction conjunctionRest
    --                        | /* epsilon */
    --                        ;
    procedure parseConjunctionRest(formula);
        if check("*") then
            disjunction := parseDisjunction();
            return parseConjunctionRest([ formula, "*", disjunction ]);
        end if;
        return formula;
    end parseConjunctionRest;

    -- Diese Prozedur implementiert die folgende Grammatik-Regel:
    --
    --        disjunction     : negation disjunctionRest;
    --
    procedure parseDisjunction();
        negation := parseNegation();
        return parseDisjunctionRest(negation);
    end parseDisjunction;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --
    --        disjunctionRest : "+" negation disjunctionRest
    --                        | /* epsilon */
    --                        ;
    procedure parseDisjunctionRest(formula);
        if check("+") then
            negation := parseNegation();
            return parseDisjunctionRest([ formula, "+", negation]);
        end if;
        return formula;
    end parseDisjunctionRest;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --
    --        negation        : "-" negation
    --                        | atomic
    --                        ;
    procedure parseNegation();
        if check("-") then
            negation := parseNegation();
            return [ "-", negation ];            
        end if;
        return parseAtomic();
    end parseNegation;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --
    --        atomic          : "(" formula ")"
    --                        | "forall" IDENTIFIER ":" formula
    --                        | "exists" IDENTIFIER ":" formula
    --                        | IDENTIFIER "(" termList ")"
    --                        ;
    procedure parseAtomic();
        if check("(") then
            formula := parseFormula();
            if not check(")") then
                abort("Parse Error, ')' expected");
            end if;
            return formula; 
        elseif check("forall") then
            x := mTokenList(mIndex);
            mIndex := mIndex + 1;
            if not check(":") then
                abort("Parse Error, ':' expected");
            end if;
            g := parseFormula();
            return [ "forall", x, g ];
        elseif check("exists") then
            x := mTokenList(mIndex);
            mIndex := mIndex + 1;
            if not check(":") then
                abort("Parse Error, ':' expected");
            end if;
            g := parseFormula();
            return [ "exists", x, g ];
        elseif is_string(mTokenList(mIndex)) then
            predicate := mTokenList(mIndex);
            mIndex := mIndex + 1;
            if not check("(") then
                abort("Parse Error, '(' expected");
            end if;
            termList := parseTermList();
            if not check(")") then
                print("mIndex     = \"", mIndex,   "\"");
                print("termList   = \"", termList, "\"");
                abort("Parse Error, ')' expected");
            end if;
            return [ predicate ] + termList;
        end if;
        abort("Parse Error in parseFactor,");
    end parseAtomic;

    --        termList        : term termListRest
    --                        ;
    --
    procedure parseTermList();
        term     := parseTerm();
        termList := parseTermListRest();
        return [ term ] + termList;
    end parseTermList;
    
    --        termListRest    : "," term termListRest
    --                        | /* epsilon */
    --                        ;
    --
    procedure parseTermListRest();
        if check(",") then
            term     := parseTerm();
            termList := parseTermListRest();
            return [ term ] + termList;
        end if;
        return [];
    end parseTermListRest;

    --        term            : IDENTIFIER "(" termList ")"
    --                        | IDENTIFIER
    --                        ;
    procedure parseTerm();
        name   := mTokenList(mIndex);
        mIndex := mIndex + 1;
        if check("(") then
            termList := parseTermList();
            if not check(")") then
                abort("Parse Error, ')' expected");
            end if;
            return [ name ] + termList;
        end if;
        if name in mVariables then
            return name;
        end if;
        return [ name ];
    end parseTerm;

    -- ‹berpr¸fe, ob als n‰chstes token in der Eingabe steht.
    procedure check(token);
        -- no tokens left
        if mIndex > #mTokenList then
            return false;
        end if;
        if mTokenList(mIndex) = token then
            mIndex := mIndex + 1;
            return true;
        end if;
        return false;
    end check;

    -- Liest einen String und scannt den String.  Es wird eine Liste von Token
    -- zur¸ck gegeben.
    procedure scanFormula(s);
        letters := {};
        -- collect all letters and digits
        for x in { 48 .. 57 } + { 65 .. 90 } + { 97 .. 122 } loop
            letters := letters + { char(x) };
        end loop;
        case 
            when s = ""                      => return [];
            when s(1) = "("                  => return [ "(" ] + scanFormula( s(2..) );
            when s(1) = ")"                  => return [ ")" ] + scanFormula( s(2..) );
            when s(1) = "+"                  => return [ "+" ] + scanFormula( s(2..) );
            when s(1) = "*"                  => return [ "*" ] + scanFormula( s(2..) );
            when #s >= 2 and s(1..2) = "->"  => return [ "->" ] + scanFormula( s(3..) );
            when #s >= 3 and s(1..3) = "<->" => return [ "<->" ] + scanFormula( s(4..) );
            when s(1) = "-"                  => return [ "-" ] + scanFormula( s(2..) );
            when s(1) = ","                  => return [ "," ] + scanFormula( s(2..) );
            when s(1) = "="                  => return [ "=" ] + scanFormula( s(2..) );
            when s(1) = ":"                  => return [ ":" ] + scanFormula( s(2..) );
            when s(1) = " " or s(1) = "    " => return scanFormula( s(2..) );
        end case;
        index := 1;
        word  := "";
        if s(index) notin letters then
            abort("Error in scanFormula(" + s + ")");
        end if;
        while s(index) in letters and index < #s loop
            index := index + 1;
        end loop;
        if not s(index) in letters then
            return [ s(1 .. index - 1) ] + scanFormula( s(index ..) );
        end if;
        if index = #s then
            return [ s ];
        end if;
        print( "Error in scanFormula: s = ", s );
    end scanFormula;

end main;
