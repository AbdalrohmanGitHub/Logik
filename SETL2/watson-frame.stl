program main;
    -- Anton, Bruno oder Claus ist schuldig.
    f1 := [ [ "a", "+", "b" ], "+", "c" ];

    -- Wenn Anton schuldig ist, so hat er genau einen Komplizen.
    f2 := [ "a", "->", [ "b", "+", "c" ] ];          -- mindestens einen Komplizen
    f3 := [ "a", "->", [ "-", [ "b", "*", "c" ] ] ]; -- höchstens einen Komplizen

    -- Wenn Bruno unschuldig ist, dann ist auch Claus unschuldig
    f4 := [ [ "-", "b" ], "->", [ "-", "c" ] ]; 

    -- Wenn genau zwei schuldig sind, dann ist Claus einer von ihnen.
    -- Also gilt nicht: Anton und Bruno sind schuldig und Claus ist unschuldig.
    f5 := [ "-", [ [ "a", "*", "b" ], "*", [ "-", "c" ] ] ]; 

    -- Wenn Claus unschuldig ist, ist Anton schuldig.
    f6 := [ [ "-", "c" ], "->", "a"  ];

    FS := { f1, f2, f3, f4, f5, f6 };

    A  := { "a", "b", "c" };
    P  := pow A;
    print("P = ", P);
    -- B ist die Menge aller Belegungen
    B  := { createBelegung(M, A) : M in P };
    print("Mögliche Belegungen:");
    for I in B loop
        print("I = ", I);
    end loop;

    S  := { I in B | evalSet(FS, I) = true };
    print("\nMenge der Belegungen, die FS erfüllen:");
    for I in S loop
        print(I);
    end loop;
    if #S = 1 then
        I := arb(S);
        Taeter := { x in A | I(x) };
        print("\nMenge der Täter: ", Taeter);
    end if;

    -- Diese Prozedur erzeugt aus einer Teilmenge M von A eine Belegung,
    -- die genau für die Elemente x aus A true liefert, für die x ein Element von
    -- M ist.      
    procedure createBelegung(M, A);
    
    end createBelegung;

    -- FS ist eine Menge von Formeln und I ist eine Belegung.  Die Funktion liefert
    -- genau dann wahr, wenn evaluate(f, I) für alle Formeln f aus FS true liefert. 
    procedure evalSet(FS, I);

    end evalSet;

    -- Die Prozedur evaluate(f, I) wertet die aussagen-logische Formel f unter
    -- aussagen-logischen Interpretation I aus.
    procedure eval(f, I);

    end eval;
end main;
