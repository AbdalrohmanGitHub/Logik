-- Flucht der Diebe
-- Drei Diebe, ein Erwachsener, ein Jugendlicher und ein 
-- kleiner Junge hatten aus einem Schloss einen Koffer 
-- voller Juwelen gestohlen. Sie konnten ihren Tatort 
-- nur durch ein hoch gelegenes Fenster verlassen, vor 
-- dem die folgende für die Banditen hilfreiche Apparatur
--  angebracht war: eine Rolle, über die ein Seil lief, 
-- an dessen beiden Enden je ein Korb befestigt war. 
-- Wenn sich der eine Korb unten am Boden befand, war 
-- der andere oben am Fenster. Weder vom Fenster noch vom
--  Korb aus konnte man das Seil erreichen, die einzige 
-- Möglichkeit, etwas mithilfe dieser Apparatur nach 
-- unten zu transportieren, bestand darin, den einen Korb
--  mit mehr Gewicht zu beladen als in anderen. Freilich
--  durfte, wenn sich ein Mensch in einem Korb befand, 
-- dieser Gewichtsunterschied nicht größer als 10 kg 
-- sein, weil sonst der Korb mit zu hoher Geschwindigkeit
--  hinabsaust und zu hart aufschlagen würde. Dem 
-- Juwelenkoffer allerdings konnte diese harte Landung 
-- nicht schaden. Der Mann wog 85 Kilo, der jugendliche
--  Dieb 50 Kilo und das Kind 70 Kilo. Der Koffer wog 
--  30 Kilo. Nur zwei Personen oder eine Person mit dem 
-- Koffer passten in einem Korb. Der eine Korb befand 
-- sich am Fenster, als die Bande das Schloss verlassen 
-- wollte. Wie entkamen die Diebe mit ihrer Beute?

program main;
 
    All := { 85, 50, 40, 30}; -- Menge der Gewichte
    
    -- P ist die Menge aller Punkte.
    P := pow All;
                 
    -- Flaschenzug hoch und runter mit zwei Körben K1 und K2
    -- Differenz Masse max 10kg: sum(K2) - sum(K1) < 11 
    -- oder Koffer alleine: K2 = {30}
    R := {   [ Oben, Oben + K1 - K2 ]
    	   : Oben in P, K1 in pow (All - Oben), K2 in pow Oben 
    	   |     (sum(K2) - sum(K1) < 11 or K2 = {30}) 
             and sum(K2) > sum(K1)                     
             and #K1 <= 2 and #K2 <= 2
         };		
	
    -- Am Anfang sind alle OBEN.
    start := All;
    -- Am Ende sollen alle UNTEN sein.
    goal := {};
    -- Berechne einen Pfad zum Ziel.
    path := reachable(start, goal, R);

    -- Gebe diesen Pfad Schritt für Schritt aus.
    for i in [1 .. #path] loop
        S1 := All - path(i);
        S2 := path(i);
        print(S1, " UNTEN", 65 * " ","OBEN ", S2);
        if i = #path then
            exit;
        end if;
        
            nU := (All - path(i+1)) - (All - path(i));
            nO := path(i+1) - path(i);
            
            print(50 * "_");
            print(32 * " ", i, ". Flaschenzug");
            print(25 * " ", 5 * "^", " ", nO, " ", 5 * "^", " ", 5 * "v", nU, " ", 5 * "v" );
            print(50 * "_");

    end loop;

    procedure sum(S);
        return 0 +/ S;
    end sum;    

    -- Check wether there is a path from x to y in R and compute it.
    procedure reachable(x, y, R);
        P := { [x] };
        loop
            Old_P := P;
            P     := P + path_product(P, R);
            Found := { p in P | p(#p) = y };
            if Found /= {} then
                return arb Found;
            end if;
            if P = Old_P then
                return;
            end if;
        end loop;
    end reachable;

    -- The procedure call product(P, Q) computes the path product P * Q.
    procedure path_product(P, Q);
        return { add(p,q) : p in P, q in Q | p(#p) = q(1) and not cyclic(add(p,q)) };
    end path_product;    

    -- The procedure not_cyclic(p) checks whether the path p is cyclic.
    procedure cyclic(p);
        return #{ x : x in p } < #p;
    end cyclic;

    -- The product call add(p,q) computes the sum of the lists p and q.
    -- The last point of p has to be the first point of q.
    procedure add(p, q);
        return p + q(2..);
    end add;    

end main;