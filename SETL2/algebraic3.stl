-- 'algebraic object' - a relatively 'abstract' class, encapsulating  syntax
class algebraic;
 -- no objects of this class  will ever be created directly
end algebraic;

class body algebraic;
    -- must be available
    var val, sum, invert, maker, self_str;  
    
    -- difference
    procedure self - b; 
        return maker(sum(val,invert(if is_integer(b) then b else  b.val end if))); 
    end;
 
    -- sum
    procedure b + self; 
        return maker(sum(if is_integer(b) then b else  b.val end if,val)); 
    end;

    -- sum in alternate order
    procedure self + b; 
        return maker(sum(val,if is_integer(b) then b else b.val end if)); 
    end;                

    -- monadic minus
    procedure -self; 
        return maker(invert(val)); 
    end;

    -- print form
    procedure selfstr; 
        return self_str(val); 
    end selfstr;
    
end algebraic;

package intops;                -- integer operations semantic package; does the innermost algebraic work

    procedure sum_op(val,b);             -- addition 
    procedure invert_op(val);            -- unary minus
    procedure selfstr_op(val);           -- string conversion

end intops;

package body intops;        -- integer operations semantic package; does the innermost algebraic work

    procedure sum_op(val,b); 
        return val + b; 
    end sum_op; 

    procedure invert_op(val); 
        return -val; 
    end invert_op; 

    procedure selfstr_op(val); 
        return str(val); 
    end selfstr_op; 

end intops;

package matrix_ops;                -- matrix operations semantic package; does the innermost algebraic work

    procedure sum_op(val,b);             -- addition 
    procedure invert_op(val);            -- unary minus
    procedure selfstr_op(val);           -- string conversion

end matrix_ops;

package body matrix_ops;        -- matrix operations semantic package; does the innermost algebraic work

    procedure sum_op(val,b); 
        return [[c + b(i)(j): c = row(j)]: row = val(i)]; 
    end sum_op; 
    
    procedure invert_op(val); 
        return [[-c: c = row(j)]: row = val(i)]; 
    end invert_op; 

    procedure selfstr_op(val); 
        return "" +/ ["|" +/ [pad_8(c): c in row] + "|\n": row in val]; 
    end selfstr_op; 

    -- pad value to  8 characters     
    procedure pad_8(c); 
        stg := 8 * " " + str(c); 
        return stg(#stg - 7..); 
    end pad_8; 

end matrix_ops;

class int_obj;                -- integers, as  a sample class of algebraic object
    inherit algebraic;        -- we inherit from the more general 'algebraic' class
    procedure create(n);
end int_obj;

class body int_obj;            -- wrapper class, combining syntax with  semantics
    use intops;                -- use  package of integer operations

    procedure create(n); 
        val := n; 
        sum := sum_op; 
        invert := invert_op; 
        maker := make_op; 
        self_str := selfstr_op; 
    end create;

    procedure make_op(n); 
        return int_obj(n); 
    end make_op;
    
end int_obj;

class  matrix;                -- matricess, as a second sample class of algebraic object
    inherit algebraic;        -- we inherit from the more general 'algebraic' class
    procedure create(m);
end matrix;

class body matrix;
    use matrix_ops;            -- use  package of matrix operations

    procedure create(m); 
        val := m; 
        sum := sum_op; 
        invert := invert_op; 
        maker := make_op; 
        self_str := selfstr_op; 
    end create;

    procedure make_op(m); 
        return matrix(m); 
    end make_op;

end matrix;

program main;
    use int_obj, matrix;
    print(30 + int_obj(333)); 
    print(int_obj(30) - int_obj(333)); 
    print(int_obj(30) - 333);
    m:= matrix([[1,2],[3,4]]);
    print(m); 
    print(-m); 
    m2 := m  + m;
    print(m2);
    print(m2 - m);
end main;
