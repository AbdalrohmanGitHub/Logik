program main;

    -- test input
    M := [[1.0,1.0,5.2345,3.234],[1.0,2.02345,6.66,4.756],[11.0,32.0,6.662345,14.7234556]]; 
    solution := Gauss(M);
    -- checking  the solution
    print([-M(row)(#M + 1) +/ [M(row)(col) * solution(col):  col in [1..#M]]: row in [1..#M]]);	

    -- Solves equations by Gaussian elimination.
    procedure Gauss(M);                    
        const eps := 1.0E-7;
        solution  := [];                    -- Initialize solutions to be built.
        varSet    := {1 .. #M};             -- Initially, all variables need to be processed.
        varOrder  := [];                    -- This tuple will record the order in which variables are processed.
        for row in [1 .. #M] loop           -- Process rows one after another.
            if not (exists column in varSet | abs(M(row)(column)) >= eps) then
                return OM;                  -- Since system is singular.
            end if;    
            for j in [row + 1 .. #M] loop
                factor := M(j)(column) / M(row)(column); -- Amount to be subtracted.
                for col in varSet + { #M + 1 } loop 
                    M(j)(col) -:= factor * M(row)(col); 
                end loop;
            end loop;
            varOrder +:= [ column ];       -- Note variable just processed
            varSet   -:= { column };       -- and exclude it from further processing.                               
        end loop;
        -- Next we work through the variables in the reverse order from that in which they were initially processed
        -- Note that at this point the set varSet has become empty.
        for row in [#M, #M - 1 .. 1] loop
            column           := varOrder(row);
            solution(column) := (M(row)(#M + 1) -/ [solution(col) * M(row)(col): col in varSet]) / M(row)(column);
            varSet          +:= { column };
        end loop;
        return solution;
    end Gauss;

end main;