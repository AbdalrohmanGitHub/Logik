program main;
    All := { 0 .. 3 };
    Partitions := { [ A, B, C ] : A in pow All, B in pow All, C in pow All | 
                                  A * B = {} and A * C = {} and B * C = {} and A + B + C = All };
    print(#Partitions);
    P := { [LA,LB,LC] : [A,B,C] in Partitions, 
                        LA in toList(A), LB in toList(B), LC in toList(C) };

    print(#P);
    -- print("Possible states:\n");
    -- for [A, B, C] in P loop
    --     printState(A, B, C);
    -- end loop;
    -- print("\n");

    -- RACeast is the set of those transitions, where the locomotive goes from railtrack A 
    -- to railtrack C using the railtracks in the east.
    RACeast := { [ [ A, B, C ], [ A(1..k-1), B, C + reverse(A(k..)) ] ] 
               : [ A,B,C ] in P, k in {1 .. #A } | 0 in A(k..)
               };
    print(#RACeast);
    -- print("RACeast:\n");
    -- for [[A1, B1, C1], [A2, B2, C2]] in RACeast loop
    --     printState(A1, B1, C1);
    --     printState(A2, B2, C2);
    --     print();
    -- end loop;
    -- print("\n");

    -- RACwest is the set of those transitions, where the locomotive goes from railtrack A 
    -- to railtrack C using the railtracks in the west.
    RACwest := { [ [ A, B, C ], [ A(k+1..), B, reverse(A(1..k)) + C ] ] 
               : [ A,B,C ] in P, k in {1 .. #A } | 0 in A(1..k)
               };
    print(#RACwest);
    -- print("RACwest:\n");
    -- for [[A1, B1, C1], [A2, B2, C2]] in RACwest loop
    --     printState(A1, B1, C1);
    --     printState(A2, B2, C2);
    --     print();
    -- end loop;
    -- print("\n");

    RAC := RACeast + RACwest;
    RCA := inverse(RAC);

    -- RBC is the set of those transitions, where the locomotive goes from railtrack B 
    -- to railtrack C.
    RBC := { [ [ A, B, C ], [ A, B(1..k-1), B(k..) + C ] ] 
           : [ A,B,C ] in P, k in {1 .. #B } | 0 in B(k..)
           };
    -- print("RBC:\n");
    -- for [[A1, B1, C1], [A2, B2, C2]] in RBC loop
    --     printState(A1, B1, C1);
    --     printState(A2, B2, C2);
    --     print();
    -- end loop;
    -- print("\n");

    RCB := inverse(RBC);

    -- R is the union of all transition relations.
    R := RAC + RCA + RBC + RCB;

    print("#R = ", #R);

    -- At the beginning, all wagons are on railtrack A and the locomotive is on railtrack B.
    start := [ [1,2,3], [0], [] ];
    -- The goal is to put the wagons in the sequence 3, 1, 2 onto railtrack C.  THe locomotive 
    -- has to go back to railtrack B.
    goal := [ [], [0], [3,1,2] ];
    -- Compute all paths
    path  := reachable(start, goal, R);
    -- and print them step by step.
    printPath(path);

    -- Check wether there is a path from x to y in R and compute it.
    -- Take care to keep only one path leading to a point.
    procedure reachable(x, y, R);
        -- P contains all new pathes.
        P := { [x] };
        loop
            Old_P := P;
            P     := path_product(P, R);
            print("#P = ", #P, " length = ", max/ { #l : l in P } );
            -- M contains all end points of known pathes.
            M     := { p(#p) : p in P };  
            -- P is reduced so that there is only on path leading to a given end point.
            P     := { arb { p in P | p(#p) = x } : x in M };
            print("#P = ", #P);
            Found := { p in P | p(1) = x and p(#p) = y };
            if Found /= {} then
                return arb Found;
            end if;
            if P = Old_P then
                return;
            end if;
        end loop;
    end reachable;

    -- The procedure call product(P, Q) computes the path product P * Q.
    procedure path_product(P, Q);
        return { add(p,q) : p in P, q in Q | p(#p) = q(1) and not cyclic(add(p,q)) };
    end path_product;    

    -- The procedure not_cyclic(p) checks whether the path p is cyclic.
    procedure cyclic(p);
        return #{ x : x in p } < #p;
    end cyclic;

    -- The product call add(p,q) computes the sum of the lists p and q.
    -- The last point of p has to be the first point of q.
    procedure add(p, q);
        return p + q(2..);
    end add;    
    
    -- Given a set S, this procedure returns a set containing all lists that contain
    -- each element of S exactly once. 
    procedure toList(S);
        if S = {} then
            return { [] };
        end if;
        return { [ x ] + l : x in S, l in toList(S - { x }) };
    end toList;

    -- This procedure reverses the given list.
    procedure reverse(L);
        n := #L;
        return [ L(n-i) : i in [ 0 .. n-1 ] ]; 
    end reverse;

    -- This procedure computes the inverse of the binary relation R.
    procedure inverse(R);
        return { [ y, x ] : [ x, y ] in R };
    end inverse;

    --------------------------------------------------------------------------
    --                                                                      --
    -- These procedures print the solution.                                 --
    --                                                                      --
    --------------------------------------------------------------------------    

    -- Print the given path.
    procedure printPath(path);
        print("Solution:\n");
        for [A, B, C] in path loop
            printState(A, B, C);
        end loop;
    end printPath;

    procedure printState(A, B, C);
        print("A: ", A, "; B: ", B, "; C: ", C);
    end printState;    
end main;

