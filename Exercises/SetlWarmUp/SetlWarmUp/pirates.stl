program main;

    S := { n in { 1 .. 99 } | divideFourTimes(n) };
        
    print(S);
    n := arb(S);
    print("At the beginning there are ", n, " coconuts.");
    print("After the first  division, there are ", divide_k_times(n, 1), " coconuts.");
    print("After the second division, there are ", divide_k_times(n, 2), " coconuts.");
    print("After the third  division, there are ", divide_k_times(n, 3), " coconuts.");
    print("When the coconuts are divided in the morning, everybody gets ", divide_k_times(n, 3) / 3, " coconuts.");

    -- THe argument n is the amount of coconuts.  The procedure divideFourTimes(n,k)
    -- checks, whether the rest is one if the number n is divided up four times according to
    -- the procedure given in the exercise.
    procedure divideFourTimes(n);
        return forall k in { 0 .. 3} | divide_k_times(n, k) mod 3 = 1;
    end divideFourTimes;

    -- This procedure divides the set of coconuts k times in the way described in the 
    -- exercise. The argument n is the number of coconuts.
    procedure divide_k_times(n, k);
        for i in { 1 .. k } loop
            n := divide(n);
        end loop;
        return n;
    end divide_k_times;

    -- The argument n is the number of coconuts.  First, one coconut is removed.
    -- Next, a third is removed.
    procedure divide(n);
        m := n - 1;    -- one coconut for the monkey
        r := m - m/3;  -- one third for the pirate
        return r;
    end divide;

end main;
