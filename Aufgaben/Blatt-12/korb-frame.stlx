// load("graph-2-dot.stlx");
// Es war einmal ein König, der wog 195 Pfund, und seine Tochter, die Prinzessin, wog 105 Pfund. Der
// Diener der Prinzessin war noch ein Kind und wog nur 90 Pfund. Dies alles wird so genau berichtet,
// weil es eine große Rolle spielte, als die drei eines Tages fliehen mußten. Sie gerieten auf der
// Flucht in einen Wald und versteckten sich dort in einem Turm. Unglücklicherweise brach beim
// Besteigen des Turmes die Treppe unter dem schwergewichtigen König zusammen, so daß die drei
// oben festsaßen. Als der König aber zufällig aus dem Turmfenster blickte, sah er, daß außen an der
// Mauer ein Mechanismus angebracht war, der den Heuaufzügen glich, welche die Bauern an ihren Scheunen
// haben. In der Tat handelte es sich um einen doppelten Korbaufzug. Hoch oben am Dach des Turmes war
// eine Rolle befestigt, über die ein dickes Seil lief. Ein Korb fand sich direkt unter dem Fenster,
// und der andere berührte unten den Boden. Die Prinzessin entdeckte auch eine Inschrift neben dem
// Fenster, welche besagte, daß bei der Personenbeförderung ein Gewichtsunterschied von maximal
// 15 Pfund zwischen den beiden Körben erlaubt sei.  Wäre der Unterschied größer, so würde der
// schwerere Korb so schnell nach unten rauschen, dass die Passagiere dies nicht überleben würden.
// Glücklicherweise befand sich oben auf dem Turm noch eine Stahlkugel, die ein Gewicht von 75
// Pfund hatte.  Wie gelang es dem König, den Turm zu verlassen.  

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// Die unten aufgeführten Prozeduren sind 1-zu-1 aus dem Programm zur   //
// Lösung des Wolf-Ziege-Kohl-Problems kopiert.                         //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

// Check wether there is a path from x to y in R and compute it.
findPath := procedure(x, y, R) {
    p := { [x] };
    while (true) {
        oldP  := p;
        p     := p + pathProduct(p, R);
        Found := { l : l in p | l[#l] == y };
        if (Found != {}) {
            return arb(Found);
        }
        if (p == oldP) {
            return;
        }
    }
};

// The procedure call product(p, q) computes the path product p * q.
pathProduct := procedure(p, q) {
    return { add(x,y) : x in p, y in q | x[#x] == y[1] && !cyclic(add(x,y)) };
};

// The procedure not_cyclic(p) checks whether the path p is cyclic.
cyclic := procedure(p) {
    return #{ x : x in p } < #p;
};

// The product call add(p,q) computes the sum of the lists p and q.
// The last point of p has to be the first point of q.
add := procedure(p, q) {
    return p + q[2..];
};

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// Ab hier beginnt der Code zur Lösung des Problems.                    //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

All    := { "Koenig", "Tochter", "Diener", "Kugel" };
Weight := { ["Koenig", 195], ["Tochter", 105], ["Diener", 90], ["Kugel", 75] };

// Given a set of objects M, this function computes the weight of the set M.
weightSet := closure(M) {
    return "your code here."
};
// Ein Zustand ist die Menge der Personen, die oben auf dem Turm sind.
P := "???";  
// r beschreibt Zustandsübergänge.
R := "???";

// Am Anfang sind alle oben auf dem Turm.
start := "???";
// Am Ende ist keiner mehr oben auf dem Turm.
goal  := "???;

// Die grafische Darstellung der Relation. Funktioniert nur, wenn Sie dot installiert haben!
// graph := {[[M1, All - M1], [M2, All - M2]] : [M1, M2] in R};
// graph2Dot(graph, [start, {}], [goal, All], "korb");

// Berechne einen Pfad
Path  := findPath(start, goal, R);

// Print the path.
printPath := procedure(Path, All) {
    for (i in [1 .. #Path]) {
        Oben  := Path[i];
        Unten := All - Oben;
        if (#Oben == 0 || #Unten == 0) {
            print(Oben, 63 * " ", Unten);
        } else {
            print(Oben, 65 * " ", Unten);
        }
        if (i == #Path) { 
            break;
        }
        Down := Path[i] - Path[i+1];
        Up   := (All - Path[i]) - (All - Path[i+1]);
        print(" " * 40, "vvvvv", " " * 15, "^^^^^^");
        if (Up != {}) {
            print(" " * 38,  Down, " " * 10, Up);
        } else {
            print(" " * 38,  Down, " " * 15, Up);
        }
        print(" " * 40, "vvvvv", " " * 15, "^^^^^^");
    }
};
printPath(Path, All);

