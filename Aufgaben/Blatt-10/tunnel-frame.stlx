// This procedure computes the fastest path from start to goal. The parameter
// rltn is a set of pairs.  If the pair [x,y] is an element of rltn, then
// there is a transition from state x to state y.  The implementation assumes
// that there is a function timePath available that computes the time that
// is needed for a given path.
findFastestPath := procedure(start, goal, rltn) {
    paths    := { [start] };
    oldPaths := {};                    // explored states
    fastest  := mathConst("infinity"); // fastest time so far
    while (paths != oldPaths) {
        oldPaths := paths;
        paths    += { l : l in pathProduct(paths, rltn)
                        | timePath(l) < fastest
                    };
        print(#paths);
        if (goal in { l[-1] : l in paths }) {
            fastest := min({ timePath(l) : l in paths | l[-1] == goal });
        }
    }
    if (fastest == mathConst("infinity")) {
        print("No solution found!");
        return;  // return Omega
    }
    // return a fastest path otherwise
    return arb({ l : l in paths | l[-1] == goal && timePath(l) == fastest });
};
pathProduct := procedure(paths, rltn) {
    return { l+[z] : l in paths, [y,z] in rltn | l[-1] == y };
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// Die folgenden Prozeduren dienen dem Ausdrucken und dem Berechnen eines     //
// Pfades.                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

// Druckt den Pfad aus
printPath := procedure(list, all) {
    timeNeeded := { ["Alice", 1], ["Britney", 2], ["Charly", 4], ["Daniel", 5] };
    time := 0;  // elapsed time
    for (i in [1 .. #list]) {
        left  := list[i];
        right := all - left;
        if (left == {} || right == {}) {
            print(left, " " * 68, right, "   // ", time);
        } else {
            print(left, " " * 70, right, "   // ", time);
        }
        if (i < #list) {
            time += timeTransition(list[i], list[i+1]);
            if ("Torch" in list[i]) {
                print(" " * 40, ">>> ", list[i] - list[i+1], " >>>");
            } else {
                print(" " * 40, "<<< ", list[i+1] - list[i], " <<<");
            }
        }
    }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// Starting from here you have to implement the procedures describing the     //
// problem.                                                                   //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

// Four persons, Alice, Britney, Charly and Daniel have to cross a tunnel.
// The tunnel is so narrow, that at most two persons can cross it together.
// In order to cross the tunnel, a torch is needed.  Together, they only
// have a single torch.
// 1. Alice   is the fastest and can cross the tunnel in 1 minute.
// 2. Britney needs 2 minutes to cross the tunnel.
// 3. Charly  is slower and needs 4 minutes.
// 4. Daniel  is slowest and takes 5 minutes to cross the tunnel.
// Their torch will only last 12 minutes.  Can they make it?
All := { "Alice", "Britney", "Charly", "Daniel", "Torch" };
// Given the set S of those people walking through the tunnel, this procedure
// computes the time that is needed by the group S to cross the tunnel.
// Note that the set S will also contain the torch.
timeSet := procedure(S) {
    // timeNeeded ist eine functional relation storing the time that
    // differen persons need to cross the tunnel.
    timeNeeded := { ["Alice", 1], ["Britney", 2], ["Charly", 4], ["Daniel", 5] };
    // Your code here.
};
// This function computes the time needed for the transition from
// lhsBefore to lhsAfter.  Here, lhsBefore is the set of those people
// that are at the tunnel entry before the transition, while
// lhsAfter is the set of those people that are at the tunnel entry
// after the crossing.
timeTransition := procedure(stateBefore, stateAfter) {
    All := { "Alice", "Britney", "Charly", "Daniel", "Torch" };





    
};
// This procedure computes the time needed for the path L given as argument.
timePath := procedure(L) {



    
};

// states is the set of all states.  A single state is represented by the
// subset of those people at the entrance of the tunnel.  Note that this set
// might also contain the torch.
States := "?";
// The relation R1 describes the crossings from the entry of the tunnel to the exit.
R1 := "?";
// The relation R2 describes the crossings from the exit of the tunnel to the entry.
R2 := "?"
R  := R1 + R2;
// At the start, everybody is at the entrance of the tunnel,
start := "?";
// In the end, everybody should be at the exit.
goal  := "?";
// Compute the path.
path := findFastestPath(start, goal, r);
print("Total time needed: " + timePath(path));
// Print the path step by step
printPath(path, all);
print("Time needed to compute solution: $finishTime - startTime$");




