loadLibrary("termUtilities");
load("knf.stlx");
load("davis-putnam.stlx");

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// Die folgende Aufgabe ist dem Buch "99 Logeleien von Zweistein", das im     //
// Jahre 1968 erschienen ist, entnommen.                                      //
//                                                                            //
// Die Herren Amann, Bemann, Cemann und Demann heissen – nicht unbedingt      //
// in derselben Reihenfolge – mit Vornamen Erich, Fritz, Gustav und Heinrich. //
// Sie sind alle verheiratet. Ausserdem weiss man über sie und ihre Ehefrauen //
// noch dies:                                                                 //
//     1. Entweder ist Amanns Vorname Heinrich, oder Bemanns Frau heisst      //
//        Inge.                                                               //
//     2. Wenn Cemann mit Josefa verheiratet ist, dann – und nur in diesem    //
//        Falle – heisst Klaras Mann nicht Fritz.                             //
//     3. Wenn Josefas Mann nicht Erich heisst, dann ist Inge mit Fritz       //
//        verheiratet.                                                        //
//     3. Wenn Luises Mann Fritz heisst, dann ist der Vorname von Klaras Mann //
//        nicht Gustav.                                                       //
//     4. Wenn die Frau Von Fritz Inge heisst, dann ist Erich nicht mit       //
//        Josefa verheiratet.                                                 //
//     5. Wenn Fritz nicht mit Luise verheiratet ist, dann heisst Gustavs     //
//        Frau Klara.                                                         //
//     6. Entweder ist Demann mit Luise verheiratet, oder Cemann heisst       //
//        Gustav.                                                             //
// Wie heissen die Herren mit vollem Namen, wie ihre Ehefrauen mit Vornamen?  //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

// Aussagenlogische Variablen:
//
// 1. @Name(vorname, nachname) wobei vorname  in { "Erich", "Fritz", "Gustav", "Heiner" },
//                                   nachname in { "Amann", "Bemann", "Cemann", "Demann" }
//    @Name(x, y) ist wahr, falls Herr y mit Vornamen x heisst.
//
// 2. @Ehe(mann, frau) wobei mann in { "Erich",  "Fritz", "Gustav", "Heiner" },
//                           frau in {  "Inge", "Josefa",  "Klara",  "Luise" }

// S is a set of propositional variables. The expression atMostOne(S) creates
// a set of clauses.  This set expresses the fact that at most one of the
// variables in the set S is true.
atMostOne := procedure(S) {
    return "your code here"
};
// S is a set of propositional variables. The expression atMostOne(S) creates
// a set of clauses.  This set expresses the fact that at least one of the
// variables in the set S is true.
atLeastOne := procedure(S) {
    return "your code here";
};
// S is a set of propositional variables. The expression exactlyOne(S) creates
// a set of clauses.  This set expresses the fact that exactly one of the
// variables in the set S is true.
exactlyOne := procedure(S) {
    return "your code here";
};
// For two sets A and B that have the same number of elements and a functor name
// f, this procedure computes a set of clauses that is equivalent to the formula
//   forall(x in A, existsExactlyOne(y in B | @f(x, y))) &&
//   forall(y in B, existsExactlyOne(x in A | @f(x, y)))
bijective := procedure(A, B, f) {
    Clauses := {};
    for (x in A) {
        PropVars := { makeTerm(f, [x, y]) : y in B };
        Clauses  += "your code here";
    }
    for (y in B) {
        PropVars := { makeTerm(f, [x, y]) : x in A };
        Clauses  += "your code here";
    }
    return Clauses;
};               
// Return a formula that is true if y is the wife of z.
// z is the last name of one of the men.
isWifeOf := procedure(y, z) {
    Vornamen := { "Erich",  "Fritz", "Gustav", "Heiner" };
    return setToFormula({ @Name(x,z) => @Ehe(x, y) : x in Vornamen });
};
// Convert a set of formulae S to a conjunction of these formulae.
setToFormula := procedure(S) {
    if (#S == 1) {
        return arb(S);
    }
    f := first(S);
    return f && setToFormula(S - { f });
};
// Compute the exclusive or of the two formulae a and b.
// The resulting formula itself is converted into CNF.
exclusiveOr := procedure(a, b) {
    return normalize("your code here");
};
computeClauses := procedure() {
    Vornamen  := { "Erich",  "Fritz", "Gustav", "Heiner" };
    Nachnamen := { "Amann", "Bemann", "Cemann", "Demann" };
    Frauen    := { "Inge",  "Josefa", "Klara",  "Luise"  };
    // Jedem Vornamen ist genau ein Nachname zugeordnet und umgekehrt.
    Clauses := "your code here";
    // Jeder Mann ist mit genau einer Frau verheiratet und umgekehrt.
    Clauses += "your code here";
    // Entweder ist Amanns Vorname Heiner, oder Bemanns Frau heisst Inge.
    Clauses += exclusiveOr(@Name("Heiner", "Amann"), isWifeOf("Inge", "Bemann"));
    // Wenn Cemann mit Josefa verheiratet ist, dann – und nur in diesem Falle –
    // heisst Klaras Mann nicht Fritz.
    Clauses += normalize("your code here");
    // Wenn Josefas Mann nicht Erich heisst, dann ist Inge mit Fritz verheiratet.
    Clauses += normalize("your code here");
    // Wenn Luises Mann Fritz heisst, dann ist der Vorname von Klaras Mann nicht Gustav.
    Clauses += normalize("your code here");
    // Wenn die Frau von Fritz Inge heisst, dann ist Erich nicht mit Josefa verheiratet.
    Clauses += normalize("your code here");
    // Wenn Fritz nicht mit Luise verheiratet ist, dann heisst Gustavs Frau Klara.
    Clauses += normalize("your code here");
    // Entweder ist Demann mit Luise verheiratet, oder Cemann heisst Gustav.
    Clauses += exclusiveOr("your code here");
    return Clauses;
};
solve := procedure() {
    Clauses := computeClauses();
    Result  := davisPutnam(Clauses, {});
    displaySolution(Result);
    checkUniqueness(Clauses, Result);
};
// Check, whether the set of unit clauses result is the only solution for the given
// set of clauses.
checkUniqueness := procedure(Clauses, Result) {
    NegatedSolution := { negateLiteral(arb(U)) : U in Result };
    SecondSolution := davisPutnam(Clauses + { NegatedSolution }, {});
    if (SecondSolution != {{}}) {
        print("The solution is not unique!  A second solution is as follows:");
        displaySolution(SecondSolution);
    } else {
        print("The solution is unique!");
    }
};
// Pretty print the solution.
displaySolution := procedure(Solution) {
    Married := {};
    Names   := {};
    for (U in Solution) {
        match (arb(U)) {
            case @Ehe(x, y):  Married[x] := y;
            case @Name(x, y): Names[x]   := y;
        }
    }
    for ([x, y] in Married) {
        print("$x$ $Names[x]$ is married to $y$.");
    }
};
solve();
