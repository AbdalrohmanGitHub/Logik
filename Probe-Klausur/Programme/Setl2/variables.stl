program main;

    var mTokenList; -- list of all tokens 
    var mIndex;     -- index to the next token


    testVars("(x + y) * (x + y) + z", "x");

    procedure allVars(E);
        Operators := {"+", "-", "*", "/"};
        case
            when is_string(E)      => return { E };
            when E(2) in Operators => return allVars(E(1)) + allVars(E(3));
            otherwise              => abort("Error in allVars(" + E + ")");
        end case;
    end allVars;

    procedure countVars(E, x);
        Operators := {"+", "-", "*", "/"};
        case
            when x = E             => return 1;
            when is_string(E)      => return 0;
            when E(2) in Operators => return countVars(E(1), x) + countVars(E(3), x);
            otherwise              => abort("Error in countVars(" + E + ")");
        end case;
    end countVars;

    procedure singleVars(E);
        return { x in allVars(E) | countVars(E,x) = 1 };
    end singleVars;    

    procedure testVars(E,x);
        mTokenList := scanExpr(E);
        mIndex     := 1;
        Expr       := parseExpr();
        print("   allVars( ", prettyPrint(Expr),          ") = ", allVars(Expr));
        print(" countVars( ", prettyPrint(Expr), ", ", x, ") = ", countVars(Expr, x));
        print("singleVars( ", prettyPrint(Expr),          ") = ", singleVars(Expr));
        print("\n");
    end testVars;

    --------------------------------------------------------------------------------
    -- Die folgenden Prozeduren dienen der Ausgabe von arithmetischen Ausdrücken. --
    --------------------------------------------------------------------------------

    -- Wandelt einen arithmetischen Ausdruck in einen String um.
    procedure prettyPrint(Expr);
        case 
            when isVariable(Expr) => return Expr;
            when is_integer(Expr) => return str(Expr);
            when is_real(Expr)    => return str(Expr);
            when #Expr = 3 and Expr(2) = "+"      => return prettyPrint(Expr(1)) + " + " + prettyPrint(Expr(3));
            when #Expr = 3 and Expr(2) = "-"      => return prettyPrint(Expr(1)) + " - " + prettyPrintParen(Expr(3));
            when #Expr = 3 and Expr(2) = "*"      => return prettyPrintParen(Expr(1)) + " * " + prettyPrintParen(Expr(3));
            when #Expr = 3 and Expr(2) = "/"      => return prettyPrintParen(Expr(1)) + " / " + prettyPrintParen(Expr(3));
            when #Expr = 3 and Expr(2) = "**"     => return prettyPrintParen(Expr(1)) + " ** " + prettyPrintParen(Expr(3));
            when #Expr = 2 and Expr(1) = "-"      => return  "- " + prettyPrintParen(Expr(2));
            when #Expr = 2 and Expr(1) = "+"      => return prettyPrint(Expr(2));
            when #Expr = 2 and Expr(1) = "sin"    => return "sin(" + prettyPrint(Expr(2)) +")";
            when #Expr = 2 and Expr(1) = "cos"    => return "cos(" + prettyPrint(Expr(2)) +")";
            when #Expr = 2 and Expr(1) = "tan"    => return "tan(" + prettyPrint(Expr(2)) +")";
            when #Expr = 2 and Expr(1) = "sqrt"   => return "sqrt(" + prettyPrint(Expr(2)) +")";
            when #Expr = 2 and Expr(1) = "arcsin" => return "arcsin(" + prettyPrint(Expr(2)) +")";
            when #Expr = 2 and Expr(1) = "arccos" => return "arccos(" + prettyPrint(Expr(2)) +")";
            when #Expr = 2 and Expr(1) = "arctan" => return "arctan(" + prettyPrint(Expr(2)) +")";
            when #Expr = 2 and Expr(1) = "exp"    => return "exp(" + prettyPrint(Expr(2)) +")";
            when #Expr = 2 and Expr(1) = "ln"     => return "ln(" + prettyPrint(Expr(2)) +")";
            otherwise =>
                abort("Error in prettyPrint( " + str(Expr) + " )");
        end case;
    end prettyPrint;

    -- Wandelt den arithmetischen Ausdruck in einen String um, der von Klammern
    -- umgeben ist, falls das nötig ist.
    procedure prettyPrintParen(Expr);
        FunctionNames := { "sin", "cos", "tan", "sqrt", "arcsin", "arccos", "arctan", "exp", "ln" };
        case 
            when isVariable(Expr) => return Expr;
            when is_integer(Expr) => return str(Expr);
            when is_real(Expr)    => return str(Expr);
            when #Expr = 2 and Expr(1) in FunctionNames =>
                 return prettyPrint(Expr);
            otherwise             =>
                 return "(" + prettyPrint(Expr) + ")";
        end case;
    end prettyPrintParen;

    -- Testet, ob Expr eine Variable ist.
    procedure isVariable(Expr);
        return is_string(Expr);
     end isVariable;

    ------------------------------------------------------------------------------
    -- Die restlichen Prozeduren dienen dem Einlesen arithmetischer Ausdrücke.  --
    ------------------------------------------------------------------------------

    -- Diese Prozedur wandelt die Liste der Tokens mTokenList in die interne 
    -- Darstellung eines arithmetischen Ausdrucks um.
    -- Die Art und Weise, wie arithmetische Ausdrücke in SETL repräsentiert
    -- werden, ist im Kommentar der Prozedur diff(Expr, X) beschrieben.
    -- Dabei wir die folgende Grammatik verwendet:
    --
    --                  expr        : product exprRest;
    --
    --                  exprRest    : "+" product exprRest
    --                              | "-" product exprRest
    --                              | /* epsilon */
    --                              ;
    --
    --                  product     : power productRest;
    --
    --                  productRest : "*" power productRest
    --                              | "/" power productRest
    --                              | /* epsilon */
    --                              ;    
    -- 
    --                  power       : factor "**" power
    --                              | factor
    --                              ;
    -- 
    --                  factor      : "(" expr ")"
    --                              | "exp" "(" expr ")"
    --                              | "ln"  "(" expr ")"
    --                              | "sqrt" "(" expr ")"
    --                              | "sin" "(" expr ")"
    --                              | "cos" "(" expr ")"
    --                              | "tan" "(" expr ")"
    --                              | "arctan" "(" expr ")"
    --                              | NUMBER
    --                              | IDENTIFIER
    --                              ;
    --
    procedure parseExpr();
        product := parseProduct();
        result  := parseExprRest(product);
    	if mTokenList(mIndex) =")" then 
	    return result;
        end if;
	if #mTokenList + 1 /= mIndex then
            print("mTokenList = ", mTokenList);
            print("mIndex     = ", mIndex);
            print("result     = ", result);
            abort("Parse Error");
        end if;
	return result; 
    end parseExpr;    

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --                  exprRest    : "+" product exprRest
    --                              | "-" product exprRest
    --                              | /* epsilon */
    --                              ;
    procedure parseExprRest(sum);
        if check("+") then
            product := parseProduct();
            return parseExprRest([ sum, "+", product ]);
        end if;
        if check("-") then
            product := parseProduct();
            return parseExprRest([ sum, "-", product ]);
        end if;
        return sum;
    end parseExprRest;

    -- Diese Prozedur implementiert die folgende Grammatik-Regel:
    --                 product : power productRest ;
    procedure parseProduct();
        power := parsePower();
        return parseProductRest(power);
    end parseProduct;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --                  productRest : "*" power productRest
    --                              | "/" power productRest
    --                              | /* epsilon */
    --                              ;    
    procedure parseProductRest(product);
        if check("*") then
            power := parsePower();
            return parseProductRest([ product, "*", power ]);
        end if;
        if check("/") then
            power := parsePower();
            return parseProductRest([ product, "/", power ]);
        end if;
        -- epsilon
        return product;
    end parseProductRest;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --                  power       : factor "**" power
    --                              | factor
    --                              ;
    procedure parsePower();
        factor := parseFactor();
        if check("**") then
            power := parsePower();
            return [ factor, "**", power ];
        end if;
        return factor;
    end parsePower;

    -- Diese Prozedur implementiert die folgenden Grammatik-Regeln:
    --                  factor      : "(" expr ")"
    --                              | "exp" "(" expr ")"
    --                              | "ln"  "(" expr ")"
    --                              | "sqrt" "(" expr ")"
    --                              | "sin" "(" expr ")"
    --                              | "cos" "(" expr ")"
    --                              | "tan" "(" expr ")"
    --                              | "arctan" "(" expr ")"
    --                              | NUMBER
    --                              | IDENTIFIER
    --                              ;
    procedure parseFactor();
        if check("(") then
            expr := parseExpr();
            if not check(")") then
                abort("Parse Error, ')' expected");
            end if;
            return expr;    
        end if;
        if check("exp") then
            if not check("(") then
                abort("Parse Error, '(' expected");
            end if;
            expr := parseExpr();
            if not check(")") then
                abort("Parse Error, ')' expected");
            end if;
            return [ "exp", expr ];    
        end if;
        if check("ln") then
            if not check("(") then
                abort("Parse Error, '(' expected");
            end if;
            expr := parseExpr();
            if not check(")") then
                abort("Parse Error, ')' expected");
            end if;
            return [ "ln", expr ];    
        end if;
        if check("sqrt") then
            if not check("(") then
                abort("Parse Error, '(' expected");
            end if;
            expr := parseExpr();
            if not check(")") then
                abort("Parse Error, ')' expected");
            end if;
            return [ "sqrt", expr ];    
        end if;
        if check("sin") then
            if not check("(") then
                abort("Parse Error, '(' expected");
            end if;
            expr := parseExpr();
            if not check(")") then
                abort("Parse Error, ')' expected");
            end if;
            return [ "sin", expr ];    
        end if;
        if check("cos") then
            if not check("(") then
                abort("Parse Error, '(' expected");
            end if;
            expr := parseExpr();
            if not check(")") then
                abort("Parse Error, ')' expected");
            end if;
            return [ "cos", expr ];    
        end if;
        if check("tan") then
            if not check("(") then
                abort("Parse Error, '(' expected");
            end if;
            expr := parseExpr();
            if not check(")") then
                abort("Parse Error, ')' expected");
            end if;
            return [ "tan", expr ];    
        end if;
        if check("arctan") then
            if not check("(") then
                abort("Parse Error, '(' expected");
            end if;
            expr := parseExpr();
            if not check(")") then
                abort("Parse Error, ')' expected");
            end if;
            return [ "arctan", expr ];    
        end if;
        if is_string(mTokenList(mIndex)) then
            result := mTokenList(mIndex);
            mIndex := mIndex + 1;
            return result;
        end if;
        if is_integer(mTokenList(mIndex)) then
            result := mTokenList(mIndex);    
            mIndex := mIndex + 1;
            return result;
        end if;
        abort("Parse Error in parseFactor,");
    end parseFactor;

    -- Überprüfe, ob als nächstes token in der Eingabe steht.
    procedure check(token);
        -- no tokens left
        if mIndex > #mTokenList then
            return false;
        end if;
        if mTokenList(mIndex) = token then
            mIndex := mIndex + 1;
            return true;
        end if;
        return false;
    end check;

    -- Liest einen String und zerlegt ihn in eine Liste von Tokens, die zurück
    -- gegeben wird.
    procedure scanExpr(s);
        letters := {};
        -- collect all letters and digits
        for x in { 46 } + { 48 .. 57 } + { 65 .. 90 } + { 97 .. 122 } loop
            letters := letters + { char(x) };
        end loop;
        case 
            when #s > 1 and s(1..2) = "**" => 
                 return [ "**" ] + scanExpr( s(3..) );
            when s    = ""   => return [];
            when s(1) = "("  => return [ "("  ] + scanExpr( s(2..) );
            when s(1) = ")"  => return [ ")"  ] + scanExpr( s(2..) );
            when s(1) = "+"  => return [ "+"  ] + scanExpr( s(2..) );
            when s(1) = "-"  => return [ "-"  ] + scanExpr( s(2..) );
            when s(1) = "*"  => return [ "*"  ] + scanExpr( s(2..) );
            when s(1) = "/"  => return [ "/"  ] + scanExpr( s(2..) );
            when s(1) = " "  => return            scanExpr( s(2..) );
            when s(1) = "\t" => return            scanExpr( s(2..) );
            when s(1) = "\n" => return            scanExpr( s(2..) );
        end case;
        index := 1;
        word  := "";
        if s(index) notin letters then
            abort("Error in scanExpr(" + s + ")");
        end if;
        while s(index) in letters and index < #s loop
            index := index + 1;
        end loop;
        if onlyDigits( s(1 .. index-1) ) then
            token := ascii2int( s(1 .. index-1) );
        else
            token := s(1 .. index-1);
        end if;
        if not s(index) in letters then
            return [ token ] + scanExpr( s(index ..) );
        end if;
        if index = #s then
            if onlyDigits( s(1 .. index) ) then
                token := ascii2int( s(1 .. index) );
            else
                token := s(1 .. index);
            end if;
            return [ token ];
        end if;
        abort( "Error in scanExpr: s = " + s );
    end scanExpr;

    -- Der Aufruf onlyDigits(s) liefert genau dann true, wenn der String "s" 
    -- nur aus den Ziffern "0", ..., "9" besteht.
    procedure onlyDigits(s);
        return { s(i) : i in [1..#s] } <= { char(i) : i in [abs("0")..abs("9")] };
    end onlyDigits;

    -- Wandelt den gegebenen String, der nur aus Ziffern bestehen darf, in
    -- eine ganze Zahl um.
    procedure ascii2int(s);
        -- Die Funktion abs c berechnet den ASCII-Code, der dem Zeichen c
        -- zugeordnet ist.
        return +/ [ (abs(s(i)) - abs("0")) * 10 ** (#s - i) : i in [1..#s] ];
    end ascii2int;

end main;