loadLibrary("termUtilities");
// Test, ob Formel f eine Tautologie ist.  Falls f keine Tautologie
// ist, dann wird eine Belegung I zurück gegeben, so dass evaluate(f, I)
// den Wert false ergibt.
tautology := procedure(f) {
    P := collectVars(f);
    // A is the set of all propositional valuations.
    A := { { [x, x in M] : x in P } : M in 2 ** P };
    if (forall (I in A | evaluate(f, I))) {
        return true;
    } else {
        return arb({ I : I in A | !evaluate(f, I) });
    }
};
// This function collects all propositional variables occurring in 
// the propositional formula f.
collectVars := procedure(f) {
    match (f) {
        case true:              return {};
        case false:             return {};
        case p | isVariable(p): return { p };
        case !g:                return collectVars(g);
        case g && h:            return collectVars(g) + collectVars(h);
        case g || h:            return collectVars(g) + collectVars(h);
        case g => h:            return collectVars(g) + collectVars(h);
        case g <==> h:          return collectVars(g) + collectVars(h);
        default:                abort("syntax error in collectVars($f$)");
    }
};

evaluate := procedure(f, I) {
    match (f) {
        case true:              return true;
        case false:             return false;
        case p | isVariable(p): return I[p];
        case !g:                return !evaluate(g, I);
        case g && h:            return  evaluate(g, I) && evaluate(h, I);
        case g || h:            return  evaluate(g, I) || evaluate(h, I);
        case g => h:            return  evaluate(g, I) => evaluate(h, I);
        case g <==> h:          return  evaluate(g, I) == evaluate(h, I);
        default:                abort("syntax error in evaluate($f$, $I$)");
    }
};

run := procedure() {
    while (true) {
        print("Enter formula: ");
        s := read();
        if (s == "false") {
            break;
        }
        test(s);
    }
};

test := procedure(s) {
    f := parseTerm(s);
    counterExample := tautology(f);
    if (counterExample == true) {
        print("The formula $f$ is a tautology.");
    } else {
        print("The formula $f$ isn't a tautology.");
        print("Counter example: ", counterExample );
    }
};

test("!(p || q) <==> !p && !q");
test("(p => q) => (!p => q) => q");

run();

    




