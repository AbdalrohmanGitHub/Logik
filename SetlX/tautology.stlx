loadLibrary("termUtilities");
// Test, ob Formel f eine Tautologie ist.  Falls f keine Tautologie
// ist, dann wird eine Belegung I zurück gegeben, so dass evaluate(f, I)
// den Wert false ergibt.
tautology := procedure(F) {
    P := collectVars(F);
    // A is the set of all propositional valuations.
    A := { { [x, x in M] : x in P } : M in 2 ** P };
    if (forall (I in A | evaluate(F, I))) {
        return true;
    } else {
        return arb({ I : I in A | !evaluate(F, I) });
    }
};
// This function collects all propositional variables occurring in 
// the propositional formula f.
collectVars := procedure(F) {
    match (F) {
        case true:              return {};
        case false:             return {};
        case p | isVariable(p): return { p };
        case !G:                return collectVars(G);
        case G && H:            return collectVars(G) + collectVars(H);
        case G || H:            return collectVars(G) + collectVars(H);
        case G => H:            return collectVars(G) + collectVars(H);
        case G <==> H:          return collectVars(G) + collectVars(H);
        default:                abort("syntax error in collectVars($F$)");
    }
};

evaluate := procedure(F, I) {
    match (F) {
        case true:              return true;
        case false:             return false;
        case p | isVariable(p): return I[p];
        case !G:                return !evaluate(G, I);
        case G && H:            return  evaluate(G, I) && evaluate(H, I);
        case G || H:            return  evaluate(G, I) || evaluate(H, I);
        case G => H:            return  evaluate(G, I) => evaluate(H, I);
        case G <==> H:          return  evaluate(G, I) == evaluate(H, I);
        default:                abort("syntax error in evaluate($F$, $I$)");
    }
};

run := procedure() {
    while (true) {
        print("Enter formula: ");
        s := read();
        if (s == "false") {
            break;
        }
        test(s);
    }
};

test := procedure(s) {
    F := parseTerm(s);
    counterExample := tautology(F);
    if (counterExample == true) {
        print("The formula $F$ is a tautology.");
    } else {
        print("The formula $F$ isn't a tautology.");
        print("Counter example: ", counterExample );
    }
};

test("!(p || q) <==> !p && !q");
test("(p => q) => (!p => q) => q");
test("(p => q) => (!p => !q)");
run();

    




