// This procedure computes the complement of the literal l.
complement := procedure(l) {
    match (l) {
        case !p : return  p;
        case  p : return !p;
    }
};
// This procedure extracts the variable from a literal l.
extractVar := procedure(l) {
    match (l) {
        case !p : return p;
        case  p : return p;
    }
};
// Given a set of clauses m, this procedure returns a list containing all
// propositional variables occurring in m.
collectVars := procedure(m) {
    return { extractVar(l) : c in m, l in c };
};
// This procedure takes two clauses c1 and c2 and computes the set of all
// clauses that result from an application of the cut rule using c1 and c2.
cutRule := procedure(c1, c2) {
    return { (c1 - {l}) + (c2 - {complement(l)})
           : l in c1
           | complement(l) in c2
           };
};
// This procedure takes a set of clauses and performs all applications
// of the cut rule that are possible.  The resulting set of clauses is
// returned.
saturate := procedure(clauses) {
    while (true) {
        derived := {} +/ { cutRule(c1, c2) : c1 in clauses, c2 in clauses };
        if ({} in derived) {
            return { {} };  // clauses are inconsistent
        }
        derived -= clauses;
        print("number of new clauses derived: $#derived$");
        if (derived == {}) {
            return clauses;  // no new clauses found
        }
        clauses += derived;
    }
};
// Given a set of clauses, the procedure findValuation tries to find a
// propositional valuation satisfying the clauses in m.  If there is no
// such valuation, { {} } is returned instead.
findValuation := procedure(clauses) {
    variables := collectVars(clauses);
    clauses   := saturate(clauses);
    if ({} in clauses) {
        return false;
    }
    literals  := {};  // refuted literals
    for (p in variables) {
        if (exists(c in clauses | p in c && c <= literals + {p})) {
            literals += { !p };
        } else {
            literals += { p };
        }
    }
    result := { complement(l) : l in literals };
    return result; 
};
