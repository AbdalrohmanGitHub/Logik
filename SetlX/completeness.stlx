// This procedure computes the complement of the literal l.
complement := procedure(l) {
    match (l) {
        case !p : return  p;
        case  p : return !p;
    }
};
// This procedure extracts the variable from a literal l.
extractVar := procedure(l) {
    match (l) {
        case !p : return p;
        case  p : return p;
    }
};
// Given a set of clauses m, this procedure returns a list containing all
// propositional variables occurring in m.
collectVars := procedure(M) {
    return { extractVar(l) : C in M, l in C };
};
// This procedure takes two clauses c1 and c2 and computes the set of all
// clauses that result from an application of the cut rule using c1 and c2.
cutRule := procedure(C1, C2) {
    return { (C1 - {l}) + (C2 - {complement(l)})
           : l in C1
           | complement(l) in C2
           };
};
// This procedure takes a set of clauses and performs all applications
// of the cut rule that are possible.  The resulting set of clauses is
// returned.
saturate := procedure(Clauses) {
    while (true) {
        Derived := {} +/ { cutRule(C1, C2) : C1 in Clauses, C2 in Clauses };
        if ({} in Derived) {
            return { {} };  // clauses are inconsistent
        }
        Derived -= Clauses;
        print("number of new clauses derived: $#Derived$");
        if (Derived == {}) {
            return Clauses;  // no new clauses found
        }
        Clauses += Derived;
    } 
};
// Given a set of Clauses, the procedure findValuation tries to find a
// propositional valuation satisfying theses clauses.  If there is no
// such valuation, false is returned instead.
findValuation := procedure(Clauses) {
    Variables := collectVars(Clauses);
    Clauses   := saturate(Clauses);
    if ({} in Clauses) {
        return false;
    }
    Literals  := {};
    for (p in Variables) {
        if (exists(C in Clauses |
                   p in C && C <= {complement(l) : l in Literals} + {p})
           ) {
            Literals += { p };
        } else {
            Literals += { !p };
        }
    }
    return Literals;
};
