load("evaluate.stlx");
// This procedure turns a subset M of the set of all variables 
// V into a propositional valuation I, such that I[x] is true 
// iff x is an element of the set M.
createValuation := procedure(M, V) {
    return { [ x, x in M ] : x in V };
};
// Austin, Brian, or Colin is guilty.
f1 := parse("a || b || c");
// If Austin is guilty, he has exactly one accomplice.
f2 := parse("a => b || c");    // at least one accomplice
f3 := parse("a => !(b && c)"); // at most  one accomplice
// If Brian is innocent, then Colin is innocent, too.
f4 := parse("!b => !c"); 
// If exactly two are guilty, then Colin is one of them.
f5 := parse("!(a && b && !c)"); 
// If Colin is innocent, then Austin is guilty.
f6 := parse("!c => a");
fs := { f1, f2, f3, f4, f5, f6 };
v  := { "a", "b", "c" };
All := 2 ** v;
print("All = ", All);
// b is the set of all propositional valuations.
B  := { createValuation(m, v) : m in All };
s  := { I : I in B | forall (f in fs | evaluate(f, I)) };
print("Set of all valuations satisfying all facts: ", s);
if (#s == 1) {
    I := arb(s);
    offenders := { x : x in v | I[x] };
    print("Set of offenders: ", offenders);
}
