loadLibrary("termUtilities");
////////////////////////////////////////////////////////////////////////
//                                                                    //
// Transform a propositional formula in conjunctive normal form.      //
//                                                                    //
////////////////////////////////////////////////////////////////////////

// This procedure transforms the propositional formula F into
// conjunctive normal form.
normalize := procedure(F) {
    N1 := elimGdw(F);
    N2 := elimFolgt(N1);
    N3 := nnf(N2);
    N4 := cnf(N3);
    return simplify(N4);
};
// Eliminate the operator "<==>" from F.
elimGdw := procedure(F) {
    match (F) {
        case !G       : return !elimGdw(G);
        case G && H   : return elimGdw(G) && elimGdw(H);
        case G || H   : return elimGdw(G) || elimGdw(H);
        case G => H   : return elimGdw(G) => elimGdw(H);
        case G <==> H : return elimGdw((G => H) && (H => G));
        default       : return F;  // F must be a propositional variable
    }
};
// Eliminate the operator "=>" from F.
elimFolgt := procedure(F) {
    match (F) {
        case !G     : return !elimFolgt(G);
        case G && H : return  elimFolgt(G) && elimFolgt(H);
        case G || H : return  elimFolgt(G) || elimFolgt(H);
        case G => H : return  elimFolgt(!G || H);
        default     : return F; 
    }
};
// Compute the negation normal form of F.
nnf := procedure(F) {
    match (F) {
        case !G     : return neg(G);
        case G && H : return nnf(G) && nnf(H);
        case G || H : return nnf(G) || nnf(H);
        default     : return F; 
    }
};
// This function computes the negation normal form of !F.
neg := procedure(F) {
    match (F) {
        case !G     : return nnf(G);
        case G && H : return neg(G) || neg(H);
        case G || H : return neg(G) && neg(H);
        default     : return !F; 
    }
};
cnf := procedure(F) {
    match (F) {
        case !G     : return { { !G } };
        case G && H : return cnf(G) + cnf(H);
        case G || H : return { K1 + K2 : K1 in cnf(G), K2 in cnf(H) };
        default     : return { { F } }; // f is a variable
    }
};
// Eliminate all trivial clauses from F
simplify := procedure(F) {
    return { C : C in F | !isTrivial(C) };
};
// Is the clause C trivial?
isTrivial := procedure(C) {
    return exists(p in C | !p in C);
};



 
