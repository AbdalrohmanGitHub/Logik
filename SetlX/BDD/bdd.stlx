// The parameter varList is a list of variable names.  The variables 
// are ordered in the same sequence as they occur in the list.
// The class bddfactory uses the following member variables:
//   1. mVarList is a list of variables.  This list fixes the ordering 
//      of the variables.
//   2. mVarIndex is a relation that returns the index of a variable.
//      This index is used to compare variables.
//   3. mNodeCount is the number of bdd nodes created so far. Every bdd
//      is associated with a unique number.  Every time a new bdd is created,
//      the variable mNodeCount is used as tis number and then incremented.
//   4. mNodeTable is a table that associates a bdd with its unique number.
//      The bdds are represented as lists of the form
//         [variable, trueBranch, falseBranch].
//      A list ofthis kind represents the formula
//         (variable => trueBranch) && (!variable => falseBranch)
//   5. The variable mVisited is only used to print the bdd as a 
//      graph.
// The implementations of the methods makeNode, applyAnd, applyOr, and applyNot
// make use of dynamic programming, which is supported in SetlX via cached 
// procedures.
class bddFactory(varList) {
    mVarList   := varList;
    mVarIndex  := { [varList[i], i] : i in { 1 .. #varList } };
    mNodeCount := 2;
    mNodeTable := { [0, false], [1, true] };
    mVisited   := {};
    clearCache(makeNode);
    clearCache(applyAnd);
    clearCache(applyOr);
    clearCache(applyNot);

  static {
    // transform a propositional formula into a reduced ordered bdd
    toBdd := procedure(f) {
        match (f) {
            case true        : return 1;
            case false       : return 0;
            case ^variable(v): return makeNode(v, 1, 0);
            case !g          : return applyNot(toBdd(g));
            case g && h      : return applyAnd(toBdd(g), toBdd(h));
            case g || h      : return applyOr(toBdd(g), toBdd(h));
            case g => h      : return toBdd(!g || h);
            case g <==> h    : return toBdd((g => h) && (h => g));
        }
    };
    makeNode := cachedProcedure(variable, trueBranch, falseBranch) {
        if (trueBranch == falseBranch) { return trueBranch; }
        result := mNodeCount;
        this.mNodeTable[result] := [variable, trueBranch, falseBranch];
        this.mNodeCount += 1;
        return result;
    };
    applyAnd := cachedProcedure(lhs, rhs) {
        if (lhs == 0 || rhs == 0) { return 0; }
        if (lhs == 1) { return rhs; }
        if (rhs == 1) { return lhs; }
        [lhsVar, lhs1, lhs0] := mNodeTable[lhs];
        [rhsVar, rhs1, rhs0] := mNodeTable[rhs];
        if (lhsVar == rhsVar) {
            return makeNode(lhsVar, applyAnd(lhs1, rhs1), applyAnd(lhs0, rhs0));
        }
        if (mVarIndex[lhsVar] < mVarIndex[rhsVar]) {
            return makeNode(lhsVar, applyAnd(lhs1, rhs), applyAnd(lhs0, rhs));
        } else {
            return makeNode(rhsVar, applyAnd(lhs, rhs1), applyAnd(lhs, rhs0));
        }
    };
    applyOr := cachedProcedure(lhs, rhs) {
        if (lhs == 1 || rhs == 1) { return 1; }
        if (lhs == 0) { return rhs; }
        if (rhs == 0) { return lhs; }
        [lhsVar, lhs1, lhs0] := mNodeTable[lhs];
        [rhsVar, rhs1, rhs0] := mNodeTable[rhs];
        if (lhsVar == rhsVar) {
            return makeNode(lhsVar, applyOr(lhs1, rhs1), applyOr(lhs0, rhs0));
        }
        if (mVarIndex[lhsVar] < mVarIndex[rhsVar]) {
            return makeNode(lhsVar, applyOr(lhs1, rhs), applyOr(lhs0, rhs));
        } else {
            return makeNode(rhsVar, applyOr(lhs, rhs1), applyOr(lhs, rhs0));
        }
    };
    applyNot := cachedProcedure(arg) {
        if (arg == 1) { return 0; }
        if (arg == 0) { return 1; }
        [v, arg1, arg0] := mNodeTable[arg];
        return makeNode(v, applyNot(arg1), applyNot(arg0));
    };
    bddToDot := procedure(idx) {
        print(mNodeTable);
        this.mVisited := {0, 1};
        result := "digraph G {\n";
        result += "    size = \"5,7\";\n";
        [v, l, r] := mNodeTable[idx];
        result += "    $idx$ [ label = \"$v$\"];\n";
        result += "    $idx$ -> $l$ [ label = \"1\" ];\n";
        result += "    $idx$ -> $r$ [ label = \"0\" ];\n";
        result += bddToDotAux(l);
        result += bddToDotAux(r);
        result += "    0 [ label = \"0\" ];\n";
        result += "    1 [ label = \"1\" ];\n";
        result += "}\n";
        writeFile("bddGraph.dot", [ result ]);
        run("dot -Tps bddGraph.dot -o bddGraph.eps");
        run("open bddGraph.eps");
    };
    bddToDotAux := procedure(idx) {
        if (idx in mVisited) {
            return "";
        }
        print("visiting $idx$ ($mNodeTable[idx]$)");
        this.mVisited += { idx };
        result := "";  
        [v, l, r] := mNodeTable[idx];
        result += "    $idx$ [ label = \"$v$\"];\n";
        result += "    $idx$ -> $l$ [ label = \"1\" ];\n";
        result += "    $idx$ -> $r$ [ label = \"0\" ];\n";
        result += bddToDotAux(l);
        result += bddToDotAux(r);
        return result;
    };
  }
}

checkEquivalence := procedure(s1, s2) {
    varList := ["p", "q", "r"];
    factory := bddFactory(varList);
    f := parse(s1);
    g := parse(s2);
    if (factory.toBdd(f) == factory.toBdd(g)) {
        print("$s1$ <==> $s2$ is a tautology");
    } else {
      print("$s1$ <==> $s2$ is a tautology");
    }
};

// checkEquivalence("!(p || q)", "!p && !q");
// checkEquivalence("(p => q) => (!p => q) => q", "true");

test := procedure() {
varList := ["x1", "x2", "x3", "x4", "x5"];
    factory := bddFactory(varList);
    f := parse("x1 && x2 || x3 && !x4 => x5");
    bdd := factory.toBdd(f);
    print(bdd);
    factory.bddToDot(bdd);
};

test();

