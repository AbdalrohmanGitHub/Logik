
_region_.tex,59
\setlength{\partopsep}{0.0cm plus0.1cm minus 0.0cm}30,750

aussagenlogik-alt.tex,5848
\chapter{Aussagenlogik}1,1
\section{Motivation}2,25
\section{Anwendungen der Aussagenlogik}144,8112
\section{Formale Definition der aussagenlogischen Formeln}189,10853
\subsection{Syntax der aussagenlogischen Formeln}196,11293
\subsection{Semantik der aussagenlogischen Formeln}247,13972
  \label{tab:aussagen-logik}306,17150
einer Formel direkt mit Hilfe der Tabelle \ref{tab:aussagen-logik} auf Seite349,20057
auftretende Teilformel eine Spalte enthält.  Tabelle \ref{tab:tautologie} auf Seite357,20572
  \label{tab:tautologie}378,21610
\subsection{Extensionale und intensionale Interpretationen der Aussagenlogik}408,23646
\subsection{Implementierung in \textsc{Setl2}} 429,24806
\ref{fig:eval} auf Seite \pageref{fig:eval} gezeigt.510,29901
  \label{fig:eval}539,31062
\subsection{Eine Anwendung}584,33720
Abbildung \ref{fig:watson} zeigt ein solches Programm.627,36324
  \label{fig:watson}686,38615
\section{Tautologien}740,41915
Die Tabelle in Abbildung \ref{tab:tautologie} zeigt, dass die Formel741,41962
Tabelle \ref{tab:tautologie} aufgebaut ist.771,43242
  \label{tab:deMorgan}822,46474
Wir erkennen, dass in Abbildung \ref{tab:deMorgan} in den letzten beiden Spalten in jeder Zeile die selben Werte824,46539
\subsection{Testen der Allgemeingültigkeit in \textsc{Setl2}}827,46697
  \label{fig:tautology}864,48183
obige Frage automatisch lösen können.   Die in Abbildung \ref{fig:tautology} auf Seite \pageref{fig:tautology}872,48598
\ref{fig:eval} auf Seite \pageref{fig:eval} gezeigten Programm.875,48816
\subsection{Nachweis der Allgemeingültigkeit durch Äquivalenz-Umformungen}937,54037
\begin{Satz} \label{satz:trivial}1073,62132
\begin{Korollar} \label{korollar:knf}1112,63983
Ist $f = k_1 \wedge \cdots \wedge k_n$ eine Formel in KNF, so ist $f$ nach Satz \ref{satz:trivial}1140,65168
und dem Korollar \ref{korollar:knf} genau dann eine Tautologie, wenn alle Klauseln $k_i$ trivial1141,65204
\subsection{Berechnung der konjunktiven Normalform in \textsc{Setl2}}1198,69025
\ref{fig:eliminate-gdw} auf Seite \pageref{fig:eliminate-gdw} zeigt die Implementierung der1249,71778
  \label{fig:eliminate-gdw}1279,73034
\ref{fig:eliminate-folgt} auf Seite \pageref{fig:eliminate-folgt} zeigt die Implementierung.1285,73176
  \label{fig:eliminate-folgt}1318,74734
\ref{fig:nnf} auf Seite \pageref{fig:nnf} zeigt die Implementierung.1323,74865
  \label{fig:nnf}1386,77848
Abbildung \ref{fig:knf} auf Seite \pageref{fig:knf} zeigt die Implementierung.1397,78401
  \label{fig:knf}1510,84525
Zum Abschluß zeigen wir in Abbildung \ref{fig:normalize} auf Seite \pageref{fig:normalize}1513,84592
  \label{fig:normalize}1537,85320
\section{Der Herleitungs-Begriff}1542,85368
\subsection{Eigenschaften des Herleitungs-Begriffs}1754,95184
\begin{Satz}[Widerlegungs-Vollständigkeit] \label{widerlegungs-vollstaendig}1821,97977
Wir werden den Satz \ref{widerlegungs-vollstaendig} durch Induktion über die Anzahl1874,100823
\begin{Satz} \label{satz:reduktion-semantik}1941,104481
\begin{Satz} \label{satz:reduktion-syntax}1987,107223
      \ref{satz:reduktion-semantik}, dass sowohl \\[0.1cm]2090,113980
      Nach Satz \ref{satz:reduktion-syntax} folgt daraus \\[0.1cm]2094,114392
\section{Das Verfahren von Davis und Putnam}2106,115071
\cite{davis62} zurück.  Verfeinerungen dieses Verfahrens werden beispielsweise2114,115616
\subsection{Vereinfachung mit der Schnitt-Regel}2182,118556
\subsection{Vereinfachung durch Subsumption}2211,120342
\subsection{Vereinfachung durch Fallunterscheidung}2242,121980
\subsection{Der Algorithmus}2285,123936
\subsection{Ein Beispiel}2334,126423
\subsection{Implementierung des Algorithmus von Davis und Putnam}2392,129824
Implementierung ist in Abbildung \ref{fig:normalize} auf Seite \pageref{fig:normalize}2395,130086
Die in Abbildung \ref{fig:normalize} gezeigte Implementierung funktioniert wie folgt:2410,131125
  \label{fig:solve}2464,133587
Die Prozedur \texttt{saturate} ist in Abbildung \ref{fig:saturate} auf Seite \pageref{fig:saturate}2472,133981
  \label{fig:saturate}2501,134882
Die dabei verwendete Prozedur \texttt{reduce} ist in Abbildung \ref{fig:reduce} gezeigt.2521,136097
  \label{fig:reduce}2544,136882
Abbildung \ref{fig:solve-aux} auf Seite \pageref{fig:solve-aux} gezeigt wird.2549,137081
  \label{fig:solve-aux}2585,138421
weiter eingehen. Der interessierte Leser sei hier auf \cite{moskewicz01}  verwiesen. \\[0.2cm]2590,138689
\section{Das 8-Damen-Problem}2596,138888
steht.  Abbildung \ref{fig:queens-problem} auf Seite \pageref{fig:queens-problem}2609,139537
  \label{fig:queens-problem}2642,140744
Spalten von links nach rechts numeriert werden.  Abbildung \ref{fig:queens-assign} auf2653,141450
  \label{fig:queens-assign}2747,143712
als Liste von Listen von Variablen berechnet.  Abbildung \ref{fig:createBoard} auf Seite2752,143955
  \label{fig:createBoard}2772,144648
die obigen Überlegungen sofort in eine Prozedur um.  Die in Abbildung \ref{fig:atMostOne}2815,147135
  \label{fig:atMostOne}2838,148031
$\texttt{createBoard}()$ erzeugen.  Abbildung \ref{fig:atMostOneInRow} zeigt die2848,148646
  \label{fig:atMostOneInRow}2875,149603
Abbildung \ref{fig:oneInColumn} zeigt eine \textsc{Setl2}-Prozedur, die für eine gegebene Spalte2897,150508
  \label{fig:oneInColumn}2916,151208
Prozedur ist in Abbildung \ref{fig:atMostOneInUpperDiagonal} gezeigt.2946,153058
  \label{fig:atMostOneInUpperDiagonal}2965,153723
Diese Prozedur ist in Abbildung \ref{fig:atMostOneInLowerDiagonal} gezeigt.2982,154592
  \label{fig:atMostOneInLowerDiagonal}3001,155257
Abbildung \ref{fig:allClauses} zeigt die Implementierung der Prozedur \texttt{allClauses}.3006,155485
  \label{fig:allClauses}3041,157153
sehen Sie in Abbildung \ref{fig:queens-solution}. 3056,157873
  \label{fig:queens-solution}3076,158375

aussagenlogik-old.tex,6415
\chapter{Aussagenlogik}1,1
\section{Motivation}2,25
\section{Anwendungen der Aussagenlogik}153,8347
\section{Formale Definition der aussagenlogischen Formeln}201,11395
\subsection{Syntax der aussagenlogischen Formeln}208,11835
\subsection{Semantik der aussagenlogischen Formeln}269,15015
  \label{tab:aussagen-logik}328,18195
einer Formel direkt mit Hilfe der Tabelle \ref{tab:aussagen-logik} auf Seite371,21102
auftretende Teilformel eine Spalte enthält.  Tabelle \ref{tab:tautologie} auf Seite379,21617
  \label{tab:tautologie}400,22655
\subsection{Extensionale und intensionale Interpretationen der Aussagenlogik}430,24691
\subsection{Implementierung in \textsc{Setl2}} 451,25735
\ref{fig:eval} auf Seite \pageref{fig:eval} gezeigt.532,30830
  \label{fig:eval}561,31991
\subsection{Eine Anwendung}607,34650
Abbildung \ref{fig:watson} zeigt ein solches Programm.650,37254
  \label{fig:watson}709,39546
\section{Tautologien}764,42857
Die Tabelle in Abbildung \ref{tab:tautologie} zeigt, dass die Formel765,42904
Tabelle \ref{tab:tautologie} aufgebaut ist.  Dieses Verfahren ist zwar konzeptuell sehr795,44184
  \label{tab:deMorgan}849,47623
Wir erkennen, dass in Abbildung \ref{tab:deMorgan} in den letzten beiden Spalten in jeder Zeile die selben Werte851,47688
\subsection{Testen der Allgemeingültigkeit in \textsc{Setl2}}854,47846
  \label{fig:tautology}931,51084
Die in Abbildung \ref{fig:tautology} auf Seite \pageref{fig:tautology}935,51148
\ref{fig:eval} auf Seite \pageref{fig:eval} gezeigten Programm.939,51398
\subsection{Nachweis der Allgemeingültigkeit durch Äquivalenz-Umformungen}996,56040
\begin{Satz} \label{satz:trivial}1134,64194
\begin{Korollar} \label{korollar:knf}1173,66045
Ist $f = k_1 \wedge \cdots \wedge k_n$ eine Formel in KNF, so ist $f$ nach Satz \ref{satz:trivial}1201,67230
und dem Korollar \ref{korollar:knf} genau dann eine Tautologie, wenn alle Klauseln $k_i$ trivial1202,67266
\subsection{Berechnung der konjunktiven Normalform in \textsc{Setl2}}1259,71086
\ref{fig:eliminate-gdw} auf Seite \pageref{fig:eliminate-gdw} zeigt die Implementierung der1310,73840
  \label{fig:eliminate-gdw}1340,75096
\ref{fig:eliminate-folgt} auf Seite \pageref{fig:eliminate-folgt} zeigt die Implementierung.1346,75238
  \label{fig:eliminate-folgt}1379,76796
\ref{fig:nnf} auf Seite \pageref{fig:nnf} zeigt die Implementierung.1384,76927
  \label{fig:nnf}1466,80736
Abbildung \ref{fig:knf} auf Seite \pageref{fig:knf} zeigt die Implementierung.1477,81289
  \label{fig:knf}1590,87412
Zum Abschluß zeigen wir in Abbildung \ref{fig:normalize} auf Seite \pageref{fig:normalize}1593,87479
  \label{fig:normalize}1617,88207
\section{Der Herleitungs-Begriff}1622,88255
\subsection{Eigenschaften des Herleitungs-Begriffs}1876,99710
\begin{Satz}[Widerlegungs-Vollständigkeit] \label{widerlegungs-vollstaendig}1936,102495
\begin{Lemma} \label{lemma:l1} 2012,106502
        \label{eq:al1}2067,109154
        \label{eq:al2}2072,109411
      Wenden wir auf (\ref{eq:al1}) und (\ref{eq:al2}) die Schnitt-Regel an, so erhalten wir2075,109572
\begin{Lemma}[Konsistenz-Lemma] \label{lemma:l2}2080,109831
\textbf{Beweis}:  Aus den Voraussetzungen folgt mit Lemma \ref{lemma:l1}2091,110223
\begin{Satz}[Widerlegungs-Vollständigkeit der Aussagenlogik] \label{satz:s5}2098,110534
  \label{eq:c1}2111,110833
             Wegen $M_0 = M$ folgt die Behauptung in diesem Fall aus unserer Annahme (\ref{eq:c1}).2136,111926
                     \label{eq:c2}2145,112325
                     \label{eq:c3}2150,112568
                   gelten, so würde mit Lemma \ref{lemma:l2} aus 2153,112736
                   (\ref{eq:c2}) und (\ref{eq:c3}) folgen,2154,112776
  \label{eq:c4}2179,114090
Dies ist ein Widerspruch zu (\ref{eq:c4}), denn wir aus der Annahme erhalten haben, dass die Belegung2219,116525
\section{Das Verfahren von Davis und Putnam}2226,116952
\cite{davis62} zurück.  Verfeinerungen dieses Verfahrens werden beispielsweise2234,117497
\subsection{Vereinfachung mit der Schnitt-Regel}2319,120732
\subsection{Vereinfachung durch Subsumption}2348,122518
\subsection{Vereinfachung durch Fallunterscheidung}2379,124156
\subsection{Der Algorithmus}2422,126112
\subsection{Ein Beispiel}2467,128368
\subsection{Implementierung des Algorithmus von Davis und Putnam}2525,131769
Implementierung ist in Abbildung \ref{fig:solve} auf Seite \pageref{fig:solve}2528,132031
Die in Abbildung \ref{fig:solve} gezeigte Implementierung funktioniert wie folgt:2543,133062
  \label{fig:solve}2597,135520
Die Prozedur \texttt{saturate} ist in Abbildung \ref{fig:saturate} auf Seite \pageref{fig:saturate}2605,135914
  \label{fig:saturate}2634,136815
Die dabei verwendete Prozedur \texttt{reduce} ist in Abbildung \ref{fig:reduce} gezeigt.2654,138060
  \label{fig:reduce}2677,138845
Abbildung \ref{fig:solve-aux} auf Seite \pageref{fig:solve-aux} gezeigt wird.2682,139044
  \label{fig:solve-aux}2718,140385
weiter eingehen. Der interessierte Leser sei hier auf \cite{moskewicz01}  verwiesen. \\[0.2cm]2723,140652
\section{Das 8-Damen-Problem}2729,140861
steht.  Abbildung \ref{fig:queens-problem} auf Seite \pageref{fig:queens-problem}2742,141510
  \label{fig:queens-problem}2775,142717
Spalten von links nach rechts numeriert werden.  Abbildung \ref{fig:queens-assign} auf2786,143423
  \label{fig:queens-assign}2880,145685
Abbildung \ref{fig:createBoard} auf Seite2891,145989
  \label{fig:createBoard}2911,146682
die obigen Überlegungen sofort in eine Prozedur um.  Die in Abbildung \ref{fig:atMostOne}2957,149209
  \label{fig:atMostOne}2980,150105
$\texttt{createBoard}()$ erzeugen.  Abbildung \ref{fig:atMostOneInRow} zeigt die2990,150720
  \label{fig:atMostOneInRow}3017,151677
Abbildung \ref{fig:oneInColumn} zeigt eine \textsc{Setl2}-Prozedur, die für eine gegebene Spalte3039,152582
  \label{fig:oneInColumn}3058,153282
Prozedur ist in Abbildung \ref{fig:atMostOneInUpperDiagonal} gezeigt.3088,155115
  \label{fig:atMostOneInUpperDiagonal}3107,155780
Diese Prozedur ist in Abbildung \ref{fig:atMostOneInLowerDiagonal} gezeigt.3124,156649
  \label{fig:atMostOneInLowerDiagonal}3143,157314
Abbildung \ref{fig:allClauses} zeigt die Implementierung der Prozedur \texttt{allClauses}.3148,157542
  \label{fig:allClauses}3183,159210
sehen Sie in Abbildung \ref{fig:queens-solution}. 3198,159930
  \label{fig:queens-solution}3218,160432

aussagenlogik.tex,6687
\chapter{Aussagenlogik}1,1
\section{Motivation}2,25
\section{Anwendungen der Aussagenlogik}153,8365
\section{Formale Definition der aussagenlogischen Formeln}201,11400
\subsection{Syntax der aussagenlogischen Formeln}208,11840
\subsection{Semantik der aussagenlogischen Formeln}269,15020
  \label{tab:aussagen-logik}328,18198
einer Formel direkt mit Hilfe der Tabelle \ref{tab:aussagen-logik} auf Seite371,21104
auftretende Teilformel eine Spalte enthält.  Tabelle \ref{tab:tautologie} auf Seite379,21619
  \label{tab:tautologie}400,22657
\subsection{Extensionale und intensionale Interpretationen der Aussagenlogik}430,24694
\subsection{Implementierung in \textsl{SetlX}} 451,25746
\ref{fig:evaluate.stlx} auf Seite \pageref{fig:evaluate.stlx} gezeigt.532,30841
  \label{fig:evaluate.stlx}560,31979
\subsection{Eine Anwendung}606,34658
Abbildung \ref{fig:watson.stlx} zeigt ein solches Programm.649,37262
  \label{fig:watson.stlx}693,39048
\section{Tautologien}749,41997
Die Tabelle in Abbildung \ref{tab:tautologie} zeigt, dass die Formel750,42044
Tabelle \ref{tab:tautologie} aufgebaut ist.  Dieses Verfahren ist zwar konzeptuell sehr780,43324
  \label{tab:deMorgan}834,46763
Wir erkennen, dass in Abbildung \ref{tab:deMorgan} in den letzten beiden Spalten in jeder Zeile die selben Werte836,46828
\subsection{Testen der Allgemeingültigkeit in \textsl{SetlX}}839,46986
  \label{fig:tautology.stlx}919,50208
Die in Abbildung \ref{fig:tautology.stlx} auf Seite \pageref{fig:tautology.stlx}923,50277
\ref{fig:evaluate.stlx} auf Seite \pageref{fig:evaluate.stlx} gezeigten Programm.927,50545
\subsection{Nachweis der Allgemeingültigkeit durch Äquivalenz-Umformungen}980,54892
\begin{Satz} \label{satz:trivial}1119,63048
\begin{Korollar} \label{korollar:knf}1158,64886
\subsection{Berechnung der konjunktiven Normalform in \textsl{SetlX}}1248,69932
\ref{fig:eliminate-gdw} auf Seite \pageref{fig:eliminate-gdw} zeigt die Implementierung der1299,72686
  \label{fig:eliminate-gdw}1337,74013
\ref{fig:eliminate-folgt} auf Seite \pageref{fig:eliminate-folgt} zeigt die Implementierung.1343,74155
  \label{fig:eliminate-folgt}1384,75792
\ref{fig:nnf} auf Seite \pageref{fig:nnf} zeigt die Implementierung.1389,75923
  \label{fig:nnf}1485,79861
Abbildung \ref{fig:knf} auf Seite \pageref{fig:knf} zeigt die Implementierung.1496,80414
  \label{fig:knf}1616,86610
Zum Abschluß zeigen wir in Abbildung \ref{fig:normalize} auf Seite \pageref{fig:normalize}1619,86677
  \label{fig:normalize}1642,87355
\section{Der Herleitungs-Begriff}1648,87419
\subsection{Eigenschaften des Herleitungs-Begriffs}1863,97116
\begin{Satz}[Widerlegungs-Vollständigkeit] \label{widerlegungs-vollstaendig}1907,99070
Ein Beweis findet sich beispielsweise in dem Buch von Schöning \cite{schoening87}.1919,99517
%\begin{Lemma} \label{lemma:l1} 1989,103327
%        \label{eq:al1}2044,106032
%        \label{eq:al2}2049,106294
%      Wenden wir auf (\ref{eq:al1}) und (\ref{eq:al2}) die Schnitt-Regel an, so erhalten wir2052,106458
%\begin{Lemma}[Konsistenz-Lemma] \label{lemma:l2}2057,106721
%\textbf{Beweis}:  Aus den Voraussetzungen folgt mit Lemma \ref{lemma:l1}2068,107123
%\begin{Satz}[Widerlegungs-Vollständigkeit der Aussagenlogik] \label{satz:s5}2075,107440
%  \label{eq:c1}2088,107751
%             Wegen $M_0 = M$ folgt die Behauptung in diesem Fall aus unserer Annahme (\ref{eq:c1}).2113,108868
%                     \label{eq:c2}2122,109275
%                     \label{eq:c3}2127,109523
%                   gelten, so würde mit Lemma \ref{lemma:l2} aus 2130,109694
%                   (\ref{eq:c2}) und (\ref{eq:c3}) folgen,2131,109735
%  \label{eq:c4}2156,111073
%Dies ist ein Widerspruch zu (\ref{eq:c4}), denn wir aus der Annahme erhalten haben, dass die Belegung2196,113548
\section{Das Verfahren von Davis und Putnam}2203,113979
\cite{davis62} zurück.  Verfeinerungen dieses Verfahrens werden beispielsweise2211,114524
\subsection{Vereinfachung mit der Schnitt-Regel}2296,117750
\subsection{Vereinfachung durch Subsumption}2325,119536
\subsection{Vereinfachung durch Fallunterscheidung}2356,121178
\subsection{Der Algorithmus}2399,123135
\subsection{Ein Beispiel}2444,125391
\subsection{Implementierung des Algorithmus von Davis und Putnam}2502,128794
Implementierung ist in Abbildung \ref{fig:davisPutnam} auf Seite \pageref{fig:davisPutnam}2505,129056
Die in Abbildung \ref{fig:davisPutnam} gezeigte Implementierung funktioniert wie folgt:2521,130160
  \label{fig:davisPutnam}2576,132516
Die Prozedur \texttt{saturate} ist in Abbildung \ref{fig:saturate} auf Seite \pageref{fig:saturate}2584,132916
  \label{fig:saturate}2612,133747
Die dabei verwendete Prozedur $\texttt{reduce}()$ ist in Abbildung \ref{fig:reduce} gezeigt.2633,135049
  \label{fig:reduce}2666,136186
Abbildung \ref{fig:solve-aux} auf Seite \pageref{fig:solve-aux} gezeigt wird.2671,136397
  \label{fig:solve-aux}2712,138164
weiter eingehen. Der interessierte Leser sei hier auf \cite{moskewicz01}  verwiesen. 2717,138431
\section{Das 8-Damen-Problem}2723,138628
steht.  Abbildung \ref{fig:queens-problem} auf Seite \pageref{fig:queens-problem}2737,139326
  \label{fig:queens-problem}2770,140533
Spalten von links nach rechts numeriert werden.  Abbildung \ref{fig:queens-assign} auf2781,141239
  \label{fig:queens-assign}2875,143501
Abbildung \ref{fig:createBoard} auf Seite2883,143769
  \label{fig:createBoard}2902,144410
Wir setzen diese Überlegungen in eine \textsl{SetlX}-Prozedur um.  Die in Abbildung \ref{fig:atMostOne}2952,147018
  \label{fig:atMostOne}2974,147860
$\texttt{createBoard}()$ erzeugen.  Abbildung \ref{fig:atMostOneInRow} zeigt die2984,148475
  \label{fig:atMostOneInRow}3011,149424
Abbildung \ref{fig:oneInColumn} zeigt eine \textsl{SetlX}-Prozedur, die für eine gegebene Spalte3033,150355
  \label{fig:oneInColumn}3054,151250
Prozedur ist in Abbildung \ref{fig:atMostOneInUpperDiagonal} gezeigt.3084,153083
  \label{fig:atMostOneInUpperDiagonal}3104,153755
Diese Prozedur ist in Abbildung \ref{fig:atMostOneInLowerDiagonal} gezeigt.3121,154624
  \label{fig:atMostOneInLowerDiagonal}3141,155296
Abbildung \ref{fig:allClauses} zeigt die Implementierung der Prozedur \texttt{allClauses}.3146,155524
  \label{fig:allClauses}3182,157220
Als letztes zeigen wir in Abbildung \ref{fig:davisPutnam:solve} die Prozedur3185,157293
selbe Breite haben.  Diese Prozedur ist der Vollständigkeit halber in Abbildung \ref{fig:printBoard}3189,157679
\label{fig:davisPutnam:solve}3217,158624
\label{fig:printBoard}3263,159916
sehen Sie in Abbildung \ref{fig:queens-solution}. 3271,160363
  \label{fig:queens-solution}3291,160865

compact-barwise.tex,981
\section{Der Kompaktheits-Satz der Aussagen-Logik}1,1
\cite{barwise:1991a} aus dem Handbuch der mathematischen Logik \cite{barwise:1991}.6,410
\begin{Satz} \label{satz28}27,1441
\begin{Satz} \label{satz29}68,3254
von Satz \ref{satz28}.  Exemplarisch zeigen wir den Beweis der vierten Behauptung.83,3802
\begin{Satz} \label{satz30}117,5789
      Sei zunächst $f \el M$. Nach Satz \ref{satz29} folgt aus $(\neg g) \el M$ sofort149,6935
      Sei nun $f \notel M$. Wieder nach Satz \ref{satz29} folgt aus $(\neg g) \notel M$ sofort153,7212
      Sei zunächst $f \el M$.  Nach Satz \ref{satz29} folgt aus $(g \wedge h) \el M$ sofort158,7505
      Sei nun $f \notel M$. Nach Satz \ref{satz29} folgt aus $(g \wedge h) \notel M$, dass164,7889
gilt.  Da die Menge $\widehat{M}$ nach Satz \ref{satz30} erfüllbar ist, ist $M$ als Teilmenge von194,9109
  Also ist $\widehat{M}$ maximal endlich erfüllbar und daher ist $\widehat{M}$ nach Satz \ref{satz30} erfüllbar. \qed335,15068

compact.tex,182
\section{Der Kompaktheits-Satz}1,1
  \label{widerlegungs-vollstaendig2}161,8768
gilt.  Da $N$ endlich ist, können wir nach Satz \ref{widerlegungs-vollstaendig} schließen,173,9280

einleitung.tex,113
\chapter{Einleitung}1,1
\section{Überblick über den Inhalt der Vorlesung:} 16,900
\section{Motivation}55,3719

grenzen.tex,481
\chapter{Grenzen der Berechenbarkeit}1,1
\section{Das Halte-Problem}2,39
\texttt{strange} tr"agt. Diese Funktion ist in Abbildung \ref{fig:strange} zu sehen.87,4209
  \label{fig:strange}102,4688
\ref{fig:strange} mit $Strange$.  Wir definieren also \\[0.3cm]108,4992
\section{Die Church'sche These}162,8284
\section{Andere nicht berechenbare Funktionen}198,10188
\ref{fig:stops} angegeben Implementierung der Funktion \texttt{stops}.247,12667
  \label{fig:stops}255,12957

grundlagen.tex,1676
\chapter{Mathematische Grundlagen} 1,1
\section{Motivation und Überblick}22,1313
\section{Prädikatenlogische Formeln}169,11600
\subsection{Warum Formeln}174,11874
\subsection{Formeln als Kurzschreibweise}217,14292
\subsection{Beispiele für Terme und Formeln}416,26277
\section{Mengen und Relationen}474,30002
Die erste Definition des Begriffs der Menge lautete etwa wie folgt \cite{cantor:1895}:481,30492
\subsection{Erzeugung von Mengen durch explizites Auflisten}554,35056
\subsection{Die Menge der natürlichen Zahlen}574,36247
\subsection{Das Auswahl-Prinzip}591,37179
\subsection{Potenz-Mengen}607,38086
\subsection{Vereinigungs-Mengen}634,39627
\subsection{Schnitt-Menge}662,40904
\subsection{Differenz-Mengen}676,41477
\subsection{Bild-Mengen}690,42087
\subsection{Kartesische Produkte}708,42838
\subsection{Gleichheit von Mengen}743,45178
\subsection{Rechenregeln für das Arbeiten mit Mengen}772,46870
\section{Binäre Relationen}824,49743
\subsection{Binäre Relationen und Funktionen}838,50552
  \label{eq:ass0}1148,65311
\ref{eq:ass0} um.  Es gilt1152,65522
  \label{eq:ass1}1165,66155
\ref{eq:ass0} um:1169,66334
  \label{eq:ass2}1183,66980
Die Formeln (\ref{eq:ass1}) und (\ref{eq:ass2}) sind identisch.  Damit ist die Äquivalenz1186,67125
(\ref{eq:ass0}) nachgewiesen und der Beweis der Assoziativität des Kompositions-Operators1187,67203
  \label{eq:dis0}1221,69385
  \label{eq:dis1}1243,70602
  \label{eq:dis2}1268,72081
Da die Formeln \ref{eq:dis1} und \ref{eq:dis2} identisch sind, ist der Beweis des1273,72351
\subsection{Binäre Relationen auf einer Menge}1343,75613
Details auf die Literatur \cite{lipschutz98}.  2149,109363

logik.tex,59
\setlength{\partopsep}{0.0cm plus0.1cm minus 0.0cm}30,724

overview.tex,235
\section{Mengen}60,1428
\section{Setl2}286,11147
\subsection{Paare und Funktionen}338,13013
\subsection{Tupel als ``\emph{geordnete Mengen}''}359,13919
\subsection{Mengen-Operatoren}393,14768
\section{Aussagenlogik}    446,16515

pl-complete.tex,51
\section{Der Gödel'sche Vollständigkeits-Satz}1,1

pr-slides.tex,0

praedikatenlogik.tex,2799
\chapter{Prädikatenlogik}1,1
\section{Syntax der Prädikatenlogik}25,1457
{\em \label{praedikaten-formel}176,10371
\section{Semantik der Prädikatenlogik}261,15688
\ref{tab:aussagen-logik} auf Seite \pageref{tab:aussagen-logik} gegeben. 431,24451
ungerade Zahlen überprüft, ob die Zahl perfekt ist.  Abbildung \ref{fig:find-perfect.stlx}548,30924
  \label{fig:find-perfect.stlx}586,32214
\subsection{Implementierung prädikatenlogischer Strukturen in \textsc{SetlX}}598,32757
\ref{fig:gruppen.stl} gezeigten Code implementieren.611,33773
\label{fig:gruppen.stl}635,34624
\label{fig:pl-evaluate.stlx}709,38039
auswerten können.  Abbildung \ref{fig:pl-evaluate.stlx} zeigt die Implementierung der Prozedur713,38204
darstellen.  Die Auswertung einer solchen Formel ist nun analog zu der in Abbildung \ref{fig:evaluate.stlx}724,38875
Die Implementierung dieser Prozedur wird später in Abbildung \ref{fig:pl-evaluate-term.stl}744,40093
\label{fig:pl-evaluate-term.stl}799,41777
Abbildung \ref{fig:pl-evaluate-term.stl} zeigt die Auswertung atomarer Formeln und802,41834
\label{fig:gruppen-theorie.stl}868,45189
Wir zeigen nun, wie sich die in Abbildung \ref{fig:pl-evaluate.stlx} gezeigte Funktion871,45277
in Abbildung \ref{fig:gruppen.stl} gezeigte Struktur die Axiome der \emph{Gruppen-Theorie}873,45426
Diese Axiome sind in den Zeilen 1 bis 3 der Abbildung \ref{fig:gruppen-theorie.stl}890,46186
\section{Normalformen für prädikatenlogische Formeln}906,47016
\section{Unifikation}1158,62595
\begin{Satz} \label{satz:komposition}1255,67854
\section{Ein Kalkül für die Prädikatenlogik}1442,79372
\section{\textsl{Prover9} und \textsl{Mace4}}1802,98267
Die beiden Programme \textsl{Prover9} und \textsl{Mace4} wurden von William McCune \cite{mccune:2010} 1811,98974
\subsection{Der automatische Beweiser \textsl{Prover9}}1820,99289
logisch folgen, so stellen wir diese Formeln wie in Abbildung \ref{fig:group2.in} auf Seite1835,100111
Trägt die in Abbildung \ref{fig:group2.in} gezeigte Datei den Namen ``\texttt{group2.in}'', so können wir das1849,101042
\label{fig:group2.in}1885,102494
folgt.   Abbildung \ref{fig:group-commutative.in} zeigt eine1895,103075
\label{fig:group-commutative.in}1925,104400
\subsection{\textsl{Mace4} }1929,104448
solange die Strukturen endlich sind.  Abbildung \ref{fig:group.in} zeigt eine Eingabe-Datei, mit deren Hilfe1935,104969
Abbildung \ref{fig:group.in} gezeigte Text in einer Datei mit dem Namen ``\textsl{group.in}'' gespeichert, so1940,105389
\label{fig:group.in}1971,106774
Abbildung \ref{fig:group.out} zeigt einen Teil der von \textsl{Mace4} produzierten Ausgabe.1975,106820
\label{fig:group.out}2050,109108
\textsl{Otter} ist es McCune 1996 gelungen, die Robbin'sche Vermutung zu beweisen \cite{mccune:1997}.2055,109344

prolog-cut.tex,1046
\section{Der Cut-Operator}1,1
\subsection{Verbesserung der Effizienz von \textsl{Prolog}-Programmen durch den Cut-Operator}170,8749
  \label{fig:bubble_sort}251,12166
Abbildung \ref{fig:bubble_sort} zeigt die Implementierung des Bubble-Sort Algorithmus in254,12214
16 mal die selbe Lösung.  Abbildung \ref{fig:bubble_sort_cut} zeigt eine Implementierung,273,13583
  \label{fig:bubble_sort_cut}307,15200
\ref{fig:merge-sort-cut} gezeigt.  Nur die Gleichungen 7.~und 8.~haben Bedingungen, bei330,16471
  \label{fig:merge-sort-cut}382,18247
\section{Literaturhinweise}392,18800
\item \emph{The Art of Prolog} von Leon Sterling und Ehud Shapiro \cite{sterling:94}.398,19254
      \cite{bratko:90}.  Neben der Sprache \textsl{Prolog} führt dieses Buch auch in die401,19449
\item \emph{Foundations of Logic Programnming}   von J.~W.Lloyd \cite{lloyd:87}403,19630
      Cervoni \cite{deransart:96} gibt den ISO-Standard für die Sprache406,19822
\item \emph{SWI-Prolog 5.6 Reference Manual} von Jan Wielemaker \cite{wielemaker:06}408,19974

prolog-not.tex,1381
\section{Negation in \textsl{Prolog}}1,1
\subsection{Berechnung der Differenz zweier Listen}7,359
In \textsc{Setl} könnten wir diese Funktion wie in Abbildung \ref{fig:difference.stl}18,1147
\label{fig:difference.stl}36,1734
  \label{fig:difference}74,3062
\subsection{Semantik des Negations-Operators in \textsc{Prolog}}77,3099
enthält.  Zur Illustration betrachten wir das Programm in Abbildung \ref{fig:not-problem}.96,4175
  \label{fig:not-problem}129,5512
\ref{fig:not-problem} geschehen ist.  Die Anfrage \\[0.1cm]142,6181
\section{Die Tiefen-Suche in \textsl{Prolog}}152,6832
Abbildung \ref{fig:graph}.  Die Kanten können durch ein \textsl{Prolog}-Prädikat \texttt{edge/2}159,7355
  \label{fig:graph}181,7998
Unser erster Ansatz besteht aus dem Programm, das in Abbildung \ref{fig:connect} gezeigt187,8337
  \label{fig:connect}212,9231
Als nächstes testen wir das Programm mit dem in Abbildung \ref{fig:graph2} gezeigten242,10603
  \label{fig:graph2}264,11237
Abbildung \ref{fig:connect2} zeigt die Implementierung.320,14285
  \label{fig:connect2}342,15028
\subsection{Missionare und Kannibalen}372,16325
Abbildung \ref{fig:missionare.pl} auf Seite \pageref{fig:missionare.pl}403,18019
berechneten Fahrplan finden Sie in Abbildung \ref{fig:missionare-solution} 405,18208
  \label{fig:missionare-solution}445,19707
  \label{fig:missionare.pl}508,21953

prolog-old.tex,914
\chapter{Logisches Programmieren} 1,1
\section{Theoretische Grundlagen}6,237
\begin{Satz}  \label{satz:prolog-korrekt}158,8940
\section{Prolog --- Die Syntax}229,14291
\section{Prolog --- Wie funktioniert es}441,24581
\section{Funktionales Programmieren in Prolog}613,34453
denn der Occur--Check wird bei der Unifikation nicht durchgeführt.  Dadurch ist aber der Satz \ref{satz:prolog-korrekt}615,34698
\begin{Satz} \label{vertraelich}850,49587
aber, wie Satz \ref{vertraelich} zeigt, gerade dadurch handhabbar macht.899,52536
\section{Funktionale Programme: Beispiele}906,52993
\subsection{Ein einfacher Sortier--Algorithmus}911,53252
\subsection{Ein effizienter Sortier--Algorithmus}973,56713
\subsection{Symbolisches Differenzieren}1052,60790
Das Programm ist in Figur \ref{fig:symbolisch-diff} auf Seite \pageref{fig:symbolisch-diff} angegeben.1054,60956
  \label{fig:symbolisch-diff}1119,63110

prolog-rest.tex,49
\section{Probleme der deklarativen Semantik}1,1

prolog.tex,2128
\chapter{\textsl{Prolog}} 1,1
Programmierens mit \textsl{Prolog} erläutern können.  Abbildung \ref{fig:caesar} auf Seite24,1463
      interpretiert.  Das Programm in Abbildung \ref{fig:caesar} enthält in den Zeilen35,2159
      interpretiert.  Das Programm aus Abbildung \ref{fig:caesar} enthält in den Zeilen54,3203
  \label{fig:caesar}99,4630
Wir haben in dem Programm in Abbildung \ref{fig:caesar} die Zeile \\[0.2cm]103,4712
Nachdem wir jetzt Syntax und Semantik des Programms in Abbildung \ref{fig:caesar}186,8934
\section{Wie arbeitet \textsl{Prolog}?}245,11621
Als Ergebnis wird ein Fenster geöffnet, das Sie in Abbildung \ref{fig:debugger} auf Seite333,15876
  \label{fig:debugger}394,19296
\subsection{Die Tiefensuche}508,25794
beschriftet.  Als einfaches Beispiel betrachten wir das in Abbildung \ref{fig:depth.pl} gezeigte519,26642
ist in Abbildung \ref{fig:depth-first.eps} gezeigt.  Den Knoten, der mit der ursprünglichen Anfrage522,26738
\label{fig:depth.pl}555,27836
\caption{Der Suchbaum für das in Abbildung \ref{fig:depth.pl} gezeigte Programm.}563,28003
\label{fig:depth-first.eps}564,28042
Anhand des in Abbildung \ref{fig:depth-first.eps} gezeigten Suchbaums läßt sich nun die Tiefensuche567,28108
tief ist.  Als Beispiel betrachten wir das  in Abbildung \ref{fig:infinite.pl} gezeigte Prolog-Programm.573,28584
\label{fig:infinite.pl}595,29399
\section{Ein komplexeres Beispiel}598,29437
\ref{fig:toyota} auf Seite \pageref{fig:toyota} gezeigt ist.665,33536
\ref{fig:toyota} zeigt die Implementierung.667,33657
  \label{fig:toyota}763,37761
\section{Listen}772,38223
\subsection{Sortieren durch Einfügen}846,41917
Abbildung \ref{fig:insertion-sort} zeigt das \textsl{Prolog}-Programm.876,43772
  \label{fig:insertion-sort}909,44749
\subsection{Sortieren durch Mischen}964,48600
  \label{fig:merge-sort}1030,51437
\textsl{Prolog}-Programm umsetzen.  Abbildung \ref{fig:merge-sort}1099,54962
\subsection{Symbolisches Differenzieren}1109,55286
Abbildung \ref{fig:symbolisch-diff} zeigt die Implementierung in \textsl{Prolog}.1235,62833
  \label{fig:symbolisch-diff}1321,66355

setl.tex,6965
\chapter{Die Programmier-Sprache \textsc{SetlX}}1,1
Sprache \href{http://en.wikipedia.org/wiki/SETL}{\textsc{Setl}} \cite{setl86}.  Die Sprache \textsc{SetlX} lehnt sich in ihrer7,542
\section{Einführende Beispiele}17,980
in Abbildung \ref{fig:setlx} gezeigt.  Die Zeichenfolge ``\texttt{=>}'' ist der Prompt,28,1559
\label{fig:setlx}83,3298
Programme ausführen.  Speichern wir das in Abbildung \ref{fig:sum.stlx} gezeigte Programm in einer Datei mit105,4568
\label{fig:sum.stlx}134,5755
Wir diskutieren nun das in Abbildung \ref{fig:sum.stlx} auf Seite \pageref{fig:sum.stlx} gezeigte Programm138,5828
Als nächstes betrachten wir das in Abbildung \ref{fig:sum-recursive.stlx} auf Seite190,8708
  \label{fig:sum-recursive.stlx}218,9609
\section{Darstellung von Mengen}296,13560
Differenz zweier Mengen berechnet.   Abbildung \ref{fig:simple.stlx} zeigt die Datei301,13959
  \label{fig:simple.stlx}336,15321
\subsubsection{Definition von Mengen durch arithmetische Aufzählung}360,16412
\subsubsection{Definition von Mengen durch Iteratoren}401,18448
erkennen, das in Abbildung \ref{fig:primes-sieve.stlx} auf Seite \pageref{fig:primes-sieve.stlx}420,19447
  \label{fig:primes-sieve.stlx}447,20569
\ref{fig:primes-slim.stl} auf Seite \pageref{fig:primes-slim.stl} gezeigt wird, benutzt diese Methode501,23389
\caption{Alternatives Programm zur Berechnung der Primzahlen.  \label{fig:primes-slim.stl}}522,24135
\section{Paare, Relationen und Funktionen}537,24727
\ref{fig:function.stl} auf Seite \pageref{fig:function.stl} zeigt dies konkret.545,25321
\caption{Rechnen mit binären Relationen.}  \label{fig:function.stl}570,26355
\ref{fig:buggy-function.stl} auf Seite \pageref{fig:buggy-function.stl} beantwortet599,27653
\caption{Rechnen mit nicht-funktionalen binären Relationen.}  \label{fig:buggy-function.stl}620,28423
Daher liefert das Programm aus Abbildung \ref{fig:buggy-function.stl} die folgende Ausgabe:638,29414
\section{Allgemeine Tupel}648,29583
Das Programm in Abbildung \ref{fig:primes-tuple.stl} zeigt 655,30116
Verfahren wir das Programm in Abbildung \ref{fig:primes-slim.stl} auf Seite657,30262
\label{fig:primes-tuple.stl}681,31047
\section{Spezielle Funktionen und Operatoren auf Mengen}684,31093
Das Programm in Abbildung \ref{fig:sort.stl} auf Seite685,31176
\caption{Sortieren einer Menge.}  \label{fig:sort.stl}726,32643
$s$ bleibt unverändert.  Das Programm \texttt{from.stl} in Abbildung \ref{fig:from.stlx} auf Seite752,33870
\caption{Menge elementweise ausdrucken.}  \label{fig:from.stlx}778,34666
\caption{Weitere Operatoren auf Tupeln und Mengen.}  \label{fig:simple-tuple.stlx}849,37206
Das Programm \texttt{simple-tuple.stlx} in Abbildung \ref{fig:simple-tuple.stlx} auf Seite852,37307
\subsection{Anwendung: \emph{Sortieren durch Auswahl}}867,37801
\label{fig:min-sort.stl}891,38553
Abbildung \ref{fig:min-sort.stl} auf Seite \pageref{fig:min-sort.stl} zeigt die Umsetzung913,39342
\section{Kontroll-Strukturen}918,39467
In der  allgemeinsten Form hat eine Fallunterscheidung die in Abbildung \ref{fig:if} auf Seite921,39745
\label{fig:if}947,40699
\texttt{true} ergibt.  Abbildung \ref{fig:primes-forall.stlx} auf Seite1006,43100
\label{fig:primes-forall.stlx}1039,44172
\subsubsection{\texttt{Case}-Blöcke}1055,44937
gibt es noch den \texttt{case}-Block.  Ein solcher Block hat die  in Abbildung \ref{fig:case} auf Seite1057,45158
\caption{Struktur eines Case-Blocks}  \label{fig:case}1090,46654
Abbildung \ref{fig:case.stlx} zeigt eine (zugegebenermaßen triviale) Anwendung eines \texttt{case}-Blocks,1093,46696
\label{fig:case.stlx}1127,48091
\subsection{Schleifen}1136,48429
\subsubsection{\texttt{while}-Schleifen}1142,48770
Die allgemeine Syntax der \texttt{while}-Schleife ist in Abbildung \ref{fig:while} auf Seite1143,48878
\caption{Struktur der \texttt{while}-Schleife}  \label{fig:while}1162,49812
Abbildung \ref{fig:prime-proc} auf Seite1165,49855
\caption{Iterative Berechnung der Primzahlen.}  \label{fig:prime-proc}1192,50745
\subsubsection{\texttt{for}-Schleifen}1195,50786
Die allgemeine Syntax der \texttt{for}-Schleife ist in Abbildung \ref{fig:for} auf Seite1196,50890
\caption{Struktur der \texttt{for}-Schleife.}  \label{fig:for}1210,51465
Abbildung \ref{fig:primes-for.stlx} auf Seite1213,51506
\caption{Berechnung der Primzahlen nach Eratosthenes.}  \label{fig:primes-for.stlx}1257,53344
Der Algorithmus aus Abbildung \ref{fig:primes-for.stlx} kann durch die folgende Beobachtungen1260,53419
      Abbildung \ref{fig:primes-eratosthenes.stlx} auf Seite1270,54077
\caption{Effizientere Berechnung der Primzahlen nach Eratosthenes.}  \label{fig:primes-eratosthenes.stlx}1311,55599
\subsection{Fixpunkt-Algorithmen}1322,55712
Abbildung \ref{fig:solve.stlx} auf Seite \pageref{fig:solve.stlx} angegebene1330,56204
\caption{Lösung der Gleichung $x = cos(x)$ durch Iteration.}  \label{fig:solve.stlx}1355,56938
\subsection{Verschiedenes}1409,59681
\ref{fig:primes-forall.stlx} auf Seite \pageref{fig:primes-forall.stlx} gezeigte Programm,1422,60196
\section{Fallstudie: Berechnung von Wahrscheinlichkeiten}1462,61366
3 erscheinen kann, durch die gesamte Anzahl der Flops teilen.  Das in Abbildung \ref{fig:poker-triple.stlx}1486,62932
\label{fig:poker-triple.stlx}1513,63955
\section{Fallstudie: Berechnung von Pfaden}1565,66897
Sie in Abbildung \ref{fig:graph0}.1580,67867
  \label{fig:graph0}1589,68196
\subsection{Berechnung des transitiven Abschlusses einer Relation}1604,68954
  \label{fixpunkt}1632,70854
Die Fixpunkt-Gleichung \ref{fixpunkt} läßt sich algebraisch beweisen.  Es gilt1638,71139
Die Gleichung \ref{fixpunkt} kann benutzt werden um den transitiven Abschluß iterativ zu1652,71779
\caption{Berechnung des transitiven Abschlusses.}  \label{fig:transitive-closure.stlx}1765,76316
\ref{fig:transitive-closure.stlx} auf Seite \pageref{fig:transitive-closure.stlx}  zeigt1770,76406
\subsection{Berechnung der Pfade}1845,79682
\caption{Berechnung aller Verbindungen.}  \label{path.stlx}1902,82114
  \label{fig:graph-zykl}1909,82264
\ref{fig:transitive-closure.stlx} so abändern, dass alle möglichen Verbindungen zwischen zwei1913,82344
\ref{path.stlx} zeigt das resultierende Programm. 1915,82475
\ref{fig:graph-zykl} zeigt einen Graphen, der einen Zyklus enthält.  In diesem Graphen1918,82617
\label{fig:path-cyclic.stlx}1947,83741
Abbildung \ref{fig:path-cyclic.stlx} zeigt, wie wir das Programm ändern müssen, damit es1950,83798
eine Verbindung finden.  Abbildung \ref{fig:find-path} zeigt die Implementierung einer1963,84643
\label{fig:find-path}2006,86385
\subsection{Der Bauer mit dem Wolf, der Ziege und dem Kohl}2009,86425
Abbildung \ref{fig:wolf-ziege} zeigt das Programm.2116,91996
Die von diesem Programm berechnete Lösung finden Sie in Abbildung \ref{fig:wolf-ziege-solution}.2117,92103
\label{fig:wolf-ziege}2142,93014
\label{fig:wolf-ziege-solution}2176,94670
\subsection{Ausblick}2182,94731
